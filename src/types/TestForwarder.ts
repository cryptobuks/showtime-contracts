/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IForwarder {
  export type ForwardRequestStruct = {
    from: string;
    to: string;
    value: BigNumberish;
    gas: BigNumberish;
    nonce: BigNumberish;
    data: BytesLike;
    validUntilTime: BigNumberish;
  };

  export type ForwardRequestStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    from: string;
    to: string;
    value: BigNumber;
    gas: BigNumber;
    nonce: BigNumber;
    data: string;
    validUntilTime: BigNumber;
  };
}

export interface TestForwarderInterface extends utils.Interface {
  contractName: "TestForwarder";
  functions: {
    "callExecute(address,(address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": FunctionFragment;
    "decodeErrorMessage(bytes)": FunctionFragment;
    "getChainId()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "callExecute",
    values: [
      string,
      IForwarder.ForwardRequestStruct,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeErrorMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "callExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeErrorMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;

  events: {
    "Result(bool,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Result"): EventFragment;
}

export type ResultEvent = TypedEvent<
  [boolean, string],
  { success: boolean; error: string }
>;

export type ResultEventFilter = TypedEventFilter<ResultEvent>;

export interface TestForwarder extends BaseContract {
  contractName: "TestForwarder";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestForwarderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    callExecute(
      forwarder: string,
      req: IForwarder.ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decodeErrorMessage(
      ret: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { message: string }>;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;
  };

  callExecute(
    forwarder: string,
    req: IForwarder.ForwardRequestStruct,
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    sig: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decodeErrorMessage(
    ret: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    callExecute(
      forwarder: string,
      req: IForwarder.ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    decodeErrorMessage(
      ret: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Result(bool,string)"(success?: null, error?: null): ResultEventFilter;
    Result(success?: null, error?: null): ResultEventFilter;
  };

  estimateGas: {
    callExecute(
      forwarder: string,
      req: IForwarder.ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decodeErrorMessage(
      ret: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    callExecute(
      forwarder: string,
      req: IForwarder.ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      sig: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decodeErrorMessage(
      ret: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
