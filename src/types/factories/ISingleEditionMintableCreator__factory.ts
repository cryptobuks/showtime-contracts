/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  ISingleEditionMintableCreator,
  ISingleEditionMintableCreatorInterface,
} from "../ISingleEditionMintableCreator";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
      {
        internalType: "string",
        name: "_animationUrl",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "_animationHash",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "_imageUrl",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "_imageHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_editionSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_royaltyBPS",
        type: "uint256",
      },
    ],
    name: "createEdition",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "editionId",
        type: "uint256",
      },
    ],
    name: "getEditionAtId",
    outputs: [
      {
        internalType: "contract ISingleEditionMintable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class ISingleEditionMintableCreator__factory {
  static readonly abi = _abi;
  static createInterface(): ISingleEditionMintableCreatorInterface {
    return new utils.Interface(_abi) as ISingleEditionMintableCreatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISingleEditionMintableCreator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ISingleEditionMintableCreator;
  }
}
