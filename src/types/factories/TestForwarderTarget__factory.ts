/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestForwarderTarget,
  TestForwarderTargetInterface,
} from "../TestForwarderTarget";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "Reverting",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "realMsgData",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "realSender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "origin",
        type: "address",
      },
    ],
    name: "TestForwarderMessage",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "emitMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getTrustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "mustReceiveEth",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "publicMsgData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "publicMsgSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "versionRecipient",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60c0604052601c60808190527f322e322e332b6f70656e67736e2e746573742e726563697069656e740000000060a090815261003e916001919061008b565b5034801561004b57600080fd5b5060405161087038038061087083398101604081905261006a91610124565b600080546001600160a01b0319166001600160a01b0383161790555061018f565b82805461009790610154565b90600052602060002090601f0160209004810192826100b957600085556100ff565b82601f106100d257805160ff19168380011785556100ff565b828001600101855582156100ff579182015b828111156100ff5782518255916020019190600101906100e4565b5061010b92915061010f565b5090565b5b8082111561010b5760008155600101610110565b60006020828403121561013657600080fd5b81516001600160a01b038116811461014d57600080fd5b9392505050565b600181811c9082168061016857607f821691505b6020821081141561018957634e487b7160e01b600052602260045260246000fd5b50919050565b6106d28061019e6000396000f3fe60806040526004361061007f5760003560e01c8063a26388bb1161004e578063a26388bb1461012a578063b6ffacf71461013f578063bf9587261461016c578063ce1b815f1461018157600080fd5b80632ac0df261461008b578063486ff0cd146100ad578063572b6c05146100d85780637a27578d1461011757600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a6366004610491565b61019f565b005b3480156100b957600080fd5b506100c26101f0565b6040516100cf91906105a8565b60405180910390f35b3480156100e457600080fd5b506101076100f3366004610461565b6000546001600160a01b0391821691161490565b60405190151581526020016100cf565b6100ab610125366004610542565b61027e565b34801561013657600080fd5b506100ab6102d5565b34801561014b57600080fd5b5061015461038a565b6040516001600160a01b0390911681526020016100cf565b34801561017857600080fd5b506100c2610399565b34801561018d57600080fd5b506000546001600160a01b0316610154565b7f855af3b0567c81711540539ad042ef5a2a20d47d9d86ababf362a8e47058b5ef816101c96103dd565b6101d161042d565b33326040516101e5969594939291906105bb565b60405180910390a150565b600180546101fd90610674565b80601f016020809104026020016040519081016040528092919081815260200182805461022990610674565b80156102765780601f1061024b57610100808354040283529160200191610276565b820191906000526020600020905b81548152906001019060200180831161025957829003601f168201915b505050505081565b8034146102d25760405162461bcd60e51b815260206004820152601460248201527f6469646e277420726563656976652076616c756500000000000000000000000060448201526064015b60405180910390fd5b50565b30156103235760405162461bcd60e51b815260206004820152600b60248201527f616c77617973206661696c00000000000000000000000000000000000000000060448201526064016102c9565b7f3f110cf99894407239c5fa1bf0523ea12b54ef6eb3e88be600b6a7f0ff76eb0e604051610380906020808252818101527f696620796f7520736565207468697320726576657274206661696c65642e2e2e604082015260600190565b60405180910390a1565b600061039461042d565b905090565b60606103a36103dd565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092949350505050565b366000601482108015906103fb57506000546001600160a01b031633145b15610424576000803661040f60148261064f565b9261041c93929190610625565b915091509091565b50600091369150565b60006014361080159061044a57506000546001600160a01b031633145b1561045c575060131936013560601c90565b503390565b60006020828403121561047357600080fd5b81356001600160a01b038116811461048a57600080fd5b9392505050565b6000602082840312156104a357600080fd5b813567ffffffffffffffff808211156104bb57600080fd5b818401915084601f8301126104cf57600080fd5b8135818111156104e1576104e16106af565b604051601f8201601f19908116603f01168101908382118183101715610509576105096106af565b8160405282815287602084870101111561052257600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561055457600080fd5b5035919050565b6000815180845260005b8181101561058157602081850181015186830182015201610565565b81811115610593576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061048a602083018461055b565b60a0815260006105ce60a083018961055b565b8281036020840152868152868860208301376000602088830101526020601f19601f8901168201019150506001600160a01b0380861660408401528085166060840152808416608084015250979650505050505050565b6000808585111561063557600080fd5b8386111561064257600080fd5b5050820193919092039150565b60008282101561066f57634e487b7160e01b600052601160045260246000fd5b500390565b600181811c9082168061068857607f821691505b602082108114156106a957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000807000a";

type TestForwarderTargetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestForwarderTargetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestForwarderTarget__factory extends ContractFactory {
  constructor(...args: TestForwarderTargetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TestForwarderTarget";
  }

  deploy(
    forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestForwarderTarget> {
    return super.deploy(
      forwarder,
      overrides || {}
    ) as Promise<TestForwarderTarget>;
  }
  getDeployTransaction(
    forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(forwarder, overrides || {});
  }
  attach(address: string): TestForwarderTarget {
    return super.attach(address) as TestForwarderTarget;
  }
  connect(signer: Signer): TestForwarderTarget__factory {
    return super.connect(signer) as TestForwarderTarget__factory;
  }
  static readonly contractName: "TestForwarderTarget";
  public readonly contractName: "TestForwarderTarget";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestForwarderTargetInterface {
    return new utils.Interface(_abi) as TestForwarderTargetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestForwarderTarget {
    return new Contract(address, _abi, signerOrProvider) as TestForwarderTarget;
  }
}
