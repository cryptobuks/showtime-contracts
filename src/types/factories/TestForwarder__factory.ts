/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestForwarder, TestForwarderInterface } from "../TestForwarder";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "string",
        name: "error",
        type: "string",
      },
    ],
    name: "Result",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract Forwarder",
        name: "forwarder",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "validUntilTime",
            type: "uint256",
          },
        ],
        internalType: "struct IForwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "domainSeparator",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "requestTypeHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "suffixData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "callExecute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "ret",
        type: "bytes",
      },
    ],
    name: "decodeErrorMessage",
    outputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107f1806100206000396000f3fe6080604052600436106100345760003560e01c80633408e470146100395780634bcc3ef714610059578063b20e01591461006e575b600080fd5b34801561004557600080fd5b506040514681526020015b60405180910390f35b61006c6100673660046103fb565b61009b565b005b34801561007a57600080fd5b5061008e610089366004610389565b61020e565b6040516100509190610603565b6000808773ffffffffffffffffffffffffffffffffffffffff1663e024dc7f3489898989896040518763ffffffff1660e01b81526004016100e0959493929190610616565b6000604051808303818588803b1580156100f957600080fd5b505af115801561010d573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610136919081019061031f565b915091507f04501845adb21423b72bbb993fbc1df7e45ebdafdd8278f36ccbec80643ab25682836101dd5760405163b20e015960e01b8152309063b20e015990610184908690600401610603565b60006040518083038186803b15801561019c57600080fd5b505afa1580156101b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d89190810190610573565b6101ee565b604051806020016040528060008152505b6040516101fc9291906105e8565b60405180910390a15050505050505050565b6060604482111561023a57610226826004818661074f565b8101906102339190610522565b9050610274565b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293505050505b92915050565b600061028d61028884610727565b6106f6565b90508281528383830111156102a157600080fd5b828260208301376000602084830101529392505050565b60006102c661028884610727565b90508281528383830111156102da57600080fd5b6102e8836020830184610779565b9392505050565b80356102fa816107bf565b919050565b600082601f83011261031057600080fd5b6102e88383356020850161027a565b6000806040838503121561033257600080fd5b8251801515811461034257600080fd5b602084015190925067ffffffffffffffff81111561035f57600080fd5b8301601f8101851361037057600080fd5b61037f858251602084016102b8565b9150509250929050565b6000806020838503121561039c57600080fd5b823567ffffffffffffffff808211156103b457600080fd5b818501915085601f8301126103c857600080fd5b8135818111156103d757600080fd5b8660208285010111156103e957600080fd5b60209290920196919550909350505050565b60008060008060008060c0878903121561041457600080fd5b863561041f816107bf565b9550602087013567ffffffffffffffff8082111561043c57600080fd5b9088019060e0828b03121561045057600080fd5b6104586106cd565b610461836102ef565b815261046f602084016102ef565b602082015260408301356040820152606083013560608201526080830135608082015260a0830135828111156104a457600080fd5b6104b08c8286016102ff565b60a08301525060c083013560c082015280975050604089013595506060890135945060808901359150808211156104e657600080fd5b6104f28a838b016102ff565b935060a089013591508082111561050857600080fd5b5061051589828a016102ff565b9150509295509295509295565b60006020828403121561053457600080fd5b813567ffffffffffffffff81111561054b57600080fd5b8201601f8101841361055c57600080fd5b61056b8482356020840161027a565b949350505050565b60006020828403121561058557600080fd5b815167ffffffffffffffff81111561059c57600080fd5b8201601f810184136105ad57600080fd5b61056b848251602084016102b8565b600081518084526105d4816020860160208601610779565b601f01601f19169290920160200192915050565b821515815260406020820152600061056b60408301846105bc565b6020815260006102e860208301846105bc565b60a08152600073ffffffffffffffffffffffffffffffffffffffff8088511660a08401528060208901511660c084015250604087015160e08301526060870151610100830152608087015161012083015260a087015160e06101408401526106826101808401826105bc565b905060c088015161016084015286602084015285604084015282810360608401526106ad81866105bc565b905082810360808401526106c181856105bc565b98975050505050505050565b60405160e0810167ffffffffffffffff811182821017156106f0576106f06107a9565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561071f5761071f6107a9565b604052919050565b600067ffffffffffffffff821115610741576107416107a9565b50601f01601f191660200190565b6000808585111561075f57600080fd5b8386111561076c57600080fd5b5050820193919092039150565b60005b8381101561079457818101518382015260200161077c565b838111156107a3576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146107e157600080fd5b5056fea164736f6c6343000807000a";

type TestForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestForwarder__factory extends ContractFactory {
  constructor(...args: TestForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TestForwarder";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestForwarder> {
    return super.deploy(overrides || {}) as Promise<TestForwarder>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestForwarder {
    return super.attach(address) as TestForwarder;
  }
  connect(signer: Signer): TestForwarder__factory {
    return super.connect(signer) as TestForwarder__factory;
  }
  static readonly contractName: "TestForwarder";
  public readonly contractName: "TestForwarder";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestForwarderInterface {
    return new utils.Interface(_abi) as TestForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestForwarder {
    return new Contract(address, _abi, signerOrProvider) as TestForwarder;
  }
}
