{
  "0xb332358f4ae07845316b19ce054a0cea594acb92d7c1861a1de0e3a95e7fdcff": {
    "name": "GatedEditionCreator",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "GatedEditionCreator",
      "sourceName": "src/editions/GatedEditionCreator.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_editionCreator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_minter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_timeCop",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "NullAddress",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "context",
              "type": "address"
            }
          ],
          "name": "UnexpectedContext",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "VerificationFailed",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "editionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "royaltyBPS",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimWindowDurationSeconds",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "beneficiary",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "context",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "nonce",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "validUntil",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct SignedAttestation",
              "name": "signedAttestation",
              "type": "tuple"
            }
          ],
          "name": "createEdition",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "editionCreator",
          "outputs": [
            {
              "internalType": "contract ISingleEditionMintableCreator",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "editionId",
              "type": "uint256"
            }
          ],
          "name": "getEditionAtId",
          "outputs": [
            {
              "internalType": "contract IEditionSingleMintable",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "minter",
          "outputs": [
            {
              "internalType": "contract IGatedEditionMinter",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "showtimeVerifier",
          "outputs": [
            {
              "internalType": "contract IShowtimeVerifier",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "timeCop",
          "outputs": [
            {
              "internalType": "contract TimeCop",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x6101008060405234620000be5760608162000f978038038091620000248285620000c3565b833981010312620000be57805162000068916200004182620000fd565b60406020820151916200005483620000fd565b0151916200006283620000fd565b62000137565b604051610d8f9081620002088239608051818181610203015281816102c70152610731015260a05181818160de0152610bd3015260c0518181816101620152610a04015260e05181818161054d0152610b130152f35b600080fd5b601f909101601f19168101906001600160401b03821190821017620000e757604052565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811603620000be57565b90816020910312620000be57516200012781620000fd565b90565b506040513d6000823e3d90fd5b6001600160a01b03908116929083158015620001fc575b8015620001f1575b620001df578060209360049560805216918260a0521660e052604051928380926314d8397560e21b82525afa908115620001cf575b6000916200019a575b5060c052565b620001c0915060203d8111620001c7575b620001b78183620000c3565b8101906200010f565b3862000194565b503d620001ab565b620001d96200012a565b6200018b565b60405163e99d5ac560e01b8152600490fd5b508082161562000156565b50808316156200014e56fe608080604052600436101561001357600080fd5b6000803560e01c918263075461721461009657505080635360e5d41461008d578063ac52edfd14610084578063d33ed8b81461007b578063e4e22e1e146100725763f565d63d14610065575b38600080fd5b61006d610501565b61005f565b5061006d61040e565b5061006d61027b565b5061006d610186565b5061006d610116565b3461010257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101025760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b600091031261011157565b600080fd5b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115760206040517fac52edfd000000000000000000000000000000000000000000000000000000008152600435600482015273ffffffffffffffffffffffffffffffffffffffff8282602481847f0000000000000000000000000000000000000000000000000000000000000000165afa91821561026e575b60009261023f575b5060405191168152f35b610260919250833d8111610267575b610258818361033c565b8101906106eb565b9038610235565b503d61024e565b6102766106c0565b61022d565b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161032f57604052565b6103376102eb565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761032f57604052565b81601f820112156101115780359067ffffffffffffffff82116103f3575b604051926103d160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561033c565b8284526020838301011161011157816000926020809301838601378301015290565b6103fb6102eb565b61039b565b908160a09103126101115790565b5034610111576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115767ffffffffffffffff6004803582811161011157610460903690830161037d565b60243583811161011157610477903690840161037d565b6044358481116101115761048e903690850161037d565b90606435858111610111576104a6903690860161037d565b9260e435958611610111576104c46104d6956104fd97369101610400565b9360c4359360a4359360843593610703565b60405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b0390f35b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b604051906040820182811067ffffffffffffffff8211176105bc575b604052600882527f53484f5754494d450000000000000000000000000000000000000000000000006020830152565b6105c46102eb565b61058d565b90816020910312610111575190565b91908251928382526000905b84821061062f5750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610622575b0116010190565b600085828601015261061b565b906020908180828501015190828601015201906105e4565b9361068c6106af9461067e610100989561067061069a969d9c9b9d610120808c528b01906105d8565b9089820360208b01526105d8565b9087820360408901526105d8565b9085820360608701526105d8565b906000608085015283820360a08501526105d8565b94600060c083015260e08201520152565b506040513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff81160361011157565b908160209103126101115751610700816106cd565b90565b916107ea9397969491959261071788610995565b5073ffffffffffffffffffffffffffffffffffffffff98897f0000000000000000000000000000000000000000000000000000000000000000169261079961075d610571565b9660405196879485947f10c3009e00000000000000000000000000000000000000000000000000000000865260209d8e9b8c9960048901610647565b03816000855af191821561086e575b60009261083f575b5060405180809581947fac52edfd000000000000000000000000000000000000000000000000000000008352600483019190602083019252565b03915afa928315610832575b60009361080f575b5050819261080b92610aef565b1690565b61080b9350908161082b92903d1061026757610258818361033c565b91386107fe565b61083a6106c0565b6107f6565b610860919250833d8511610867575b610858818361033c565b8101906105c9565b90386107b0565b503d61084e565b6108766106c0565b6107a8565b35610700816106cd565b90816020910312610111575180151581036101115790565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b906020825280356108ec816106cd565b73ffffffffffffffffffffffffffffffffffffffff80911660208401526020820135610917816106cd565b166040830152604081013560608301526060810135608083015260808101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156101115781019081359067ffffffffffffffff8211610111578136031261011157602060c08460a08061070097015201920161089d565b6109a16020820161087b565b9073ffffffffffffffffffffffffffffffffffffffff913083821603610aa65750610a006000926020926040519485809481937f82059300000000000000000000000000000000000000000000000000000000008352600483016108dc565b03927f0000000000000000000000000000000000000000000000000000000000000000165af1908115610a99575b600091610a6b575b5015610a4157600190565b60046040517f439cc0cd000000000000000000000000000000000000000000000000000000008152fd5b610a8c915060203d8111610a92575b610a84818361033c565b810190610885565b38610a36565b503d610a7a565b610aa16106c0565b610a2e565b6040517fcc49271c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602490fd5b9190610afa9061087b565b73ffffffffffffffffffffffffffffffffffffffff80807f000000000000000000000000000000000000000000000000000000000000000016941692843b15610111576040517f26d79f7c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602481019190915260009485908290604490829084905af18015610d75575b610d62575b50823b15610d5e576040517f29ec16dd0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009190911673ffffffffffffffffffffffffffffffffffffffff16600482015260016024820152838160448183875af18015610d51575b610d3e575b506040517fa66ff0af00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260208160248187875af18015610d31575b610d13575b50813b15610d0f576040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015291908290602490829084905af18015610d02575b610ced5750565b80610cfa610d009261031b565b80610106565b565b610d0a6106c0565b610ce6565b8280fd5b610d2a9060203d811161086757610858818361033c565b5038610c86565b610d396106c0565b610c81565b80610cfa610d4b9261031b565b38610c2d565b610d596106c0565b610c28565b8380fd5b80610cfa610d6f9261031b565b38610ba3565b610d7d6106c0565b610b9e56fea164736f6c634300080d000a",
      "deployedBytecode": "0x608080604052600436101561001357600080fd5b6000803560e01c918263075461721461009657505080635360e5d41461008d578063ac52edfd14610084578063d33ed8b81461007b578063e4e22e1e146100725763f565d63d14610065575b38600080fd5b61006d610501565b61005f565b5061006d61040e565b5061006d61027b565b5061006d610186565b5061006d610116565b3461010257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101025760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b600091031261011157565b600080fd5b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115760206040517fac52edfd000000000000000000000000000000000000000000000000000000008152600435600482015273ffffffffffffffffffffffffffffffffffffffff8282602481847f0000000000000000000000000000000000000000000000000000000000000000165afa91821561026e575b60009261023f575b5060405191168152f35b610260919250833d8111610267575b610258818361033c565b8101906106eb565b9038610235565b503d61024e565b6102766106c0565b61022d565b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161032f57604052565b6103376102eb565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761032f57604052565b81601f820112156101115780359067ffffffffffffffff82116103f3575b604051926103d160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561033c565b8284526020838301011161011157816000926020809301838601378301015290565b6103fb6102eb565b61039b565b908160a09103126101115790565b5034610111576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115767ffffffffffffffff6004803582811161011157610460903690830161037d565b60243583811161011157610477903690840161037d565b6044358481116101115761048e903690850161037d565b90606435858111610111576104a6903690860161037d565b9260e435958611610111576104c46104d6956104fd97369101610400565b9360c4359360a4359360843593610703565b60405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b0390f35b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b604051906040820182811067ffffffffffffffff8211176105bc575b604052600882527f53484f5754494d450000000000000000000000000000000000000000000000006020830152565b6105c46102eb565b61058d565b90816020910312610111575190565b91908251928382526000905b84821061062f5750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610622575b0116010190565b600085828601015261061b565b906020908180828501015190828601015201906105e4565b9361068c6106af9461067e610100989561067061069a969d9c9b9d610120808c528b01906105d8565b9089820360208b01526105d8565b9087820360408901526105d8565b9085820360608701526105d8565b906000608085015283820360a08501526105d8565b94600060c083015260e08201520152565b506040513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff81160361011157565b908160209103126101115751610700816106cd565b90565b916107ea9397969491959261071788610995565b5073ffffffffffffffffffffffffffffffffffffffff98897f0000000000000000000000000000000000000000000000000000000000000000169261079961075d610571565b9660405196879485947f10c3009e00000000000000000000000000000000000000000000000000000000865260209d8e9b8c9960048901610647565b03816000855af191821561086e575b60009261083f575b5060405180809581947fac52edfd000000000000000000000000000000000000000000000000000000008352600483019190602083019252565b03915afa928315610832575b60009361080f575b5050819261080b92610aef565b1690565b61080b9350908161082b92903d1061026757610258818361033c565b91386107fe565b61083a6106c0565b6107f6565b610860919250833d8511610867575b610858818361033c565b8101906105c9565b90386107b0565b503d61084e565b6108766106c0565b6107a8565b35610700816106cd565b90816020910312610111575180151581036101115790565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b906020825280356108ec816106cd565b73ffffffffffffffffffffffffffffffffffffffff80911660208401526020820135610917816106cd565b166040830152604081013560608301526060810135608083015260808101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156101115781019081359067ffffffffffffffff8211610111578136031261011157602060c08460a08061070097015201920161089d565b6109a16020820161087b565b9073ffffffffffffffffffffffffffffffffffffffff913083821603610aa65750610a006000926020926040519485809481937f82059300000000000000000000000000000000000000000000000000000000008352600483016108dc565b03927f0000000000000000000000000000000000000000000000000000000000000000165af1908115610a99575b600091610a6b575b5015610a4157600190565b60046040517f439cc0cd000000000000000000000000000000000000000000000000000000008152fd5b610a8c915060203d8111610a92575b610a84818361033c565b810190610885565b38610a36565b503d610a7a565b610aa16106c0565b610a2e565b6040517fcc49271c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602490fd5b9190610afa9061087b565b73ffffffffffffffffffffffffffffffffffffffff80807f000000000000000000000000000000000000000000000000000000000000000016941692843b15610111576040517f26d79f7c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602481019190915260009485908290604490829084905af18015610d75575b610d62575b50823b15610d5e576040517f29ec16dd0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009190911673ffffffffffffffffffffffffffffffffffffffff16600482015260016024820152838160448183875af18015610d51575b610d3e575b506040517fa66ff0af00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260208160248187875af18015610d31575b610d13575b50813b15610d0f576040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015291908290602490829084905af18015610d02575b610ced5750565b80610cfa610d009261031b565b80610106565b565b610d0a6106c0565b610ce6565b8280fd5b610d2a9060203d811161086757610858818361033c565b5038610c86565b610d396106c0565b610c81565b80610cfa610d4b9261031b565b38610c2d565b610d596106c0565b610c28565b8380fd5b80610cfa610d6f9261031b565b38610ba3565b610d7d6106c0565b610b9e56fea164736f6c634300080d000a",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "createEdition(string,string,string,string,uint256,uint256,uint256,((address,address,uint256,uint256),bytes))": {
            "details": "we expect the signed attestation's context to correspond to this contract's addresswe expect the signed attestation's beneficiary to be the edition's creator",
            "params": {
              "animationUrl": "Metadata: Animation url (optional) of the edition entry",
              "claimWindowDurationSeconds": "How long after deployment the edition can be claimed, in seconds",
              "description": "Metadata: Description of the edition entry",
              "editionSize": "Total size of the edition (number of possible editions)",
              "imageUrl": "Metadata: Image url (semi-required) of the edition entry",
              "name": "Name of the edition contract",
              "royaltyBPS": "BPS amount of royalty",
              "signedAttestation": "the attestation to verify along with a corresponding signature"
            },
            "returns": {
              "_0": "the address of the created edition"
            }
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "abi_decode_contract_IShowtimeVerifier_fromMemory": {
              "entryPoint": 271,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "constructor_GatedEditionCreator": {
              "entryPoint": 311,
              "id": 6578,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "finalize_allocation": {
              "entryPoint": 195,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "revert_forward": {
              "entryPoint": 298,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 253,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [],
          "linkReferences": {},
          "object": "6101008060405234620000be5760608162000f978038038091620000248285620000c3565b833981010312620000be57805162000068916200004182620000fd565b60406020820151916200005483620000fd565b0151916200006283620000fd565b62000137565b604051610d8f9081620002088239608051818181610203015281816102c70152610731015260a05181818160de0152610bd3015260c0518181816101620152610a04015260e05181818161054d0152610b130152f35b600080fd5b601f909101601f19168101906001600160401b03821190821017620000e757604052565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811603620000be57565b90816020910312620000be57516200012781620000fd565b90565b506040513d6000823e3d90fd5b6001600160a01b03908116929083158015620001fc575b8015620001f1575b620001df578060209360049560805216918260a0521660e052604051928380926314d8397560e21b82525afa908115620001cf575b6000916200019a575b5060c052565b620001c0915060203d8111620001c7575b620001b78183620000c3565b8101906200010f565b3862000194565b503d620001ab565b620001d96200012a565b6200018b565b60405163e99d5ac560e01b8152600490fd5b508082161562000156565b50808316156200014e56fe608080604052600436101561001357600080fd5b6000803560e01c918263075461721461009657505080635360e5d41461008d578063ac52edfd14610084578063d33ed8b81461007b578063e4e22e1e146100725763f565d63d14610065575b38600080fd5b61006d610501565b61005f565b5061006d61040e565b5061006d61027b565b5061006d610186565b5061006d610116565b3461010257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101025760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b600091031261011157565b600080fd5b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115760206040517fac52edfd000000000000000000000000000000000000000000000000000000008152600435600482015273ffffffffffffffffffffffffffffffffffffffff8282602481847f0000000000000000000000000000000000000000000000000000000000000000165afa91821561026e575b60009261023f575b5060405191168152f35b610260919250833d8111610267575b610258818361033c565b8101906106eb565b9038610235565b503d61024e565b6102766106c0565b61022d565b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161032f57604052565b6103376102eb565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761032f57604052565b81601f820112156101115780359067ffffffffffffffff82116103f3575b604051926103d160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561033c565b8284526020838301011161011157816000926020809301838601378301015290565b6103fb6102eb565b61039b565b908160a09103126101115790565b5034610111576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115767ffffffffffffffff6004803582811161011157610460903690830161037d565b60243583811161011157610477903690840161037d565b6044358481116101115761048e903690850161037d565b90606435858111610111576104a6903690860161037d565b9260e435958611610111576104c46104d6956104fd97369101610400565b9360c4359360a4359360843593610703565b60405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b0390f35b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b604051906040820182811067ffffffffffffffff8211176105bc575b604052600882527f53484f5754494d450000000000000000000000000000000000000000000000006020830152565b6105c46102eb565b61058d565b90816020910312610111575190565b91908251928382526000905b84821061062f5750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610622575b0116010190565b600085828601015261061b565b906020908180828501015190828601015201906105e4565b9361068c6106af9461067e610100989561067061069a969d9c9b9d610120808c528b01906105d8565b9089820360208b01526105d8565b9087820360408901526105d8565b9085820360608701526105d8565b906000608085015283820360a08501526105d8565b94600060c083015260e08201520152565b506040513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff81160361011157565b908160209103126101115751610700816106cd565b90565b916107ea9397969491959261071788610995565b5073ffffffffffffffffffffffffffffffffffffffff98897f0000000000000000000000000000000000000000000000000000000000000000169261079961075d610571565b9660405196879485947f10c3009e00000000000000000000000000000000000000000000000000000000865260209d8e9b8c9960048901610647565b03816000855af191821561086e575b60009261083f575b5060405180809581947fac52edfd000000000000000000000000000000000000000000000000000000008352600483019190602083019252565b03915afa928315610832575b60009361080f575b5050819261080b92610aef565b1690565b61080b9350908161082b92903d1061026757610258818361033c565b91386107fe565b61083a6106c0565b6107f6565b610860919250833d8511610867575b610858818361033c565b8101906105c9565b90386107b0565b503d61084e565b6108766106c0565b6107a8565b35610700816106cd565b90816020910312610111575180151581036101115790565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b906020825280356108ec816106cd565b73ffffffffffffffffffffffffffffffffffffffff80911660208401526020820135610917816106cd565b166040830152604081013560608301526060810135608083015260808101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156101115781019081359067ffffffffffffffff8211610111578136031261011157602060c08460a08061070097015201920161089d565b6109a16020820161087b565b9073ffffffffffffffffffffffffffffffffffffffff913083821603610aa65750610a006000926020926040519485809481937f82059300000000000000000000000000000000000000000000000000000000008352600483016108dc565b03927f0000000000000000000000000000000000000000000000000000000000000000165af1908115610a99575b600091610a6b575b5015610a4157600190565b60046040517f439cc0cd000000000000000000000000000000000000000000000000000000008152fd5b610a8c915060203d8111610a92575b610a84818361033c565b810190610885565b38610a36565b503d610a7a565b610aa16106c0565b610a2e565b6040517fcc49271c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602490fd5b9190610afa9061087b565b73ffffffffffffffffffffffffffffffffffffffff80807f000000000000000000000000000000000000000000000000000000000000000016941692843b15610111576040517f26d79f7c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602481019190915260009485908290604490829084905af18015610d75575b610d62575b50823b15610d5e576040517f29ec16dd0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009190911673ffffffffffffffffffffffffffffffffffffffff16600482015260016024820152838160448183875af18015610d51575b610d3e575b506040517fa66ff0af00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260208160248187875af18015610d31575b610d13575b50813b15610d0f576040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015291908290602490829084905af18015610d02575b610ced5750565b80610cfa610d009261031b565b80610106565b565b610d0a6106c0565b610ce6565b8280fd5b610d2a9060203d811161086757610858818361033c565b5038610c86565b610d396106c0565b610c81565b80610cfa610d4b9261031b565b38610c2d565b610d596106c0565b610c28565b8380fd5b80610cfa610d6f9261031b565b38610ba3565b610d7d6106c0565b610b9e56fea164736f6c634300080d000a",
          "opcodes": "PUSH2 0x100 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0xBE JUMPI PUSH1 0x60 DUP2 PUSH3 0xF97 DUP1 CODESIZE SUB DUP1 SWAP2 PUSH3 0x24 DUP3 DUP6 PUSH3 0xC3 JUMP JUMPDEST DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0xBE JUMPI DUP1 MLOAD PUSH3 0x68 SWAP2 PUSH3 0x41 DUP3 PUSH3 0xFD JUMP JUMPDEST PUSH1 0x40 PUSH1 0x20 DUP3 ADD MLOAD SWAP2 PUSH3 0x54 DUP4 PUSH3 0xFD JUMP JUMPDEST ADD MLOAD SWAP2 PUSH3 0x62 DUP4 PUSH3 0xFD JUMP JUMPDEST PUSH3 0x137 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD8F SWAP1 DUP2 PUSH3 0x208 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x203 ADD MSTORE DUP2 DUP2 PUSH2 0x2C7 ADD MSTORE PUSH2 0x731 ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH1 0xDE ADD MSTORE PUSH2 0xBD3 ADD MSTORE PUSH1 0xC0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x162 ADD MSTORE PUSH2 0xA04 ADD MSTORE PUSH1 0xE0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x54D ADD MSTORE PUSH2 0xB13 ADD MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH3 0xE7 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH3 0xBE JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH3 0xBE JUMPI MLOAD PUSH3 0x127 DUP2 PUSH3 0xFD JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 SWAP1 DUP4 ISZERO DUP1 ISZERO PUSH3 0x1FC JUMPI JUMPDEST DUP1 ISZERO PUSH3 0x1F1 JUMPI JUMPDEST PUSH3 0x1DF JUMPI DUP1 PUSH1 0x20 SWAP4 PUSH1 0x4 SWAP6 PUSH1 0x80 MSTORE AND SWAP2 DUP3 PUSH1 0xA0 MSTORE AND PUSH1 0xE0 MSTORE PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x14D83975 PUSH1 0xE2 SHL DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH3 0x1CF JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH3 0x19A JUMPI JUMPDEST POP PUSH1 0xC0 MSTORE JUMP JUMPDEST PUSH3 0x1C0 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH3 0x1C7 JUMPI JUMPDEST PUSH3 0x1B7 DUP2 DUP4 PUSH3 0xC3 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH3 0x10F JUMP JUMPDEST CODESIZE PUSH3 0x194 JUMP JUMPDEST POP RETURNDATASIZE PUSH3 0x1AB JUMP JUMPDEST PUSH3 0x1D9 PUSH3 0x12A JUMP JUMPDEST PUSH3 0x18B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE99D5AC5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP DUP1 DUP3 AND ISZERO PUSH3 0x156 JUMP JUMPDEST POP DUP1 DUP4 AND ISZERO PUSH3 0x14E JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x7546172 EQ PUSH2 0x96 JUMPI POP POP DUP1 PUSH4 0x5360E5D4 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0xAC52EDFD EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0xD33ED8B8 EQ PUSH2 0x7B JUMPI DUP1 PUSH4 0xE4E22E1E EQ PUSH2 0x72 JUMPI PUSH4 0xF565D63D EQ PUSH2 0x65 JUMPI JUMPDEST CODESIZE PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6D PUSH2 0x501 JUMP JUMPDEST PUSH2 0x5F JUMP JUMPDEST POP PUSH2 0x6D PUSH2 0x40E JUMP JUMPDEST POP PUSH2 0x6D PUSH2 0x27B JUMP JUMPDEST POP PUSH2 0x6D PUSH2 0x186 JUMP JUMPDEST POP PUSH2 0x6D PUSH2 0x116 JUMP JUMPDEST CALLVALUE PUSH2 0x102 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x102 JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x111 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x111 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x111 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x111 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x111 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xAC52EDFD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP3 PUSH1 0x24 DUP2 DUP5 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x26E JUMPI JUMPDEST PUSH1 0x0 SWAP3 PUSH2 0x23F JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH2 0x260 SWAP2 SWAP3 POP DUP4 RETURNDATASIZE DUP2 GT PUSH2 0x267 JUMPI JUMPDEST PUSH2 0x258 DUP2 DUP4 PUSH2 0x33C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x6EB JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x235 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x24E JUMP JUMPDEST PUSH2 0x276 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x22D JUMP JUMPDEST POP CALLVALUE PUSH2 0x111 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x111 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST POP PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x32F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x337 PUSH2 0x2EB JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x32F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x111 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x3F3 JUMPI JUMPDEST PUSH1 0x40 MLOAD SWAP3 PUSH2 0x3D1 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND ADD DUP6 PUSH2 0x33C JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x111 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x3FB PUSH2 0x2EB JUMP JUMPDEST PUSH2 0x39B JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xA0 SWAP2 SUB SLT PUSH2 0x111 JUMPI SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x111 JUMPI PUSH2 0x100 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x111 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 DUP1 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x111 JUMPI PUSH2 0x460 SWAP1 CALLDATASIZE SWAP1 DUP4 ADD PUSH2 0x37D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x111 JUMPI PUSH2 0x477 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x37D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD DUP5 DUP2 GT PUSH2 0x111 JUMPI PUSH2 0x48E SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x37D JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD DUP6 DUP2 GT PUSH2 0x111 JUMPI PUSH2 0x4A6 SWAP1 CALLDATASIZE SWAP1 DUP7 ADD PUSH2 0x37D JUMP JUMPDEST SWAP3 PUSH1 0xE4 CALLDATALOAD SWAP6 DUP7 GT PUSH2 0x111 JUMPI PUSH2 0x4C4 PUSH2 0x4D6 SWAP6 PUSH2 0x4FD SWAP8 CALLDATASIZE SWAP2 ADD PUSH2 0x400 JUMP JUMPDEST SWAP4 PUSH1 0xC4 CALLDATALOAD SWAP4 PUSH1 0xA4 CALLDATALOAD SWAP4 PUSH1 0x84 CALLDATALOAD SWAP4 PUSH2 0x703 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x111 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x111 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5BC JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x8 DUP3 MSTORE PUSH32 0x53484F5754494D45000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2EB JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x111 JUMPI MLOAD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 SWAP1 JUMPDEST DUP5 DUP3 LT PUSH2 0x62F JUMPI POP PUSH1 0x1F DUP5 PUSH1 0x20 SWAP5 SWAP6 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP4 GT PUSH2 0x622 JUMPI JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP7 ADD ADD MSTORE PUSH2 0x61B JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP1 DUP3 DUP6 ADD ADD MLOAD SWAP1 DUP3 DUP7 ADD ADD MSTORE ADD SWAP1 PUSH2 0x5E4 JUMP JUMPDEST SWAP4 PUSH2 0x68C PUSH2 0x6AF SWAP5 PUSH2 0x67E PUSH2 0x100 SWAP9 SWAP6 PUSH2 0x670 PUSH2 0x69A SWAP7 SWAP14 SWAP13 SWAP12 SWAP14 PUSH2 0x120 DUP1 DUP13 MSTORE DUP12 ADD SWAP1 PUSH2 0x5D8 JUMP JUMPDEST SWAP1 DUP10 DUP3 SUB PUSH1 0x20 DUP12 ADD MSTORE PUSH2 0x5D8 JUMP JUMPDEST SWAP1 DUP8 DUP3 SUB PUSH1 0x40 DUP10 ADD MSTORE PUSH2 0x5D8 JUMP JUMPDEST SWAP1 DUP6 DUP3 SUB PUSH1 0x60 DUP8 ADD MSTORE PUSH2 0x5D8 JUMP JUMPDEST SWAP1 PUSH1 0x0 PUSH1 0x80 DUP6 ADD MSTORE DUP4 DUP3 SUB PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x5D8 JUMP JUMPDEST SWAP5 PUSH1 0x0 PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SUB PUSH2 0x111 JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x111 JUMPI MLOAD PUSH2 0x700 DUP2 PUSH2 0x6CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x7EA SWAP4 SWAP8 SWAP7 SWAP5 SWAP2 SWAP6 SWAP3 PUSH2 0x717 DUP9 PUSH2 0x995 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP9 DUP10 PUSH32 0x0 AND SWAP3 PUSH2 0x799 PUSH2 0x75D PUSH2 0x571 JUMP JUMPDEST SWAP7 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP5 DUP6 SWAP5 PUSH32 0x10C3009E00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE PUSH1 0x20 SWAP14 DUP15 SWAP12 DUP13 SWAP10 PUSH1 0x4 DUP10 ADD PUSH2 0x647 JUMP JUMPDEST SUB DUP2 PUSH1 0x0 DUP6 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x86E JUMPI JUMPDEST PUSH1 0x0 SWAP3 PUSH2 0x83F JUMPI JUMPDEST POP PUSH1 0x40 MLOAD DUP1 DUP1 SWAP6 DUP2 SWAP5 PUSH32 0xAC52EDFD00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP3 MSTORE JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x832 JUMPI JUMPDEST PUSH1 0x0 SWAP4 PUSH2 0x80F JUMPI JUMPDEST POP POP DUP2 SWAP3 PUSH2 0x80B SWAP3 PUSH2 0xAEF JUMP JUMPDEST AND SWAP1 JUMP JUMPDEST PUSH2 0x80B SWAP4 POP SWAP1 DUP2 PUSH2 0x82B SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x267 JUMPI PUSH2 0x258 DUP2 DUP4 PUSH2 0x33C JUMP JUMPDEST SWAP2 CODESIZE PUSH2 0x7FE JUMP JUMPDEST PUSH2 0x83A PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x860 SWAP2 SWAP3 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x867 JUMPI JUMPDEST PUSH2 0x858 DUP2 DUP4 PUSH2 0x33C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5C9 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x7B0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x84E JUMP JUMPDEST PUSH2 0x876 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x7A8 JUMP JUMPDEST CALLDATALOAD PUSH2 0x700 DUP2 PUSH2 0x6CD JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x111 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x111 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 PUSH1 0x20 SWAP5 SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP4 DUP2 DUP7 MSTORE DUP7 DUP7 ADD CALLDATACOPY PUSH1 0x0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 MSTORE DUP1 CALLDATALOAD PUSH2 0x8EC DUP2 PUSH2 0x6CD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x917 DUP2 PUSH2 0x6CD JUMP JUMPDEST AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x80 DUP2 ADD CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x111 JUMPI DUP2 ADD SWAP1 DUP2 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x111 JUMPI DUP2 CALLDATASIZE SUB SLT PUSH2 0x111 JUMPI PUSH1 0x20 PUSH1 0xC0 DUP5 PUSH1 0xA0 DUP1 PUSH2 0x700 SWAP8 ADD MSTORE ADD SWAP3 ADD PUSH2 0x89D JUMP JUMPDEST PUSH2 0x9A1 PUSH1 0x20 DUP3 ADD PUSH2 0x87B JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 ADDRESS DUP4 DUP3 AND SUB PUSH2 0xAA6 JUMPI POP PUSH2 0xA00 PUSH1 0x0 SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP5 DUP2 SWAP4 PUSH32 0x8205930000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x8DC JUMP JUMPDEST SUB SWAP3 PUSH32 0x0 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xA6B JUMPI JUMPDEST POP ISZERO PUSH2 0xA41 JUMPI PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x439CC0CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH2 0xA8C SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA84 DUP2 DUP4 PUSH2 0x33C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x885 JUMP JUMPDEST CODESIZE PUSH2 0xA36 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA7A JUMP JUMPDEST PUSH2 0xAA1 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0xA2E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCC49271C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0xAFA SWAP1 PUSH2 0x87B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP1 PUSH32 0x0 AND SWAP5 AND SWAP3 DUP5 EXTCODESIZE ISZERO PUSH2 0x111 JUMPI PUSH1 0x40 MLOAD PUSH32 0x26D79F7C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP5 DUP6 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0xD75 JUMPI JUMPDEST PUSH2 0xD62 JUMPI JUMPDEST POP DUP3 EXTCODESIZE ISZERO PUSH2 0xD5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x29EC16DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x0 SWAP2 SWAP1 SWAP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE DUP4 DUP2 PUSH1 0x44 DUP2 DUP4 DUP8 GAS CALL DUP1 ISZERO PUSH2 0xD51 JUMPI JUMPDEST PUSH2 0xD3E JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xA66FF0AF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 DUP8 DUP8 GAS CALL DUP1 ISZERO PUSH2 0xD31 JUMPI JUMPDEST PUSH2 0xD13 JUMPI JUMPDEST POP DUP2 EXTCODESIZE ISZERO PUSH2 0xD0F JUMPI PUSH1 0x40 MLOAD PUSH32 0xF2FDE38B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0xD02 JUMPI JUMPDEST PUSH2 0xCED JUMPI POP JUMP JUMPDEST DUP1 PUSH2 0xCFA PUSH2 0xD00 SWAP3 PUSH2 0x31B JUMP JUMPDEST DUP1 PUSH2 0x106 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xD0A PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0xCE6 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH2 0xD2A SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x867 JUMPI PUSH2 0x858 DUP2 DUP4 PUSH2 0x33C JUMP JUMPDEST POP CODESIZE PUSH2 0xC86 JUMP JUMPDEST PUSH2 0xD39 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0xC81 JUMP JUMPDEST DUP1 PUSH2 0xCFA PUSH2 0xD4B SWAP3 PUSH2 0x31B JUMP JUMPDEST CODESIZE PUSH2 0xC2D JUMP JUMPDEST PUSH2 0xD59 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0xC28 JUMP JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP1 PUSH2 0xCFA PUSH2 0xD6F SWAP3 PUSH2 0x31B JUMP JUMPDEST CODESIZE PUSH2 0xBA3 JUMP JUMPDEST PUSH2 0xD7D PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0xB9E JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP EXP ",
          "sourceMap": "707:4435:32:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;707:4435:32;;;;;;;-1:-1:-1;;707:4435:32;;;;-1:-1:-1;;;;;707:4435:32;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;707:4435:32;;;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;1100:483;-1:-1:-1;;;;;707:4435:32;;;;1100:483;1216:29;;:54;;;;1100:483;1216:80;;;;1100:483;1212:131;;1352:63;1529:47;1352:63;1529:47;1352:63;;;707:4435;1425:37;;707:4435;1425:37;707:4435;1472:27;;707:4435;;;;;;;;;1529:47;;;;;;;;;1100:483;1243:1;1529:47;;;1100:483;1510:66;;;1100:483::o;1529:47::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;1212:131;707:4435;;-1:-1:-1;;;1319:13:32;;;;;1216:80;707:4435;;;;1274:22;1216:80;;:54;707:4435;;;;1249:21;1216:54;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "abi_decode": {
              "entryPoint": 262,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_decode_bool_fromMemory": {
              "entryPoint": 2181,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_contract_IEditionSingleMintable_fromMemory": {
              "entryPoint": 1771,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_string": {
              "entryPoint": 893,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_struct_SignedAttestation_calldata": {
              "entryPoint": 1024,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_uint256_fromMemory": {
              "entryPoint": 1481,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_address_bool": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_address_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_bytes_calldata": {
              "entryPoint": 2205,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_contract_IEditionSingleMintable": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_string": {
              "entryPoint": 1496,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_string_string_string_string_rational_by_string_rational_by_uint256_uint256": {
              "entryPoint": 1607,
              "id": null,
              "parameterSlots": 8,
              "returnSlots": 1
            },
            "abi_encode_struct_SignedAttestation_calldata": {
              "entryPoint": 2268,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "copy_literal_to_memory_b5ae5fc411a71c348b1f84f5c657c10596f0c31a04f735ef24f47090ea1ed811": {
              "entryPoint": 1393,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "external_fun_createEdition": {
              "entryPoint": 1038,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_editionCreator": {
              "entryPoint": 635,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_getEditionAtId": {
              "entryPoint": 390,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_showtimeVerifier": {
              "entryPoint": 278,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_timeCop": {
              "entryPoint": 1281,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "finalize_allocation": {
              "entryPoint": 828,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "finalize_allocation_2093": {
              "entryPoint": 795,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "fun_configureEdition": {
              "entryPoint": 2799,
              "id": 6747,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "fun_createEdition": {
              "entryPoint": 1795,
              "id": 6636,
              "parameterSlots": 8,
              "returnSlots": 1
            },
            "fun_validateAttestation": {
              "entryPoint": 2453,
              "id": 6689,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x41": {
              "entryPoint": 747,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "read_from_calldatat_address": {
              "entryPoint": 2171,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "revert_forward": {
              "entryPoint": 1728,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_contract_IEditionSingleMintable": {
              "entryPoint": 1741,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [],
          "immutableReferences": {
            "6508": [
              {
                "length": 32,
                "start": 515
              },
              {
                "length": 32,
                "start": 711
              },
              {
                "length": 32,
                "start": 1841
              }
            ],
            "6511": [
              {
                "length": 32,
                "start": 222
              },
              {
                "length": 32,
                "start": 3027
              }
            ],
            "6514": [
              {
                "length": 32,
                "start": 354
              },
              {
                "length": 32,
                "start": 2564
              }
            ],
            "6517": [
              {
                "length": 32,
                "start": 1357
              },
              {
                "length": 32,
                "start": 2835
              }
            ]
          },
          "linkReferences": {},
          "object": "608080604052600436101561001357600080fd5b6000803560e01c918263075461721461009657505080635360e5d41461008d578063ac52edfd14610084578063d33ed8b81461007b578063e4e22e1e146100725763f565d63d14610065575b38600080fd5b61006d610501565b61005f565b5061006d61040e565b5061006d61027b565b5061006d610186565b5061006d610116565b3461010257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101025760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b600091031261011157565b600080fd5b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115760206040517fac52edfd000000000000000000000000000000000000000000000000000000008152600435600482015273ffffffffffffffffffffffffffffffffffffffff8282602481847f0000000000000000000000000000000000000000000000000000000000000000165afa91821561026e575b60009261023f575b5060405191168152f35b610260919250833d8111610267575b610258818361033c565b8101906106eb565b9038610235565b503d61024e565b6102766106c0565b61022d565b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161032f57604052565b6103376102eb565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761032f57604052565b81601f820112156101115780359067ffffffffffffffff82116103f3575b604051926103d160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561033c565b8284526020838301011161011157816000926020809301838601378301015290565b6103fb6102eb565b61039b565b908160a09103126101115790565b5034610111576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115767ffffffffffffffff6004803582811161011157610460903690830161037d565b60243583811161011157610477903690840161037d565b6044358481116101115761048e903690850161037d565b90606435858111610111576104a6903690860161037d565b9260e435958611610111576104c46104d6956104fd97369101610400565b9360c4359360a4359360843593610703565b60405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b0390f35b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b604051906040820182811067ffffffffffffffff8211176105bc575b604052600882527f53484f5754494d450000000000000000000000000000000000000000000000006020830152565b6105c46102eb565b61058d565b90816020910312610111575190565b91908251928382526000905b84821061062f5750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610622575b0116010190565b600085828601015261061b565b906020908180828501015190828601015201906105e4565b9361068c6106af9461067e610100989561067061069a969d9c9b9d610120808c528b01906105d8565b9089820360208b01526105d8565b9087820360408901526105d8565b9085820360608701526105d8565b906000608085015283820360a08501526105d8565b94600060c083015260e08201520152565b506040513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff81160361011157565b908160209103126101115751610700816106cd565b90565b916107ea9397969491959261071788610995565b5073ffffffffffffffffffffffffffffffffffffffff98897f0000000000000000000000000000000000000000000000000000000000000000169261079961075d610571565b9660405196879485947f10c3009e00000000000000000000000000000000000000000000000000000000865260209d8e9b8c9960048901610647565b03816000855af191821561086e575b60009261083f575b5060405180809581947fac52edfd000000000000000000000000000000000000000000000000000000008352600483019190602083019252565b03915afa928315610832575b60009361080f575b5050819261080b92610aef565b1690565b61080b9350908161082b92903d1061026757610258818361033c565b91386107fe565b61083a6106c0565b6107f6565b610860919250833d8511610867575b610858818361033c565b8101906105c9565b90386107b0565b503d61084e565b6108766106c0565b6107a8565b35610700816106cd565b90816020910312610111575180151581036101115790565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b906020825280356108ec816106cd565b73ffffffffffffffffffffffffffffffffffffffff80911660208401526020820135610917816106cd565b166040830152604081013560608301526060810135608083015260808101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156101115781019081359067ffffffffffffffff8211610111578136031261011157602060c08460a08061070097015201920161089d565b6109a16020820161087b565b9073ffffffffffffffffffffffffffffffffffffffff913083821603610aa65750610a006000926020926040519485809481937f82059300000000000000000000000000000000000000000000000000000000008352600483016108dc565b03927f0000000000000000000000000000000000000000000000000000000000000000165af1908115610a99575b600091610a6b575b5015610a4157600190565b60046040517f439cc0cd000000000000000000000000000000000000000000000000000000008152fd5b610a8c915060203d8111610a92575b610a84818361033c565b810190610885565b38610a36565b503d610a7a565b610aa16106c0565b610a2e565b6040517fcc49271c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602490fd5b9190610afa9061087b565b73ffffffffffffffffffffffffffffffffffffffff80807f000000000000000000000000000000000000000000000000000000000000000016941692843b15610111576040517f26d79f7c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602481019190915260009485908290604490829084905af18015610d75575b610d62575b50823b15610d5e576040517f29ec16dd0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009190911673ffffffffffffffffffffffffffffffffffffffff16600482015260016024820152838160448183875af18015610d51575b610d3e575b506040517fa66ff0af00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260208160248187875af18015610d31575b610d13575b50813b15610d0f576040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015291908290602490829084905af18015610d02575b610ced5750565b80610cfa610d009261031b565b80610106565b565b610d0a6106c0565b610ce6565b8280fd5b610d2a9060203d811161086757610858818361033c565b5038610c86565b610d396106c0565b610c81565b80610cfa610d4b9261031b565b38610c2d565b610d596106c0565b610c28565b8380fd5b80610cfa610d6f9261031b565b38610ba3565b610d7d6106c0565b610b9e56fea164736f6c634300080d000a",
          "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x7546172 EQ PUSH2 0x96 JUMPI POP POP DUP1 PUSH4 0x5360E5D4 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0xAC52EDFD EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0xD33ED8B8 EQ PUSH2 0x7B JUMPI DUP1 PUSH4 0xE4E22E1E EQ PUSH2 0x72 JUMPI PUSH4 0xF565D63D EQ PUSH2 0x65 JUMPI JUMPDEST CODESIZE PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6D PUSH2 0x501 JUMP JUMPDEST PUSH2 0x5F JUMP JUMPDEST POP PUSH2 0x6D PUSH2 0x40E JUMP JUMPDEST POP PUSH2 0x6D PUSH2 0x27B JUMP JUMPDEST POP PUSH2 0x6D PUSH2 0x186 JUMP JUMPDEST POP PUSH2 0x6D PUSH2 0x116 JUMP JUMPDEST CALLVALUE PUSH2 0x102 JUMPI DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x102 JUMPI PUSH1 0x20 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x111 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x111 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x111 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x111 JUMPI PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x111 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xAC52EDFD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP3 PUSH1 0x24 DUP2 DUP5 PUSH32 0x0 AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x26E JUMPI JUMPDEST PUSH1 0x0 SWAP3 PUSH2 0x23F JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH2 0x260 SWAP2 SWAP3 POP DUP4 RETURNDATASIZE DUP2 GT PUSH2 0x267 JUMPI JUMPDEST PUSH2 0x258 DUP2 DUP4 PUSH2 0x33C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x6EB JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x235 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x24E JUMP JUMPDEST PUSH2 0x276 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x22D JUMP JUMPDEST POP CALLVALUE PUSH2 0x111 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x111 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST POP PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x32F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x337 PUSH2 0x2EB JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x32F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x111 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x3F3 JUMPI JUMPDEST PUSH1 0x40 MLOAD SWAP3 PUSH2 0x3D1 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP7 ADD AND ADD DUP6 PUSH2 0x33C JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x111 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x3FB PUSH2 0x2EB JUMP JUMPDEST PUSH2 0x39B JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xA0 SWAP2 SUB SLT PUSH2 0x111 JUMPI SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x111 JUMPI PUSH2 0x100 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x111 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 DUP1 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x111 JUMPI PUSH2 0x460 SWAP1 CALLDATASIZE SWAP1 DUP4 ADD PUSH2 0x37D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x111 JUMPI PUSH2 0x477 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x37D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD DUP5 DUP2 GT PUSH2 0x111 JUMPI PUSH2 0x48E SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x37D JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD DUP6 DUP2 GT PUSH2 0x111 JUMPI PUSH2 0x4A6 SWAP1 CALLDATASIZE SWAP1 DUP7 ADD PUSH2 0x37D JUMP JUMPDEST SWAP3 PUSH1 0xE4 CALLDATALOAD SWAP6 DUP7 GT PUSH2 0x111 JUMPI PUSH2 0x4C4 PUSH2 0x4D6 SWAP6 PUSH2 0x4FD SWAP8 CALLDATASIZE SWAP2 ADD PUSH2 0x400 JUMP JUMPDEST SWAP4 PUSH1 0xC4 CALLDATALOAD SWAP4 PUSH1 0xA4 CALLDATALOAD SWAP4 PUSH1 0x84 CALLDATALOAD SWAP4 PUSH2 0x703 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x111 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0x111 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5BC JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x8 DUP3 MSTORE PUSH32 0x53484F5754494D45000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x5C4 PUSH2 0x2EB JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x111 JUMPI MLOAD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 SWAP1 JUMPDEST DUP5 DUP3 LT PUSH2 0x62F JUMPI POP PUSH1 0x1F DUP5 PUSH1 0x20 SWAP5 SWAP6 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP4 GT PUSH2 0x622 JUMPI JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP7 ADD ADD MSTORE PUSH2 0x61B JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP1 DUP2 DUP1 DUP3 DUP6 ADD ADD MLOAD SWAP1 DUP3 DUP7 ADD ADD MSTORE ADD SWAP1 PUSH2 0x5E4 JUMP JUMPDEST SWAP4 PUSH2 0x68C PUSH2 0x6AF SWAP5 PUSH2 0x67E PUSH2 0x100 SWAP9 SWAP6 PUSH2 0x670 PUSH2 0x69A SWAP7 SWAP14 SWAP13 SWAP12 SWAP14 PUSH2 0x120 DUP1 DUP13 MSTORE DUP12 ADD SWAP1 PUSH2 0x5D8 JUMP JUMPDEST SWAP1 DUP10 DUP3 SUB PUSH1 0x20 DUP12 ADD MSTORE PUSH2 0x5D8 JUMP JUMPDEST SWAP1 DUP8 DUP3 SUB PUSH1 0x40 DUP10 ADD MSTORE PUSH2 0x5D8 JUMP JUMPDEST SWAP1 DUP6 DUP3 SUB PUSH1 0x60 DUP8 ADD MSTORE PUSH2 0x5D8 JUMP JUMPDEST SWAP1 PUSH1 0x0 PUSH1 0x80 DUP6 ADD MSTORE DUP4 DUP3 SUB PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x5D8 JUMP JUMPDEST SWAP5 PUSH1 0x0 PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SUB PUSH2 0x111 JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x111 JUMPI MLOAD PUSH2 0x700 DUP2 PUSH2 0x6CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x7EA SWAP4 SWAP8 SWAP7 SWAP5 SWAP2 SWAP6 SWAP3 PUSH2 0x717 DUP9 PUSH2 0x995 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP9 DUP10 PUSH32 0x0 AND SWAP3 PUSH2 0x799 PUSH2 0x75D PUSH2 0x571 JUMP JUMPDEST SWAP7 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP5 DUP6 SWAP5 PUSH32 0x10C3009E00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE PUSH1 0x20 SWAP14 DUP15 SWAP12 DUP13 SWAP10 PUSH1 0x4 DUP10 ADD PUSH2 0x647 JUMP JUMPDEST SUB DUP2 PUSH1 0x0 DUP6 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x86E JUMPI JUMPDEST PUSH1 0x0 SWAP3 PUSH2 0x83F JUMPI JUMPDEST POP PUSH1 0x40 MLOAD DUP1 DUP1 SWAP6 DUP2 SWAP5 PUSH32 0xAC52EDFD00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP3 MSTORE JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x832 JUMPI JUMPDEST PUSH1 0x0 SWAP4 PUSH2 0x80F JUMPI JUMPDEST POP POP DUP2 SWAP3 PUSH2 0x80B SWAP3 PUSH2 0xAEF JUMP JUMPDEST AND SWAP1 JUMP JUMPDEST PUSH2 0x80B SWAP4 POP SWAP1 DUP2 PUSH2 0x82B SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x267 JUMPI PUSH2 0x258 DUP2 DUP4 PUSH2 0x33C JUMP JUMPDEST SWAP2 CODESIZE PUSH2 0x7FE JUMP JUMPDEST PUSH2 0x83A PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x860 SWAP2 SWAP3 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x867 JUMPI JUMPDEST PUSH2 0x858 DUP2 DUP4 PUSH2 0x33C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5C9 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x7B0 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x84E JUMP JUMPDEST PUSH2 0x876 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x7A8 JUMP JUMPDEST CALLDATALOAD PUSH2 0x700 DUP2 PUSH2 0x6CD JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x111 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x111 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP3 PUSH1 0x20 SWAP5 SWAP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP4 DUP2 DUP7 MSTORE DUP7 DUP7 ADD CALLDATACOPY PUSH1 0x0 DUP6 DUP3 DUP7 ADD ADD MSTORE ADD AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 MSTORE DUP1 CALLDATALOAD PUSH2 0x8EC DUP2 PUSH2 0x6CD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x917 DUP2 PUSH2 0x6CD JUMP JUMPDEST AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x80 DUP2 ADD CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP3 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x111 JUMPI DUP2 ADD SWAP1 DUP2 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x111 JUMPI DUP2 CALLDATASIZE SUB SLT PUSH2 0x111 JUMPI PUSH1 0x20 PUSH1 0xC0 DUP5 PUSH1 0xA0 DUP1 PUSH2 0x700 SWAP8 ADD MSTORE ADD SWAP3 ADD PUSH2 0x89D JUMP JUMPDEST PUSH2 0x9A1 PUSH1 0x20 DUP3 ADD PUSH2 0x87B JUMP JUMPDEST SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 ADDRESS DUP4 DUP3 AND SUB PUSH2 0xAA6 JUMPI POP PUSH2 0xA00 PUSH1 0x0 SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP5 DUP2 SWAP4 PUSH32 0x8205930000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x8DC JUMP JUMPDEST SUB SWAP3 PUSH32 0x0 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xA6B JUMPI JUMPDEST POP ISZERO PUSH2 0xA41 JUMPI PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x439CC0CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH2 0xA8C SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA84 DUP2 DUP4 PUSH2 0x33C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x885 JUMP JUMPDEST CODESIZE PUSH2 0xA36 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA7A JUMP JUMPDEST PUSH2 0xAA1 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0xA2E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xCC49271C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0xAFA SWAP1 PUSH2 0x87B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP1 PUSH32 0x0 AND SWAP5 AND SWAP3 DUP5 EXTCODESIZE ISZERO PUSH2 0x111 JUMPI PUSH1 0x40 MLOAD PUSH32 0x26D79F7C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 SWAP5 DUP6 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0xD75 JUMPI JUMPDEST PUSH2 0xD62 JUMPI JUMPDEST POP DUP3 EXTCODESIZE ISZERO PUSH2 0xD5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x29EC16DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x0 SWAP2 SWAP1 SWAP2 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE DUP4 DUP2 PUSH1 0x44 DUP2 DUP4 DUP8 GAS CALL DUP1 ISZERO PUSH2 0xD51 JUMPI JUMPDEST PUSH2 0xD3E JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xA66FF0AF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 DUP8 DUP8 GAS CALL DUP1 ISZERO PUSH2 0xD31 JUMPI JUMPDEST PUSH2 0xD13 JUMPI JUMPDEST POP DUP2 EXTCODESIZE ISZERO PUSH2 0xD0F JUMPI PUSH1 0x40 MLOAD PUSH32 0xF2FDE38B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0xD02 JUMPI JUMPDEST PUSH2 0xCED JUMPI POP JUMP JUMPDEST DUP1 PUSH2 0xCFA PUSH2 0xD00 SWAP3 PUSH2 0x31B JUMP JUMPDEST DUP1 PUSH2 0x106 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xD0A PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0xCE6 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH2 0xD2A SWAP1 PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x867 JUMPI PUSH2 0x858 DUP2 DUP4 PUSH2 0x33C JUMP JUMPDEST POP CODESIZE PUSH2 0xC86 JUMP JUMPDEST PUSH2 0xD39 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0xC81 JUMP JUMPDEST DUP1 PUSH2 0xCFA PUSH2 0xD4B SWAP3 PUSH2 0x31B JUMP JUMPDEST CODESIZE PUSH2 0xC2D JUMP JUMPDEST PUSH2 0xD59 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0xC28 JUMP JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP1 PUSH2 0xCFA PUSH2 0xD6F SWAP3 PUSH2 0x31B JUMP JUMPDEST CODESIZE PUSH2 0xBA3 JUMP JUMPDEST PUSH2 0xD7D PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0xB9E JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP EXP ",
          "sourceMap": "707:4435:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;955:43;707:4435;955:43;707:4435;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;1004:51;707:4435;;;;;;;;;;;;;;;;;;;871:10;3779:40;;707:4435;;;3779:40;;871:10;707:4435;3779:14;;871:10;3779:14;;;707:4435;3779:40;;;;;;;707:4435;-1:-1:-1;3779:40:32;;;707:4435;;;;;;;;;3779:40;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;707:4435;;;;;;;;;;;;;;;;888:61;707:4435;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;707:4435:32;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1061:32;707:4435;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;871:10;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;871:10:32;;;;;;;;707:4435;871:10;;;;707:4435;871:10;;;;;707:4435;;871:10;;;:::o;:::-;-1:-1:-1;871:10:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;3383:1;871:10;;;;;;;;;;;;:::i;:::-;;3383:1;871:10;;;;;;;;;;:::o;:::-;;707:4435;;871:10;;;;;;;;707:4435;;;871:10;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;:::o;2636:1030::-;;3189:353;2636:1030;;;;;;;3073:38;;;:::i;:::-;;707:4435;3189:14;;;707:4435;;3232:300;707:4435;;:::i;:::-;;;;3232:300;;;;;871:10;3232:300;;;;;;;;;;;;:::i;:::-;;;3383:1;3232:300;;;;;;;;2636:1030;3383:1;3232:300;;;2636:1030;707:4435;;;3189:353;;;;;871:10;3189:353;;3232:300;3189:353;;871:10;;;;;;;;3189:353;;;;;;;;;;2636:1030;3383:1;3189:353;;;2636:1030;3598:26;;;;;;;:::i;:::-;707:4435;2636:1030;:::o;3189:353::-;3598:26;3189:353;;;;;;;;-1:-1:-1;3189:353:32;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;3232:300;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;707:4435;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;871:10;707:4435;;;;871:10;;;;;;707:4435;-1:-1:-1;707:4435:32;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;871:10;707:4435;;;;;;;871:10;707:4435;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;707:4435:32;;;;;;;;;;;;;;;:::i;3832:503::-;4024:37;;;;;:::i;:::-;707:4435;;4094:4;;707:4435;;;4075:24;4071:88;;707:4435;4204:49;4024:29;707:4435;4024:37;707:4435;;;4204:49;;;;;;871:10;4204:49;;;;;;:::i;:::-;;:16;;707:4435;4204:49;;;;;;;3832:503;4024:29;4204:49;;;3832:503;4203:50;;4199:108;;4324:4;3832:503;:::o;4199:108::-;4204:49;707:4435;;4276:20;;;;4204:49;;;;4024:37;4204:49;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;4071:88;707:4435;;4122:26;;;707:4435;;;;;4122:26;;;707:4435;;;4122:26;4341:799;;;4577:41;4341:799;4577:41;:::i;:::-;707:4435;4665:7;;;707:4435;;;4665:67;;;;;;707:4435;;871:10;4665:67;;707:4435;;;4665:67;;;707:4435;;;;871:10;;;;-1:-1:-1;;;;707:4435:32;;;;;;-1:-1:-1;;4665:67:32;;;;;;4341:799;4665:67;;4341:799;4800:82;;;;;;707:4435;;871:10;4800:82;;4868:6;707:4435;;;;;;4665:67;4800:82;;707:4435;4877:4;707:4435;;;;;;;;;4800:82;;;;;;;4341:799;4800:82;;4341:799;-1:-1:-1;707:4435:32;;871:10;4935:28;;707:4435;;;4665:67;4935:28;;707:4435;4935:28;707:4435;;;4935:28;;;;;;;;4341:799;4935:28;;4341:799;5065:68;;;;;;707:4435;;871:10;5065:68;;707:4435;;;;;4665:67;5065:68;;707:4435;;;;;;;;;;;5065:68;;;;;;4341:799;5065:68;;4341:799;:::o;5065:68::-;;;;;;:::i;:::-;;;:::i;:::-;4341:799::o;5065:68::-;;;:::i;:::-;;;;707:4435;;;4935:28;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;4800:82;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;707:4435;;;4665:67;;;;;;:::i;:::-;;;;;;;:::i;:::-;;"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "694200",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "createEdition(string,string,string,string,uint256,uint256,uint256,((address,address,uint256,uint256),bytes))": "infinite",
            "editionCreator()": "infinite",
            "getEditionAtId(uint256)": "infinite",
            "minter()": "infinite",
            "showtimeVerifier()": "infinite",
            "timeCop()": "infinite"
          },
          "internal": {
            "configureEdition(contract IEditionSingleMintable,struct SignedAttestation calldata,uint256)": "infinite",
            "validateAttestation(struct SignedAttestation calldata)": "infinite"
          }
        },
        "methodIdentifiers": {
          "createEdition(string,string,string,string,uint256,uint256,uint256,((address,address,uint256,uint256),bytes))": "e4e22e1e",
          "editionCreator()": "d33ed8b8",
          "getEditionAtId(uint256)": "ac52edfd",
          "minter()": "07546172",
          "showtimeVerifier()": "5360e5d4",
          "timeCop()": "f565d63d"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_editionCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timeCop\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"}],\"name\":\"UnexpectedContext\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerificationFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimWindowDurationSeconds\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedAttestation\",\"name\":\"signedAttestation\",\"type\":\"tuple\"}],\"name\":\"createEdition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editionCreator\",\"outputs\":[{\"internalType\":\"contract ISingleEditionMintableCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"getEditionAtId\",\"outputs\":[{\"internalType\":\"contract IEditionSingleMintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract IGatedEditionMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showtimeVerifier\",\"outputs\":[{\"internalType\":\"contract IShowtimeVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeCop\",\"outputs\":[{\"internalType\":\"contract TimeCop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createEdition(string,string,string,string,uint256,uint256,uint256,((address,address,uint256,uint256),bytes))\":{\"details\":\"we expect the signed attestation's context to correspond to this contract's addresswe expect the signed attestation's beneficiary to be the edition's creator\",\"params\":{\"animationUrl\":\"Metadata: Animation url (optional) of the edition entry\",\"claimWindowDurationSeconds\":\"How long after deployment the edition can be claimed, in seconds\",\"description\":\"Metadata: Description of the edition entry\",\"editionSize\":\"Total size of the edition (number of possible editions)\",\"imageUrl\":\"Metadata: Image url (semi-required) of the edition entry\",\"name\":\"Name of the edition contract\",\"royaltyBPS\":\"BPS amount of royalty\",\"signedAttestation\":\"the attestation to verify along with a corresponding signature\"},\"returns\":{\"_0\":\"the address of the created edition\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createEdition(string,string,string,string,uint256,uint256,uint256,((address,address,uint256,uint256),bytes))\":{\"notice\":\"Creates a new edition contract as a factory with a deterministic address Important: None of these fields (except the Url fields with the same hash) can be changed after calling\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/editions/GatedEditionCreator.sol\":\"GatedEditionCreator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x45fe5b6e09537c84248325b6cb3595aed7752b07425dfe136351234f2d8130dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n  function mintEditions(address[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x04b73ddff10e4feb9297834b5550faecb1e63bfc8c4a513ecdf25796c49360db\",\"license\":\"GPL-3.0\"},\"src/editions/GatedEditionCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IGatedEditionMinter } from \\\"./interfaces/IGatedEditionMinter.sol\\\";\\nimport { IShowtimeVerifier, Attestation, SignedAttestation } from \\\"src/interfaces/IShowtimeVerifier.sol\\\";\\nimport { ISingleEditionMintableCreator, IEditionSingleMintable } from \\\"./interfaces/ISingleEditionMintableCreator.sol\\\";\\nimport { MetaEditionMinter } from \\\"./MetaEditionMinter.sol\\\";\\nimport { MetaEditionMinterFactory } from \\\"./MetaEditionMinterFactory.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ninterface _IEditionSingleMintable {\\n    function transferOwnership(address newOwner) external;\\n\\n    function setApprovedMinter(address minter, bool allowed) external;\\n}\\n\\ncontract GatedEditionCreator {\\n    error NullAddress();\\n    error VerificationFailed();\\n    error UnexpectedContext(address context);\\n\\n    string constant SYMBOL = \\\"SHOWTIME\\\";\\n\\n    ISingleEditionMintableCreator public immutable editionCreator;\\n    IGatedEditionMinter public immutable minter;\\n    IShowtimeVerifier public immutable showtimeVerifier;\\n    TimeCop public immutable timeCop;\\n\\n    constructor(\\n        address _editionCreator,\\n        address _minter,\\n        address _timeCop\\n    ) {\\n        if (_editionCreator == address(0) || _minter == address(0) || _timeCop == address(0)) {\\n            revert NullAddress();\\n        }\\n        editionCreator = ISingleEditionMintableCreator(_editionCreator);\\n        minter = IGatedEditionMinter(_minter);\\n        timeCop = TimeCop(_timeCop);\\n\\n        showtimeVerifier = IGatedEditionMinter(_minter).showtimeVerifier();\\n    }\\n\\n    /// Creates a new edition contract as a factory with a deterministic address\\n    /// Important: None of these fields (except the Url fields with the same hash) can be changed after calling\\n    /// @param name Name of the edition contract\\n    /// @param description Metadata: Description of the edition entry\\n    /// @param animationUrl Metadata: Animation url (optional) of the edition entry\\n    /// @param imageUrl Metadata: Image url (semi-required) of the edition entry\\n    /// @param editionSize Total size of the edition (number of possible editions)\\n    /// @param royaltyBPS BPS amount of royalty\\n    /// @param claimWindowDurationSeconds How long after deployment the edition can be claimed, in seconds\\n    /// @param signedAttestation the attestation to verify along with a corresponding signature\\n    /// @dev we expect the signed attestation's context to correspond to this contract's address\\n    /// @dev we expect the signed attestation's beneficiary to be the edition's creator\\n    /// @return the address of the created edition\\n    function createEdition(\\n        // ISingleEditionMintableCreator parameters\\n        string memory name,\\n        string memory description,\\n        string memory animationUrl,\\n        string memory imageUrl,\\n        uint256 editionSize,\\n        uint256 royaltyBPS,\\n        // additional parameters\\n        uint256 claimWindowDurationSeconds,\\n        SignedAttestation calldata signedAttestation\\n    ) external returns (address) {\\n        validateAttestation(signedAttestation);\\n\\n        // deploy the new edition\\n        IEditionSingleMintable edition = editionCreator.getEditionAtId(\\n            editionCreator.createEdition(\\n                name,\\n                SYMBOL,\\n                description,\\n                animationUrl,\\n                0, // animation hash\\n                imageUrl,\\n                0, // image hash\\n                editionSize,\\n                royaltyBPS\\n            )\\n        );\\n\\n        configureEdition(edition, signedAttestation, claimWindowDurationSeconds);\\n\\n        return address(edition);\\n    }\\n\\n    function getEditionAtId(uint256 editionId) external view returns (IEditionSingleMintable) {\\n        return editionCreator.getEditionAtId(editionId);\\n    }\\n\\n    function validateAttestation(SignedAttestation calldata signedAttestation) internal returns (bool) {\\n        // verify that the context for this attestation is valid\\n        address context = signedAttestation.attestation.context;\\n        if (context != address(this)) {\\n            revert UnexpectedContext(context);\\n        }\\n\\n        // verify attestation\\n        if (!showtimeVerifier.verifyAndBurn(signedAttestation)) {\\n            revert VerificationFailed();\\n        }\\n\\n        return true;\\n    }\\n\\n    function configureEdition(\\n        IEditionSingleMintable edition,\\n        // address creator,\\n        SignedAttestation calldata signedAttestation,\\n        uint256 _claimWindowDurationSeconds\\n    ) internal {\\n        address creator = signedAttestation.attestation.beneficiary;\\n\\n        // configure the time limit\\n        timeCop.setTimeLimit(address(edition), _claimWindowDurationSeconds);\\n\\n        // configure the edition (while we still own it)\\n        _IEditionSingleMintable(address(edition)).setApprovedMinter(address(minter), true);\\n\\n        // auto claim one for the creator\\n        edition.mintEdition(creator);\\n\\n        // and finally transfer ownership of the configured contract to the actual creator\\n        _IEditionSingleMintable(address(edition)).transferOwnership(creator);\\n    }\\n}\\n\",\"keccak256\":\"0xcb6bba8556eb68debd44431c21648c5cd55c7ac965edf0891c0c1be8244c6595\",\"license\":\"MIT\"},\"src/editions/MetaEditionMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\nimport { BaseRelayRecipient } from \\\"../utils/BaseRelayRecipient.sol\\\";\\n\\nimport { IEditionMinter } from \\\"./interfaces/IEditionMinter.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ncontract MetaEditionMinter is BaseRelayRecipient, IEditionMinter, Initializable {\\n    event Destroyed(MetaEditionMinter minter, IEditionSingleMintable collection);\\n\\n    error NullAddress();\\n    error AlreadyMinted(IEditionSingleMintable collection, address operator);\\n    error TimeLimitReached(IEditionSingleMintable collection);\\n    error TimeLimitNotReached(IEditionSingleMintable collection);\\n\\n    /// @dev these would be immutable if they were not set in the initializer\\n    IEditionSingleMintable public collection;\\n    TimeCop public timeCop;\\n\\n    mapping(address => bool) public minted;\\n\\n    /// @dev deploy the initial implementation via constructor and lock the contract, preventing calls to initialize()\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _trustedForwarder,\\n        IEditionSingleMintable _collection,\\n        TimeCop _timeCop\\n    ) external initializer {\\n        if (address(_collection) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        if (address(_timeCop) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        // we accept the null address for the trusted forwarder (meta-tx disabled)\\n        trustedForwarder = _trustedForwarder;\\n        collection = _collection;\\n        timeCop = _timeCop;\\n    }\\n\\n    function mintEdition(address _to) external override {\\n        if (timeCop.timeLimitReached(address(collection))) {\\n            revert TimeLimitReached(collection);\\n        }\\n\\n        address operator = _msgSender();\\n        recordMint(operator);\\n        if (operator != _to) {\\n            recordMint(_to);\\n        }\\n\\n        collection.mintEdition(_to);\\n    }\\n\\n    function recordMint(address minter) internal {\\n        if (minted[minter]) {\\n            revert AlreadyMinted(collection, minter);\\n        }\\n\\n        minted[minter] = true;\\n    }\\n\\n    /// @notice deletes the record of who minted for that collection if we are past the claim window\\n    /// @notice no-op if there was no time limit set or it has not expired yet\\n    function purge() external {\\n        // collection is not set in the implementation contract\\n        if (address(collection) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        bool expired = timeCop.timeLimitReached(address(collection));\\n        if (!expired) {\\n            revert TimeLimitNotReached(collection);\\n        }\\n\\n        emit Destroyed(this, collection);\\n\\n        selfdestruct(payable(collection.owner()));\\n    }\\n}\\n\",\"keccak256\":\"0x8c450e652342c3ef47f689b9d6fece36060ca9c9a1d4826356d6f8130a768d26\",\"license\":\"MIT\"},\"src/editions/MetaEditionMinterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { ClonesUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\nimport { MetaEditionMinter } from \\\"./MetaEditionMinter.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ncontract MetaEditionMinterFactory {\\n    error NullAddress();\\n\\n    address public immutable trustedForwarder;\\n    MetaEditionMinter public immutable minterImpl;\\n    TimeCop public immutable timeCop;\\n\\n    constructor (address _trustedForwarder, address _timeCop) {\\n        if (_timeCop == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        /// @dev we accept the null address for the trusted forwarder (meta-tx disabled)\\n        trustedForwarder = _trustedForwarder;\\n        timeCop = TimeCop(_timeCop);\\n\\n        /// @dev this deploys and locks down the base implementation, which we will later deploy proxies to\\n        minterImpl = new MetaEditionMinter();\\n    }\\n\\n    /// returns an initialized minimal proxy to the base MetaEditionMinter implementation\\n    function createMinter(IEditionSingleMintable _edition) public returns (MetaEditionMinter newMinter) {\\n        // deploy the minter for this edition\\n        newMinter = MetaEditionMinter(\\n            ClonesUpgradeable.cloneDeterministic(\\n                address(minterImpl),\\n                bytes32(uint256(uint160(address(_edition))))\\n            )\\n        );\\n\\n        newMinter.initialize(trustedForwarder, _edition, timeCop);\\n    }\\n\\n    function getMinterForEdition(address edition) public view returns (address) {\\n        return ClonesUpgradeable.predictDeterministicAddress(\\n            address(minterImpl),\\n            bytes32(uint256(uint160(edition)))\\n        );\\n    }\\n}\",\"keccak256\":\"0x6c1123f0650f87160522b82d9aae08dd15f1afd80cf009b7ec1139d1d399a1d7\",\"license\":\"MIT\"},\"src/editions/TimeCop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TimeCop {\\n    event TimeLimitSet(address collection, uint256 deadline);\\n\\n    error InvalidTimeLimit(uint256 offsetSeconds);\\n    error NotCollectionOwner();\\n    error TimeLimitAlreadySet();\\n\\n    uint256 public immutable MAX_DURATION_SECONDS;\\n\\n    /// @notice the time limits expressed as a timestamp in seconds\\n    mapping(address => uint256) public timeLimits;\\n\\n    /// @param _maxDurationSeconds maximum time limit\\n    /// @dev _maxDurationSeconds can be set to 0 to have no maximum time limit\\n    constructor(uint256 _maxDurationSeconds) {\\n        MAX_DURATION_SECONDS = _maxDurationSeconds;\\n    }\\n\\n    /// @notice Sets the deadline for the given collection\\n    /// @notice Only the owner of the collection can set the deadline\\n    /// @param collection The address to set the deadline for\\n    /// @param offsetSeconds a duration in seconds that will be used to set the time limit\\n    function setTimeLimit(address collection, uint256 offsetSeconds) external {\\n        if (offsetSeconds == 0) {\\n            revert InvalidTimeLimit(offsetSeconds);\\n        }\\n\\n        if (MAX_DURATION_SECONDS > 0 && offsetSeconds > MAX_DURATION_SECONDS) {\\n            revert InvalidTimeLimit(offsetSeconds);\\n        }\\n\\n        if (timeLimitSet(collection)) {\\n            revert TimeLimitAlreadySet();\\n        }\\n\\n        if (msg.sender != Ownable(collection).owner()) {\\n            revert NotCollectionOwner();\\n        }\\n\\n        uint256 deadline = block.timestamp + offsetSeconds;\\n        timeLimits[collection] = deadline;\\n\\n        emit TimeLimitSet(collection, deadline);\\n    }\\n\\n    function timeLimitSet(address collection) public view returns (bool) {\\n        return timeLimits[collection] > 0;\\n    }\\n\\n    /// @return false if there is no time limit set for that collection\\n    function timeLimitReached(address collection) public view returns (bool) {\\n        return timeLimitSet(collection) && block.timestamp > timeLimits[collection];\\n    }\\n}\",\"keccak256\":\"0x7a245be43fac95db15a2f5b1badaa8de64feac5a9afb6ab8c06f535512f03743\",\"license\":\"MIT\"},\"src/editions/interfaces/IEditionMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IEditionMinter {\\n    function mintEdition(address _to) external;\\n}\\n\",\"keccak256\":\"0xbb6abf578a6fdaa3a53694b9b4539975395983ab485abac35143ba6b5fcd6840\",\"license\":\"MIT\"},\"src/editions/interfaces/IGatedEditionMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IShowtimeVerifier, SignedAttestation } from \\\"src/interfaces/IShowtimeVerifier.sol\\\";\\n\\ninterface IGatedEditionMinter {\\n    function mintEdition(SignedAttestation calldata signedAttestation) external;\\n\\n    function mintEditions(SignedAttestation[] calldata signedAttestation) external;\\n\\n    function showtimeVerifier() external view returns (IShowtimeVerifier);\\n}\\n\",\"keccak256\":\"0xf9f42e73832c5bcb53d1b501e92a65caef8dd8e48ab14022cb5d838003d94500\",\"license\":\"MIT\"},\"src/editions/interfaces/ISingleEditionMintableCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\ninterface ISingleEditionMintableCreator {\\n    /// @return The ID of the created edition\\n    function createEdition(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS\\n    ) external returns (uint256);\\n\\n    /// Get edition given the created ID\\n    /// @param editionId id of edition to get contract for\\n    /// @return SingleEditionMintable Edition NFT contract\\n    function getEditionAtId(uint256 editionId) external view returns (IEditionSingleMintable);\\n}\\n\",\"keccak256\":\"0xbf4d6d1047d74d55e38b59c15a12bb81d66ad588fbce39277ccec85bca955f11\",\"license\":\"MIT\"},\"src/interfaces/IShowtimeVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nstruct Attestation {\\n    address beneficiary;\\n    address context;\\n    uint256 nonce;\\n    uint256 validUntil;\\n}\\n\\nstruct SignedAttestation {\\n    Attestation attestation;\\n    bytes signature;\\n}\\n\\ninterface IShowtimeVerifier {\\n    error BadNonce(uint256 expected, uint256 actual);\\n    error DeadlineTooLong();\\n    error Expired();\\n    error NullAddress();\\n    error SignerExpired(address signer);\\n    error Unauthorized();\\n    error UnknownSigner();\\n\\n    event SignerAdded(address signer, uint256 validUntil);\\n    event SignerRevoked(address signer);\\n    event ManagerUpdated(address newManager);\\n\\n    function verify(SignedAttestation calldata signedAttestation) external view returns (bool);\\n\\n    function verifyAndBurn(SignedAttestation calldata signedAttestation) external returns (bool);\\n\\n    function verify(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external view returns (bool);\\n\\n    function verifyAndBurn(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external returns (bool);\\n\\n    function setManager(address _manager) external;\\n\\n    function registerSigner(address signer, uint256 validityDays) external returns (uint256 validUntil);\\n\\n    function revokeSigner(address signer) external;\\n\\n    function registerAndRevoke(\\n        address signerToRegister,\\n        address signerToRevoke,\\n        uint256 validityDays\\n    ) external returns (uint256 validUntil);\\n}\\n\",\"keccak256\":\"0x695d273638ee417210ccd91f0d47a9e280573887d068086f19038b8483950af8\",\"license\":\"MIT\"},\"src/utils/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    /*\\n     * require a function to be called through GSN only\\n     */\\n    modifier trustedForwarderOnly() {\\n        require(msg.sender == address(trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n        _;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal view virtual returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bc32699996cd88763232d1d70d7c680c382c13dfd6a3db3580156dd79cd3f1a\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [],
        "types": null
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "createEdition(string,string,string,string,uint256,uint256,uint256,((address,address,uint256,uint256),bytes))": {
            "notice": "Creates a new edition contract as a factory with a deterministic address Important: None of these fields (except the Url fields with the same hash) can be changed after calling"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"src/editions/GatedEditionCreator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IGatedEditionMinter } from \\\"./interfaces/IGatedEditionMinter.sol\\\";\\nimport { IShowtimeVerifier, Attestation, SignedAttestation } from \\\"src/interfaces/IShowtimeVerifier.sol\\\";\\nimport { ISingleEditionMintableCreator, IEditionSingleMintable } from \\\"./interfaces/ISingleEditionMintableCreator.sol\\\";\\nimport { MetaEditionMinter } from \\\"./MetaEditionMinter.sol\\\";\\nimport { MetaEditionMinterFactory } from \\\"./MetaEditionMinterFactory.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ninterface _IEditionSingleMintable {\\n    function transferOwnership(address newOwner) external;\\n\\n    function setApprovedMinter(address minter, bool allowed) external;\\n}\\n\\ncontract GatedEditionCreator {\\n    error NullAddress();\\n    error VerificationFailed();\\n    error UnexpectedContext(address context);\\n\\n    string constant SYMBOL = \\\"SHOWTIME\\\";\\n\\n    ISingleEditionMintableCreator public immutable editionCreator;\\n    IGatedEditionMinter public immutable minter;\\n    IShowtimeVerifier public immutable showtimeVerifier;\\n    TimeCop public immutable timeCop;\\n\\n    constructor(\\n        address _editionCreator,\\n        address _minter,\\n        address _timeCop\\n    ) {\\n        if (_editionCreator == address(0) || _minter == address(0) || _timeCop == address(0)) {\\n            revert NullAddress();\\n        }\\n        editionCreator = ISingleEditionMintableCreator(_editionCreator);\\n        minter = IGatedEditionMinter(_minter);\\n        timeCop = TimeCop(_timeCop);\\n\\n        showtimeVerifier = IGatedEditionMinter(_minter).showtimeVerifier();\\n    }\\n\\n    /// Creates a new edition contract as a factory with a deterministic address\\n    /// Important: None of these fields (except the Url fields with the same hash) can be changed after calling\\n    /// @param name Name of the edition contract\\n    /// @param description Metadata: Description of the edition entry\\n    /// @param animationUrl Metadata: Animation url (optional) of the edition entry\\n    /// @param imageUrl Metadata: Image url (semi-required) of the edition entry\\n    /// @param editionSize Total size of the edition (number of possible editions)\\n    /// @param royaltyBPS BPS amount of royalty\\n    /// @param claimWindowDurationSeconds How long after deployment the edition can be claimed, in seconds\\n    /// @param signedAttestation the attestation to verify along with a corresponding signature\\n    /// @dev we expect the signed attestation's context to correspond to this contract's address\\n    /// @dev we expect the signed attestation's beneficiary to be the edition's creator\\n    /// @return the address of the created edition\\n    function createEdition(\\n        // ISingleEditionMintableCreator parameters\\n        string memory name,\\n        string memory description,\\n        string memory animationUrl,\\n        string memory imageUrl,\\n        uint256 editionSize,\\n        uint256 royaltyBPS,\\n        // additional parameters\\n        uint256 claimWindowDurationSeconds,\\n        SignedAttestation calldata signedAttestation\\n    ) external returns (address) {\\n        validateAttestation(signedAttestation);\\n\\n        // deploy the new edition\\n        IEditionSingleMintable edition = editionCreator.getEditionAtId(\\n            editionCreator.createEdition(\\n                name,\\n                SYMBOL,\\n                description,\\n                animationUrl,\\n                0, // animation hash\\n                imageUrl,\\n                0, // image hash\\n                editionSize,\\n                royaltyBPS\\n            )\\n        );\\n\\n        configureEdition(edition, signedAttestation, claimWindowDurationSeconds);\\n\\n        return address(edition);\\n    }\\n\\n    function getEditionAtId(uint256 editionId) external view returns (IEditionSingleMintable) {\\n        return editionCreator.getEditionAtId(editionId);\\n    }\\n\\n    function validateAttestation(SignedAttestation calldata signedAttestation) internal returns (bool) {\\n        // verify that the context for this attestation is valid\\n        address context = signedAttestation.attestation.context;\\n        if (context != address(this)) {\\n            revert UnexpectedContext(context);\\n        }\\n\\n        // verify attestation\\n        if (!showtimeVerifier.verifyAndBurn(signedAttestation)) {\\n            revert VerificationFailed();\\n        }\\n\\n        return true;\\n    }\\n\\n    function configureEdition(\\n        IEditionSingleMintable edition,\\n        // address creator,\\n        SignedAttestation calldata signedAttestation,\\n        uint256 _claimWindowDurationSeconds\\n    ) internal {\\n        address creator = signedAttestation.attestation.beneficiary;\\n\\n        // configure the time limit\\n        timeCop.setTimeLimit(address(edition), _claimWindowDurationSeconds);\\n\\n        // configure the edition (while we still own it)\\n        _IEditionSingleMintable(address(edition)).setApprovedMinter(address(minter), true);\\n\\n        // auto claim one for the creator\\n        edition.mintEdition(creator);\\n\\n        // and finally transfer ownership of the configured contract to the actual creator\\n        _IEditionSingleMintable(address(edition)).transferOwnership(creator);\\n    }\\n}\\n\"\n    },\n    \"src/editions/interfaces/IGatedEditionMinter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IShowtimeVerifier, SignedAttestation } from \\\"src/interfaces/IShowtimeVerifier.sol\\\";\\n\\ninterface IGatedEditionMinter {\\n    function mintEdition(SignedAttestation calldata signedAttestation) external;\\n\\n    function mintEditions(SignedAttestation[] calldata signedAttestation) external;\\n\\n    function showtimeVerifier() external view returns (IShowtimeVerifier);\\n}\\n\"\n    },\n    \"src/interfaces/IShowtimeVerifier.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nstruct Attestation {\\n    address beneficiary;\\n    address context;\\n    uint256 nonce;\\n    uint256 validUntil;\\n}\\n\\nstruct SignedAttestation {\\n    Attestation attestation;\\n    bytes signature;\\n}\\n\\ninterface IShowtimeVerifier {\\n    error BadNonce(uint256 expected, uint256 actual);\\n    error DeadlineTooLong();\\n    error Expired();\\n    error NullAddress();\\n    error SignerExpired(address signer);\\n    error Unauthorized();\\n    error UnknownSigner();\\n\\n    event SignerAdded(address signer, uint256 validUntil);\\n    event SignerRevoked(address signer);\\n    event ManagerUpdated(address newManager);\\n\\n    function verify(SignedAttestation calldata signedAttestation) external view returns (bool);\\n\\n    function verifyAndBurn(SignedAttestation calldata signedAttestation) external returns (bool);\\n\\n    function verify(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external view returns (bool);\\n\\n    function verifyAndBurn(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external returns (bool);\\n\\n    function setManager(address _manager) external;\\n\\n    function registerSigner(address signer, uint256 validityDays) external returns (uint256 validUntil);\\n\\n    function revokeSigner(address signer) external;\\n\\n    function registerAndRevoke(\\n        address signerToRegister,\\n        address signerToRevoke,\\n        uint256 validityDays\\n    ) external returns (uint256 validUntil);\\n}\\n\"\n    },\n    \"src/editions/interfaces/ISingleEditionMintableCreator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\ninterface ISingleEditionMintableCreator {\\n    /// @return The ID of the created edition\\n    function createEdition(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS\\n    ) external returns (uint256);\\n\\n    /// Get edition given the created ID\\n    /// @param editionId id of edition to get contract for\\n    /// @return SingleEditionMintable Edition NFT contract\\n    function getEditionAtId(uint256 editionId) external view returns (IEditionSingleMintable);\\n}\\n\"\n    },\n    \"src/editions/MetaEditionMinter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\nimport { BaseRelayRecipient } from \\\"../utils/BaseRelayRecipient.sol\\\";\\n\\nimport { IEditionMinter } from \\\"./interfaces/IEditionMinter.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ncontract MetaEditionMinter is BaseRelayRecipient, IEditionMinter, Initializable {\\n    event Destroyed(MetaEditionMinter minter, IEditionSingleMintable collection);\\n\\n    error NullAddress();\\n    error AlreadyMinted(IEditionSingleMintable collection, address operator);\\n    error TimeLimitReached(IEditionSingleMintable collection);\\n    error TimeLimitNotReached(IEditionSingleMintable collection);\\n\\n    /// @dev these would be immutable if they were not set in the initializer\\n    IEditionSingleMintable public collection;\\n    TimeCop public timeCop;\\n\\n    mapping(address => bool) public minted;\\n\\n    /// @dev deploy the initial implementation via constructor and lock the contract, preventing calls to initialize()\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _trustedForwarder,\\n        IEditionSingleMintable _collection,\\n        TimeCop _timeCop\\n    ) external initializer {\\n        if (address(_collection) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        if (address(_timeCop) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        // we accept the null address for the trusted forwarder (meta-tx disabled)\\n        trustedForwarder = _trustedForwarder;\\n        collection = _collection;\\n        timeCop = _timeCop;\\n    }\\n\\n    function mintEdition(address _to) external override {\\n        if (timeCop.timeLimitReached(address(collection))) {\\n            revert TimeLimitReached(collection);\\n        }\\n\\n        address operator = _msgSender();\\n        recordMint(operator);\\n        if (operator != _to) {\\n            recordMint(_to);\\n        }\\n\\n        collection.mintEdition(_to);\\n    }\\n\\n    function recordMint(address minter) internal {\\n        if (minted[minter]) {\\n            revert AlreadyMinted(collection, minter);\\n        }\\n\\n        minted[minter] = true;\\n    }\\n\\n    /// @notice deletes the record of who minted for that collection if we are past the claim window\\n    /// @notice no-op if there was no time limit set or it has not expired yet\\n    function purge() external {\\n        // collection is not set in the implementation contract\\n        if (address(collection) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        bool expired = timeCop.timeLimitReached(address(collection));\\n        if (!expired) {\\n            revert TimeLimitNotReached(collection);\\n        }\\n\\n        emit Destroyed(this, collection);\\n\\n        selfdestruct(payable(collection.owner()));\\n    }\\n}\\n\"\n    },\n    \"src/editions/MetaEditionMinterFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { ClonesUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\nimport { MetaEditionMinter } from \\\"./MetaEditionMinter.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ncontract MetaEditionMinterFactory {\\n    error NullAddress();\\n\\n    address public immutable trustedForwarder;\\n    MetaEditionMinter public immutable minterImpl;\\n    TimeCop public immutable timeCop;\\n\\n    constructor (address _trustedForwarder, address _timeCop) {\\n        if (_timeCop == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        /// @dev we accept the null address for the trusted forwarder (meta-tx disabled)\\n        trustedForwarder = _trustedForwarder;\\n        timeCop = TimeCop(_timeCop);\\n\\n        /// @dev this deploys and locks down the base implementation, which we will later deploy proxies to\\n        minterImpl = new MetaEditionMinter();\\n    }\\n\\n    /// returns an initialized minimal proxy to the base MetaEditionMinter implementation\\n    function createMinter(IEditionSingleMintable _edition) public returns (MetaEditionMinter newMinter) {\\n        // deploy the minter for this edition\\n        newMinter = MetaEditionMinter(\\n            ClonesUpgradeable.cloneDeterministic(\\n                address(minterImpl),\\n                bytes32(uint256(uint160(address(_edition))))\\n            )\\n        );\\n\\n        newMinter.initialize(trustedForwarder, _edition, timeCop);\\n    }\\n\\n    function getMinterForEdition(address edition) public view returns (address) {\\n        return ClonesUpgradeable.predictDeterministicAddress(\\n            address(minterImpl),\\n            bytes32(uint256(uint160(edition)))\\n        );\\n    }\\n}\"\n    },\n    \"src/editions/TimeCop.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TimeCop {\\n    event TimeLimitSet(address collection, uint256 deadline);\\n\\n    error InvalidTimeLimit(uint256 offsetSeconds);\\n    error NotCollectionOwner();\\n    error TimeLimitAlreadySet();\\n\\n    uint256 public immutable MAX_DURATION_SECONDS;\\n\\n    /// @notice the time limits expressed as a timestamp in seconds\\n    mapping(address => uint256) public timeLimits;\\n\\n    /// @param _maxDurationSeconds maximum time limit\\n    /// @dev _maxDurationSeconds can be set to 0 to have no maximum time limit\\n    constructor(uint256 _maxDurationSeconds) {\\n        MAX_DURATION_SECONDS = _maxDurationSeconds;\\n    }\\n\\n    /// @notice Sets the deadline for the given collection\\n    /// @notice Only the owner of the collection can set the deadline\\n    /// @param collection The address to set the deadline for\\n    /// @param offsetSeconds a duration in seconds that will be used to set the time limit\\n    function setTimeLimit(address collection, uint256 offsetSeconds) external {\\n        if (offsetSeconds == 0) {\\n            revert InvalidTimeLimit(offsetSeconds);\\n        }\\n\\n        if (MAX_DURATION_SECONDS > 0 && offsetSeconds > MAX_DURATION_SECONDS) {\\n            revert InvalidTimeLimit(offsetSeconds);\\n        }\\n\\n        if (timeLimitSet(collection)) {\\n            revert TimeLimitAlreadySet();\\n        }\\n\\n        if (msg.sender != Ownable(collection).owner()) {\\n            revert NotCollectionOwner();\\n        }\\n\\n        uint256 deadline = block.timestamp + offsetSeconds;\\n        timeLimits[collection] = deadline;\\n\\n        emit TimeLimitSet(collection, deadline);\\n    }\\n\\n    function timeLimitSet(address collection) public view returns (bool) {\\n        return timeLimits[collection] > 0;\\n    }\\n\\n    /// @return false if there is no time limit set for that collection\\n    function timeLimitReached(address collection) public view returns (bool) {\\n        return timeLimitSet(collection) && block.timestamp > timeLimits[collection];\\n    }\\n}\"\n    },\n    \"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n  function mintEditions(address[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\n    },\n    \"src/utils/BaseRelayRecipient.sol\": {\n      \"content\": \"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    /*\\n     * require a function to be called through GSN only\\n     */\\n    modifier trustedForwarderOnly() {\\n        require(msg.sender == address(trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n        _;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal view virtual returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n}\\n\"\n    },\n    \"src/editions/interfaces/IEditionMinter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IEditionMinter {\\n    function mintEdition(address _to) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\n    },\n    \"src/editions/MetaSingleEditionMintableCreator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\nimport { BaseRelayRecipient } from \\\"src/utils/BaseRelayRecipient.sol\\\";\\nimport { MetaEditionMinter } from \\\"./MetaEditionMinter.sol\\\";\\nimport { MetaEditionMinterFactory } from \\\"./MetaEditionMinterFactory.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ninterface ISingleEditionMintableCreator {\\n    /// @return The ID of the created edition\\n    function createEdition(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS\\n    ) external returns (uint256);\\n\\n    /// Get edition given the created ID\\n    /// @param editionId id of edition to get contract for\\n    /// @return SingleEditionMintable Edition NFT contract\\n    function getEditionAtId(uint256 editionId) external view returns (IEditionSingleMintable);\\n}\\n\\ninterface _IEditionSingleMintable {\\n    function transferOwnership(address newOwner) external;\\n    function setApprovedMinter(address minter, bool allowed) external;\\n}\\n\\ncontract MetaSingleEditionMintableCreator is BaseRelayRecipient {\\n    error NullAddress();\\n\\n    ISingleEditionMintableCreator public immutable editionCreator;\\n    MetaEditionMinterFactory public immutable minterFactory;\\n    TimeCop public immutable timeCop;\\n\\n    constructor(\\n        address _trustedForwarder,\\n        address _editionCreator,\\n        address _minterFactory,\\n        address _timeCop\\n    ) {\\n        if (_editionCreator == address(0)\\n            || _minterFactory == address(0)\\n            || _timeCop == address(0))\\n        {\\n            revert NullAddress();\\n        }\\n        editionCreator = ISingleEditionMintableCreator(_editionCreator);\\n        minterFactory = MetaEditionMinterFactory(_minterFactory);\\n        timeCop = TimeCop(_timeCop);\\n\\n        trustedForwarder = _trustedForwarder;\\n    }\\n\\n    /// Creates a new edition contract as a factory with a deterministic address\\n    /// Important: None of these fields (except the Url fields with the same hash) can be changed after calling\\n    /// @param _name Name of the edition contract\\n    /// @param _symbol Symbol of the edition contract\\n    /// @param _description Metadata: Description of the edition entry\\n    /// @param _animationUrl Metadata: Animation url (optional) of the edition entry\\n    /// @param _animationHash Metadata: SHA-256 Hash of the animation (if no animation url, can be 0x0)\\n    /// @param _imageUrl Metadata: Image url (semi-required) of the edition entry\\n    /// @param _imageHash Metadata: SHA-256 hash of the Image of the edition entry (if not image, can be 0x0)\\n    /// @param _editionSize Total size of the edition (number of possible editions)\\n    /// @param _royaltyBPS BPS amount of royalty\\n    /// @param _claimWindowDurationSeconds How long after deployment the edition can be claimed, in seconds\\n    /// @return (edition, newMinter) the address of the created edition and the minter contract for that edition\\n    function createEdition(\\n        // ISingleEditionMintableCreator parameters\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS,\\n        // additional parameters\\n        uint256 _claimWindowDurationSeconds\\n    ) external returns (address, address) {\\n        // deploy the new contract\\n        uint256 newId = editionCreator.createEdition(\\n            _name,\\n            _symbol,\\n            _description,\\n            _animationUrl,\\n            _animationHash,\\n            _imageUrl,\\n            _imageHash,\\n            _editionSize,\\n            _royaltyBPS\\n        );\\n\\n        // deploy the edition\\n        IEditionSingleMintable edition = editionCreator.getEditionAtId(newId);\\n\\n        // deploy the minter for this edition\\n        MetaEditionMinter newMinter = minterFactory.createMinter(edition);\\n\\n        // configure the time limit\\n        timeCop.setTimeLimit(address(edition), _claimWindowDurationSeconds);\\n\\n        // configure the edition (while we still own it)\\n        _IEditionSingleMintable(address(edition)).setApprovedMinter(address(newMinter), true);\\n\\n        // and finally transfer ownership of the configured contract to the actual creator\\n        _IEditionSingleMintable(address(edition)).transferOwnership(_msgSender());\\n\\n        return (address(edition), address(newMinter));\\n    }\\n\\n    function getEditionAtId(uint256 editionId) external view returns (IEditionSingleMintable) {\\n        return editionCreator.getEditionAtId(editionId);\\n    }\\n}\\n\"\n    },\n    \"src/ShowtimeV1Market.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport { IERC2981 } from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { Ownable, Context } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { BaseRelayRecipient } from \\\"./utils/BaseRelayRecipient.sol\\\";\\n\\ninterface ShowtimeERC1155 is IERC1155, IERC2981 {}\\n\\n//////////////////////////////////////////////\\n//                                          //\\n//                    ▄▄                    //\\n//                   ▄██▄                   //\\n//                  ▄████▄                  //\\n//                ▄████████▄                //\\n//              ▄████████████▄              //\\n//            ▄████████████████▄            //\\n//        ▄████████████████████████▄        //\\n//   ▄██████████████████████████████████▄   //\\n//   ▀██████████████████████████████████▀   //\\n//       ████████████████████████████       //\\n//           ████████████████████           //\\n//              ██████████████              //\\n//                ██████████                //\\n//                 ████████                 //\\n//                  ██████                  //\\n//                   ████                   //\\n//                    ██                    //\\n//                                          //\\n//////////////////////////////////////////////\\n\\n/// @title Showtime V1 Market for the Showtime ERC1155 Token\\n///\\n/// This is a non-escrow marketplace that allows users to list Showtime NFTs for sale\\n/// for a fixed price, using a configurable list of allowed ERC20 currencies.\\n///\\n/// @dev listings have no expiration date, but frontends may choose to hide old listings\\n///\\n/// Built with feedback from the community! ♥️ Big thanks to:\\n///     aaronsebesta chejazi chiuzon garythung mariobyn_eth MarkBeylin sina_eth_\\n///     StErMi theramblingboy timidan_x transmissions11 William94029369\\ncontract ShowtimeV1Market is Ownable, Pausable, BaseRelayRecipient {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    /// the address of the ShowtimeMT NFT (ERC1155) contract\\n    ShowtimeERC1155 public immutable nft;\\n\\n    /// @dev listings only contain a tokenId because we are implicitly only listing tokens from the ShowtimeMT contract\\n    struct Listing {\\n        uint256 tokenId;\\n        uint256 quantity;\\n        uint256 price;\\n        IERC20 currency;\\n        address seller;\\n    }\\n\\n    /// ============ Mutable storage ============\\n\\n    /// royalties payments can be turned on/off by the owner of the contract\\n    bool public royaltiesEnabled = true;\\n\\n    /// the configurable cap on royalties, enforced during the sale (50% by default)\\n    uint256 public maxRoyaltiesBasisPoints = 50_00;\\n\\n    /// the configurable list of accepted ERC20 contract addresses\\n    mapping(address => bool) public acceptedCurrencies;\\n\\n    /// maps a listing id to the corresponding Listing\\n    mapping(uint256 => Listing) public listings;\\n\\n    /// a simple counter to assign ids to new listings\\n    uint256 listingCounter;\\n\\n    /// ============ Events ============\\n\\n    /// marketplace and listing related events\\n    event ListingCreated(uint256 indexed listingId, address indexed seller, uint256 indexed tokenId);\\n    event ListingDeleted(uint256 indexed listingId, address indexed seller);\\n    event RoyaltyPaid(address indexed receiver, IERC20 currency, uint256 amount);\\n    event SaleCompleted(\\n        uint256 indexed listingId,\\n        address indexed seller,\\n        address indexed buyer,\\n        address receiver,\\n        uint256 quantity\\n    );\\n\\n    /// admin events\\n    event AcceptedCurrencyChanged(address indexed account, address currency, bool accepted);\\n    event RoyaltiesEnabledChanged(address indexed account, bool royaltiesEnabled);\\n    event MaxRoyaltiesUpdated(address indexed account, uint256 maxRoyaltiesBasisPoints);\\n\\n    /// ============ Custom Errors ============\\n\\n    error ListingDoesNotExist(uint256 listingId);\\n    error NotListingSeller(uint256 listingId);\\n    error NotContractAddress(address addr);\\n    error CurrencyNotAccepted(address currency);\\n    error SellerDoesNotOwnToken(uint256 tokenId, uint256 quantity);\\n    error NullAddress();\\n    error NullQuantity();\\n    error TokenIdMismatch(uint256 listedTokenId);\\n    error PriceMismatch(uint256 listedPrice);\\n    error CurrencyMismatch(address listedCurrency);\\n    error CanNotSellToSelf();\\n    error AvailableQuantityInsuficient(uint256 availableQuantity);\\n    error RoyaltiesTooHigh(uint256 royaltyAmount, uint256 totalPrice);\\n    error InvalidMaxRoyalties();\\n\\n    /// ============ Modifiers ============\\n\\n    modifier onlySeller(uint256 _id) {\\n        if (listings[_id].seller != _msgSender()) revert NotListingSeller(_id);\\n        _;\\n    }\\n\\n    modifier listingExists(uint256 _id) {\\n        if (listings[_id].seller == address(0)) revert ListingDoesNotExist(_id);\\n        _;\\n    }\\n\\n    /// ============ Constructor ============\\n\\n    constructor(\\n        address _nft,\\n        address _trustedForwarder,\\n        address[] memory _initialCurrencies\\n    ) {\\n        /// initialize the address of the NFT contract\\n        if (!_nft.isContract()) revert NotContractAddress(_nft);\\n        nft = ShowtimeERC1155(_nft);\\n\\n        for (uint256 i = 0; i < _initialCurrencies.length; i++) {\\n            address currency = _initialCurrencies[i];\\n            if (!currency.isContract()) revert NotContractAddress(currency);\\n            acceptedCurrencies[currency] = true;\\n        }\\n\\n        /// set the trustedForwarder only once, see BaseRelayRecipient\\n        if (_trustedForwarder == address(0)) revert NullAddress();\\n        trustedForwarder = _trustedForwarder;\\n    }\\n\\n    /// ============ Marketplace functions ============\\n\\n    /// @notice `setApprovalForAll` before calling\\n    /// @notice creates a new Listing\\n    /// @param _quantity the number of tokens to be listed\\n    /// @param _price the price per token\\n    function createSale(\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        uint256 _price,\\n        address _currency\\n    ) external whenNotPaused returns (uint256 listingId) {\\n        address seller = _msgSender();\\n\\n        if (!acceptedCurrencies[_currency]) revert CurrencyNotAccepted(_currency);\\n        if (_quantity == 0) revert NullQuantity();\\n        if (nft.balanceOf(seller, _tokenId) < _quantity) revert SellerDoesNotOwnToken(_tokenId, _quantity);\\n\\n        Listing memory listing = Listing({\\n            tokenId: _tokenId,\\n            quantity: _quantity,\\n            price: _price,\\n            currency: IERC20(_currency),\\n            seller: seller\\n        });\\n\\n        listingId = listingCounter;\\n        listings[listingId] = listing;\\n\\n        // no need to check for overflows here\\n        unchecked {\\n            listingCounter++;\\n        }\\n\\n        emit ListingCreated(listingId, seller, _tokenId);\\n    }\\n\\n    /// @notice cancel an active sale\\n    function cancelSale(uint256 _listingId) external listingExists(_listingId) onlySeller(_listingId) {\\n        delete listings[_listingId];\\n\\n        emit ListingDeleted(_listingId, _msgSender());\\n    }\\n\\n    /// @notice the seller may own fewer NFTs than the listed quantity\\n    function availableForSale(uint256 _listingId) public view listingExists(_listingId) returns (uint256) {\\n        Listing memory listing = listings[_listingId];\\n        return Math.min(nft.balanceOf(listing.seller, listing.tokenId), listing.quantity);\\n    }\\n\\n    /// @notice Complete a sale\\n    /// @param _quantity the number of tokens to purchase\\n    /// @param _receiver the address that will receive the NFTs\\n    /// @dev we let the transaction complete even if the currency is no longer accepted in order to avoid stuck listings\\n    function buy(\\n        uint256 _listingId,\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        uint256 _price,\\n        address _currency,\\n        address _receiver\\n    ) external listingExists(_listingId) whenNotPaused {\\n        /// 1. Checks\\n        if (_quantity == 0) revert NullQuantity();\\n        if (_receiver == address(0)) revert NullAddress();\\n\\n        Listing memory listing = listings[_listingId];\\n\\n        // to prevent issues with block reorgs, we need to make sure that the expectations of the buyer (tokenId,\\n        // price and currency) match with the listing\\n        if (listing.tokenId != _tokenId) revert TokenIdMismatch(listing.tokenId);\\n        if (listing.price != _price) revert PriceMismatch(listing.price);\\n        if (address(listing.currency) != _currency) revert CurrencyMismatch(address(listing.currency));\\n\\n        // disable buying something from the seller for the seller\\n        // note that the seller can still buy from themselves as a gift for someone else\\n        // the difference with a transfer is that this will result in royalties being paid out\\n        if (_receiver == listing.seller) revert CanNotSellToSelf();\\n\\n        uint256 availableQuantity = availableForSale(_listingId);\\n        if (_quantity > availableQuantity) revert AvailableQuantityInsuficient(availableQuantity);\\n\\n        uint256 totalPrice = listing.price * _quantity;\\n        (address royaltyReceiver, uint256 royaltyAmount) = getRoyalties(listing.tokenId, totalPrice);\\n        if (royaltyAmount > totalPrice) revert RoyaltiesTooHigh(royaltyAmount, totalPrice);\\n\\n        /// 2. Effects\\n        updateListing(_listingId, availableQuantity - _quantity);\\n\\n        emit SaleCompleted(_listingId, listing.seller, _msgSender(), _receiver, _quantity);\\n\\n        /// 3. Interactions\\n        // transfer royalties\\n        if (royaltyAmount > 0) {\\n            emit RoyaltyPaid(royaltyReceiver, listing.currency, royaltyAmount);\\n            listing.currency.safeTransferFrom(_msgSender(), royaltyReceiver, royaltyAmount);\\n        }\\n\\n        // the royalty amount is deducted from the price paid by the buyer\\n        listing.currency.safeTransferFrom(_msgSender(), listing.seller, totalPrice - royaltyAmount);\\n\\n        // transfer the NFTs from the seller to the buyer\\n        nft.safeTransferFrom(listing.seller, _receiver, listing.tokenId, _quantity, \\\"\\\");\\n    }\\n\\n    /// ============ Utility functions ============\\n\\n    /// @notice update the listing with the remaining quantity, or delete it if newQuantity is zero\\n    function updateListing(uint256 listingId, uint256 newQuantity) private {\\n        if (newQuantity == 0) {\\n            address seller = listings[listingId].seller;\\n            delete listings[listingId];\\n            emit ListingDeleted(listingId, seller);\\n        } else {\\n            listings[listingId].quantity = newQuantity;\\n        }\\n    }\\n\\n    function getRoyalties(uint256 tokenId, uint256 price)\\n        private\\n        view\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (!royaltiesEnabled) {\\n            return (address(0), 0);\\n        }\\n\\n        (receiver, royaltyAmount) = nft.royaltyInfo(tokenId, price);\\n\\n        // we ignore royalties to address 0, otherwise the transfer would fail\\n        // and it would result in NFTs that are impossible to sell\\n        if (receiver == address(0) || royaltyAmount == 0) {\\n            return (address(0), 0);\\n        }\\n\\n        royaltyAmount = capRoyalties(price, royaltyAmount);\\n    }\\n\\n    function capRoyalties(uint256 salePrice, uint256 royaltyAmount) private view returns (uint256) {\\n        uint256 maxRoyaltiesAmount = (salePrice * maxRoyaltiesBasisPoints) / 100_00;\\n        return Math.min(maxRoyaltiesAmount, royaltyAmount);\\n    }\\n\\n    function _msgSender() internal view override(Context, BaseRelayRecipient) returns (address) {\\n        return BaseRelayRecipient._msgSender();\\n    }\\n\\n    /// ============ Admin functions ============\\n\\n    /// @notice switch royalty payments on/off\\n    function setRoyaltiesEnabled(bool newValue) external onlyOwner {\\n        royaltiesEnabled = newValue;\\n\\n        emit RoyaltiesEnabledChanged(_msgSender(), royaltiesEnabled);\\n    }\\n\\n    /// @notice sets the maximum royalties that will be paid during sales, in basis points\\n    /// ex: if a token requests 75% royalties but maxRoyaltiesBasisPoints is set to 60_00 (= 60%),\\n    ///    then 60% will be paid out instead of the 75% requested\\n    function setMaxRoyalties(uint256 newValue) external onlyOwner {\\n        if (newValue > 100_00) revert InvalidMaxRoyalties();\\n        maxRoyaltiesBasisPoints = newValue;\\n\\n        emit MaxRoyaltiesUpdated(_msgSender(), maxRoyaltiesBasisPoints);\\n    }\\n\\n    /// @notice add a currency to the accepted currency list\\n    function setAcceptedCurrency(address currency, bool accepted) external onlyOwner {\\n        if (accepted && !currency.isContract()) revert NotContractAddress(currency);\\n        acceptedCurrencies[currency] = accepted;\\n\\n        emit AcceptedCurrencyChanged(_msgSender(), currency, accepted);\\n    }\\n\\n    /// @notice pause the contract\\n    function pause() external whenNotPaused onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice unpause the contract\\n    function unpause() external whenPaused onlyOwner {\\n        _unpause();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\n    },\n    \"src/ShowtimeVerifier.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { EIP712, ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\nimport { IShowtimeVerifier, Attestation, SignedAttestation } from \\\"./interfaces/IShowtimeVerifier.sol\\\";\\n\\ncontract ShowtimeVerifier is Ownable, EIP712, IShowtimeVerifier {\\n    /*//////////////////////////////////////////////////////////////\\n                                CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n    bytes public constant requestType =\\n        \\\"Attestation(address beneficiary,address context,uint256 nonce,uint256 validUntil)\\\";\\n\\n    bytes32 public constant REQUEST_TYPE_HASH = keccak256(requestType);\\n\\n    uint256 public constant MAX_ATTESTATION_VALIDITY_SECONDS = 5 * 60;\\n\\n    uint256 public constant MAX_SIGNER_VALIDITY_DAYS = 365;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MUTABLE STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public signerValidity;\\n\\n    /// maps addresses to their nonces\\n    mapping(address => uint256) public nonces;\\n\\n    address public manager;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MISE EN BOUCHE\\n    //////////////////////////////////////////////////////////////*/\\n    constructor(address _owner) EIP712(\\\"showtime.xyz\\\", \\\"v1\\\") Ownable() {\\n        transferOwnership(_owner);\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != owner() && msg.sender != manager) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    function domainSeparator() public view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            VERIFICATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function encode(Attestation memory attestation) public pure returns (bytes memory) {\\n        return abi.encode(attestation.beneficiary, attestation.context, attestation.nonce, attestation.validUntil);\\n    }\\n\\n    /// @notice Verifies the given attestation\\n    /// @notice This method does not increment the nonce so it provides no replay safety\\n    /// @param signedAttestation the attestation to verify along with a corresponding signature\\n    /// @return true if the attestation is valid, reverts otherwise\\n    function verify(SignedAttestation calldata signedAttestation) public view override returns (bool) {\\n        // what we want is EIP712 encoding, not ABI encoding\\n        return\\n            verify(\\n                signedAttestation.attestation,\\n                REQUEST_TYPE_HASH,\\n                encode(signedAttestation.attestation),\\n                signedAttestation.signature\\n            );\\n    }\\n\\n    /// @notice Verifies arbitrary typed data\\n    /// @notice This method does not increment the nonce so it provides no replay safety\\n    /// @dev see https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct\\n    /// @notice The attestation SHOULD be part of the encodedData (i.e. a change in the attestation should change the signature)\\n    /// @param attestation the attestation to verify\\n    /// @param typeHash the EIP712 type hash for the struct data to be verified\\n    /// @param encodedData the EIP712-encoded struct data to be verified (32 bytes long members, hashed dynamic types)\\n    /// @param signature the signature of the hashed struct\\n    /// @return true if the signature is valid, reverts otherwise\\n    function verify(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) public view override returns (bool) {\\n        /// TIMESTAMP VERIFICATION\\n        uint256 validUntil = attestation.validUntil;\\n        if (block.timestamp > validUntil) {\\n            revert Expired();\\n        }\\n\\n        if ((validUntil - block.timestamp) > MAX_ATTESTATION_VALIDITY_SECONDS) {\\n            revert DeadlineTooLong();\\n        }\\n\\n        /// NONCE VERIFICATION\\n        uint256 expectedNonce = nonces[attestation.beneficiary];\\n        if (expectedNonce != attestation.nonce) {\\n            revert BadNonce(expectedNonce, attestation.nonce);\\n        }\\n\\n        /// SIGNER VERIFICATION\\n        bytes32 structHash = keccak256(abi.encodePacked(typeHash, encodedData));\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n        address signer = ECDSA.recover(digest, signature);\\n        uint256 signerExpirationTimestamp = signerValidity[signer];\\n        if (signerExpirationTimestamp == 0) {\\n            revert UnknownSigner();\\n        }\\n\\n        if (block.timestamp > signerExpirationTimestamp) {\\n            revert SignerExpired(signer);\\n        }\\n\\n        return true;\\n    }\\n\\n    function incrementNonce(address beneficiary) private {\\n        unchecked {\\n            ++nonces[beneficiary];\\n        }\\n    }\\n\\n    function verifyAndBurn(SignedAttestation calldata signedAttestation) external override returns (bool) {\\n        if (!verify(signedAttestation)) {\\n            return false;\\n        }\\n\\n        incrementNonce(signedAttestation.attestation.beneficiary);\\n        return true;\\n    }\\n\\n    function verifyAndBurn(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external override returns (bool) {\\n        if (!verify(attestation, typeHash, encodedData, signature)) {\\n            return false;\\n        }\\n\\n        incrementNonce(attestation.beneficiary);\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        SIGNER MANAGEMENT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// Delegates the signer management to another address\\n    /// @param _manager the address that will be authorized to add and remove signers (use address 0 to disable)\\n    function setManager(address _manager) external override onlyOwner {\\n        manager = _manager;\\n\\n        emit ManagerUpdated(manager);\\n    }\\n\\n    function _registerSigner(address signer, uint256 validityDays) private returns (uint256 validUntil) {\\n        if (validityDays > MAX_SIGNER_VALIDITY_DAYS) {\\n            revert DeadlineTooLong();\\n        }\\n\\n        validUntil = block.timestamp + validityDays * 24 * 60 * 60;\\n        signerValidity[signer] = validUntil;\\n\\n        emit SignerAdded(signer, validUntil);\\n    }\\n\\n    /// Registers an authorized signer\\n    /// @param signer the new signer to register\\n    /// @param validityDays how long the signer will be valid starting from the moment of registration\\n    /// @return validUntil the timestamp in seconds after which the signer expires\\n    function registerSigner(address signer, uint256 validityDays)\\n        external\\n        override\\n        onlyAdmin\\n        returns (uint256 validUntil)\\n    {\\n        validUntil = _registerSigner(signer, validityDays);\\n    }\\n\\n    function _revokeSigner(address signer) private {\\n        signerValidity[signer] = 0;\\n        emit SignerRevoked(signer);\\n    }\\n\\n    /// Remove an authorized signer\\n    function revokeSigner(address signer) external override onlyAdmin {\\n        _revokeSigner(signer);\\n    }\\n\\n    /// @notice Convenience function for the workflow where one expects a single active signer\\n    function registerAndRevoke(\\n        address signerToRegister,\\n        address signerToRevoke,\\n        uint256 validityDays\\n    ) external override onlyAdmin returns (uint256 validUntil) {\\n        _revokeSigner(signerToRevoke);\\n        return _registerSigner(signerToRegister, validityDays);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"src/editions/GatedEditionMinter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\nimport { IShowtimeVerifier, SignedAttestation } from \\\"src/interfaces/IShowtimeVerifier.sol\\\";\\nimport { IGatedEditionMinter } from \\\"./interfaces/IGatedEditionMinter.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ncontract GatedEditionMinter is IGatedEditionMinter {\\n    error NullAddress();\\n    error TimeLimitReached(IEditionSingleMintable collection);\\n    error VerificationFailed();\\n\\n    IShowtimeVerifier public immutable override showtimeVerifier;\\n    TimeCop public immutable timeCop;\\n\\n    constructor(IShowtimeVerifier _showtimeVerifier, TimeCop _timeCop) {\\n        if (address(_showtimeVerifier) == address(0) || address(_timeCop) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        showtimeVerifier = _showtimeVerifier;\\n        timeCop = _timeCop;\\n    }\\n\\n    /// @param signedAttestation the attestation to verify along with a corresponding signature\\n    /// @dev the edition to mint will be determined by the attestation's context\\n    /// @dev the recipient of the minted edition will be determined by the attestation's beneficiary\\n    function mintEdition(SignedAttestation calldata signedAttestation) public override {\\n        IEditionSingleMintable collection = IEditionSingleMintable(signedAttestation.attestation.context);\\n\\n        if (timeCop.timeLimitReached(address(collection))) {\\n            revert TimeLimitReached(collection);\\n        }\\n\\n        if (!showtimeVerifier.verifyAndBurn(signedAttestation)) {\\n            revert VerificationFailed();\\n        }\\n\\n        collection.mintEdition(signedAttestation.attestation.beneficiary);\\n    }\\n\\n    /// @notice a batch version of mintEdition\\n    /// @notice any failed call to mintEdition will revert the entire batch\\n    function mintEditions(SignedAttestation[] calldata signedAttestations) external override {\\n        uint256 length = signedAttestations.length;\\n        for (uint256 i = 0; i < length; ) {\\n            mintEdition(signedAttestations[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"lib/gsn/packages/contracts/src/forwarder/Forwarder.sol\": {\n      \"content\": \"// solhint-disable not-rely-on-time\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"./IForwarder.sol\\\";\\n\\n/**\\n * @title The Forwarder Implementation\\n * @notice This implementation of the `IForwarder` interface uses ERC-712 signatures and stored nonces for verification.\\n */\\ncontract Forwarder is IForwarder, ERC165 {\\n    using ECDSA for bytes32;\\n\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTime\\\";\\n\\n    string public constant EIP712_DOMAIN_TYPE = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n\\n    mapping(bytes32 => bool) public typeHashes;\\n    mapping(bytes32 => bool) public domains;\\n\\n    // Nonces of senders, used to prevent replay attacks\\n    mapping(address => uint256) private nonces;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    /// @inheritdoc IForwarder\\n    function getNonce(address from)\\n    public view override\\n    returns (uint256) {\\n        return nonces[from];\\n    }\\n\\n    constructor() {\\n        string memory requestType = string(abi.encodePacked(\\\"ForwardRequest(\\\", GENERIC_PARAMS, \\\")\\\"));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IForwarder).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IForwarder\\n    function verify(\\n        ForwardRequest calldata req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig)\\n    external override view {\\n        _verifyNonce(req);\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n    }\\n\\n    /// @inheritdoc IForwarder\\n    function execute(\\n        ForwardRequest calldata req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig\\n    )\\n    external payable\\n    override\\n    returns (bool success, bytes memory ret) {\\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\\n        _verifyAndUpdateNonce(req);\\n\\n        require(req.validUntilTime == 0 || req.validUntilTime > block.timestamp, \\\"FWD: request expired\\\");\\n\\n        uint256 gasForTransfer = 0;\\n        if ( req.value != 0 ) {\\n            gasForTransfer = 40000; //buffer in case we need to move eth after the transaction.\\n        }\\n        bytes memory callData = abi.encodePacked(req.data, req.from);\\n        require(gasleft()*63/64 >= req.gas + gasForTransfer, \\\"FWD: insufficient gas\\\");\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (success,ret) = req.to.call{gas : req.gas, value : req.value}(callData);\\n        if ( req.value != 0 && address(this).balance>0 ) {\\n            // can't fail: req.from signed (off-chain) the request, so it must be an EOA...\\n            payable(req.from).transfer(address(this).balance);\\n        }\\n\\n        return (success,ret);\\n    }\\n\\n    function _verifyNonce(ForwardRequest calldata req) internal view {\\n        require(nonces[req.from] == req.nonce, \\\"FWD: nonce mismatch\\\");\\n    }\\n\\n    function _verifyAndUpdateNonce(ForwardRequest calldata req) internal {\\n        require(nonces[req.from]++ == req.nonce, \\\"FWD: nonce mismatch\\\");\\n    }\\n\\n    /// @inheritdoc IForwarder\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external override {\\n\\n        for (uint256 i = 0; i < bytes(typeName).length; i++) {\\n            bytes1 c = bytes(typeName)[i];\\n            require(c != \\\"(\\\" && c != \\\")\\\", \\\"FWD: invalid typename\\\");\\n        }\\n\\n        string memory requestType = string(abi.encodePacked(typeName, \\\"(\\\", GENERIC_PARAMS, \\\",\\\", typeSuffix));\\n        registerRequestTypeInternal(requestType);\\n    }\\n\\n    /// @inheritdoc IForwarder\\n    function registerDomainSeparator(string calldata name, string calldata version) external override {\\n        uint256 chainId;\\n        /* solhint-disable-next-line no-inline-assembly */\\n        assembly { chainId := chainid() }\\n\\n        bytes memory domainValue = abi.encode(\\n            keccak256(bytes(EIP712_DOMAIN_TYPE)),\\n            keccak256(bytes(name)),\\n            keccak256(bytes(version)),\\n            chainId,\\n            address(this));\\n\\n        bytes32 domainHash = keccak256(domainValue);\\n\\n        domains[domainHash] = true;\\n        emit DomainRegistered(domainHash, domainValue);\\n    }\\n\\n    function registerRequestTypeInternal(string memory requestType) internal {\\n\\n        bytes32 requestTypehash = keccak256(bytes(requestType));\\n        typeHashes[requestTypehash] = true;\\n        emit RequestTypeRegistered(requestTypehash, requestType);\\n    }\\n\\n    function _verifySig(\\n        ForwardRequest calldata req,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata sig)\\n    internal\\n    virtual\\n    view\\n    {\\n        require(domains[domainSeparator], \\\"FWD: unregistered domain sep.\\\");\\n        require(typeHashes[requestTypeHash], \\\"FWD: unregistered typehash\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", domainSeparator,\\n                keccak256(_getEncoded(req, requestTypeHash, suffixData))\\n            ));\\n        require(digest.recover(sig) == req.from, \\\"FWD: signature mismatch\\\");\\n    }\\n\\n    /**\\n     * @notice Creates a byte array that is a valid ABI encoding of a request of a `RequestType` type. See `execute()`.\\n     */\\n    function _getEncoded(\\n        ForwardRequest calldata req,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData\\n    )\\n    public\\n    pure\\n    returns (\\n        bytes memory\\n    ) {\\n        // we use encodePacked since we append suffixData as-is, not as dynamic param.\\n        // still, we must make sure all first params are encoded as abi.encode()\\n        // would encode them - as 256-bit-wide params.\\n        return abi.encodePacked(\\n            requestTypeHash,\\n            uint256(uint160(req.from)),\\n            uint256(uint160(req.to)),\\n            req.value,\\n            req.gas,\\n            req.nonce,\\n            keccak256(req.data),\\n            req.validUntilTime,\\n            suffixData\\n        );\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"lib/gsn/packages/contracts/src/forwarder/IForwarder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title The Forwarder Interface\\n * @notice The contracts implementing this interface take a role of authorization, authentication and replay protection\\n * for contracts that choose to trust a `Forwarder`, instead of relying on a mechanism built into the Ethereum protocol.\\n *\\n * @notice if the `Forwarder` contract decides that an incoming `ForwardRequest` is valid, it must append 20 bytes that\\n * represent the caller to the `data` field of the request and send this new data to the target address (the `to` field)\\n *\\n * :warning: **Warning** :warning: The Forwarder can have a full control over a `Recipient` contract.\\n * Any vulnerability in a `Forwarder` implementation can make all of its `Recipient` contracts susceptible!\\n * Recipient contracts should only trust forwarders that passed through security audit,\\n * otherwise they are susceptible to identity theft.\\n */\\ninterface IForwarder is IERC165 {\\n\\n    /**\\n     * @notice A representation of a request for a `Forwarder` to send `data` on behalf of a `from` to a target (`to`).\\n     */\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n        uint256 validUntilTime;\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n    /**\\n     * @param from The address of a sender.\\n     * @return The nonce for this address.\\n     */\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * @notice Verify the transaction is valid and can be executed.\\n     * Implementations must validate the signature and the nonce of the request are correct.\\n     * Does not revert and returns successfully if the input is valid.\\n     * Reverts if any validation has failed. For instance, if either signature or nonce are incorrect.\\n     * Reverts if `domainSeparator` or `requestTypeHash` are not registered as well.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * @notice Executes a transaction specified by the `ForwardRequest`.\\n     * The transaction is first verified and then executed.\\n     * The success flag and returned bytes array of the `CALL` are returned as-is.\\n     *\\n     * This method would revert only in case of a verification error.\\n     *\\n     * All the target errors are reported using the returned success flag and returned bytes array.\\n     *\\n     * @param forwardRequest All requested transaction parameters.\\n     * @param domainSeparator The domain used when signing this request.\\n     * @param requestTypeHash The request type used when signing this request.\\n     * @param suffixData The ABI-encoded extension data for the current `RequestType` used when signing this request.\\n     * @param signature The client signature to be validated.\\n     *\\n     * @return success The success flag of the underlying `CALL` to the target address.\\n     * @return ret The byte array returned by the underlying `CALL` to the target address.\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * @notice Register a new Request typehash.\\n     *\\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\\n     *\\n     * @param typeName The name of the request type.\\n     * @param typeSuffix Any extra data after the generic params. Must contain add at least one param.\\n     * The generic ForwardRequest type is always registered by the constructor.\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * @notice Register a new domain separator.\\n     *\\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\\n     *\\n     * @notice The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`.\\n     * The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address.\\n     * This method accepts the domain name and version to create and register the domain separator value.\\n     * @param name The domain's display name.\\n     * @param version The domain/protocol version.\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\n    },\n    \"src/ShowtimeMT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./utils/AccessProtected.sol\\\";\\nimport \\\"./utils/BaseRelayRecipient.sol\\\";\\nimport \\\"./ERC2981Royalties.sol\\\";\\n\\ncontract ShowtimeMT is ERC1155Burnable, ERC2981Royalties, AccessProtected, BaseRelayRecipient {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n    string public baseURI = \\\"https://gateway.pinata.cloud/ipfs/\\\";\\n    mapping(uint256 => string) private _hashes;\\n\\n    constructor() ERC1155(\\\"\\\") {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, IERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Mint + Issue Token\\n     *\\n     * @param recipient - Token will be issued to recipient\\n     * @param amount - amount of tokens to mint\\n     * @param hash - IPFS hash\\n     * @param data - additional data\\n     * @param royaltyRecipient - royalty receiver address\\n     * @param royaltyPercent - percentage of royalty\\n     */\\n    function issueToken(\\n        address recipient,\\n        uint256 amount,\\n        string memory hash,\\n        bytes memory data,\\n        address royaltyRecipient,\\n        uint256 royaltyPercent\\n    ) public onlyMinter returns (uint256) {\\n        _tokenIds.increment();\\n        uint256 newTokenId = _tokenIds.current();\\n        _hashes[newTokenId] = hash;\\n        _mint(recipient, newTokenId, amount, data);\\n        if (royaltyPercent > 0) {\\n            _setTokenRoyalty(newTokenId, royaltyRecipient, royaltyPercent);\\n        }\\n        return newTokenId;\\n    }\\n\\n    /**\\n     * Mint + Issue Token Batch\\n     *\\n     * @param recipient - Token will be issued to recipient\\n     * @param amounts - amounts of each token to mint\\n     * @param hashes - IPFS hashes\\n     * @param data - additional data\\n     * @param royaltyRecipients - royalty receiver addresses\\n     * @param royaltyPercents - percentages of royalty\\n     */\\n    function issueTokenBatch(\\n        address recipient,\\n        uint256[] memory amounts,\\n        string[] memory hashes,\\n        bytes memory data,\\n        address[] memory royaltyRecipients,\\n        uint256[] memory royaltyPercents\\n    ) public onlyMinter returns (uint256[] memory) {\\n        require(\\n            amounts.length == hashes.length &&\\n                royaltyRecipients.length == royaltyPercents.length &&\\n                amounts.length == royaltyRecipients.length,\\n            \\\"array length mismatch\\\"\\n        );\\n        uint256[] memory ids = new uint256[](amounts.length);\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            _tokenIds.increment();\\n            uint256 newTokenId = _tokenIds.current();\\n            _hashes[newTokenId] = hashes[i];\\n            ids[i] = newTokenId;\\n            if (royaltyPercents[i] > 0) {\\n                _setTokenRoyalty(newTokenId, royaltyRecipients[i], royaltyPercents[i]);\\n            }\\n        }\\n        _mintBatch(recipient, ids, amounts, data);\\n        return ids;\\n    }\\n\\n    /**\\n     * Set Base URI\\n     *\\n     * @param _baseURI - Base URI\\n     */\\n    function setBaseURI(string calldata _baseURI) external onlyOwner {\\n        baseURI = _baseURI;\\n    }\\n\\n    /**\\n     * Get Token URI\\n     *\\n     * @param tokenId - Token ID\\n     */\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        return string(abi.encodePacked(baseURI, _hashes[tokenId]));\\n    }\\n\\n    /**\\n     * Set Trusted Forwarder\\n     *\\n     * @param _trustedForwarder - Trusted Forwarder address\\n     */\\n    function setTrustedForwarder(address _trustedForwarder) external onlyAdmin {\\n        trustedForwarder = _trustedForwarder;\\n    }\\n\\n    /**\\n     * returns the message sender\\n     */\\n    function _msgSender() internal view override(Context, BaseRelayRecipient) returns (address) {\\n        return BaseRelayRecipient._msgSender();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\n    },\n    \"src/utils/AccessProtected.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nabstract contract AccessProtected is Context, Ownable {\\n    mapping(address => bool) private _admins; // user address => admin? mapping\\n    mapping(address => bool) private _minters; // user address => minter? mapping\\n    bool public publicMinting;\\n\\n    event UserAccessSet(address _user, string _access, bool _enabled);\\n\\n    /**\\n     * @notice Set Admin Access\\n     *\\n     * @param admin - Address of Minter\\n     * @param enabled - Enable/Disable Admin Access\\n     */\\n    function setAdmin(address admin, bool enabled) external onlyOwner {\\n        require(admin != address(0), \\\"Invalid Admin Address\\\");\\n        _admins[admin] = enabled;\\n        emit UserAccessSet(admin, \\\"ADMIN\\\", enabled);\\n    }\\n\\n    /**\\n     * @notice Set Minter Access\\n     *\\n     * @param minter - Address of Minter\\n     * @param enabled - Enable/Disable Admin Access\\n     */\\n    function setMinter(address minter, bool enabled) public onlyAdmin {\\n        require(minter != address(0), \\\"Invalid Minter Address\\\");\\n        _minters[minter] = enabled;\\n        emit UserAccessSet(minter, \\\"MINTER\\\", enabled);\\n    }\\n\\n    /**\\n     * @notice Set Minter Access\\n     *\\n     * @param minters - Address of Minters\\n     * @param enabled - Enable/Disable Admin Access\\n     */\\n    function setMinters(address[] calldata minters, bool enabled) external onlyAdmin {\\n        for (uint256 i = 0; i < minters.length; i++) {\\n            address minter = minters[i];\\n            setMinter(minter, enabled);\\n        }\\n    }\\n\\n    /**\\n     * @notice Enable/Disable public Minting\\n     *\\n     * @param enabled - Enable/Disable\\n     */\\n    function setPublicMinting(bool enabled) external onlyAdmin {\\n        publicMinting = enabled;\\n        emit UserAccessSet(address(0), \\\"MINTER\\\", enabled);\\n    }\\n\\n    /**\\n     * @notice Check Admin Access\\n     *\\n     * @param admin - Address of Admin\\n     * @return whether minter has access\\n     */\\n    function isAdmin(address admin) public view returns (bool) {\\n        return _admins[admin];\\n    }\\n\\n    /**\\n     * @notice Check Minter Access\\n     *\\n     * @param minter - Address of minter\\n     * @return whether minter has access\\n     */\\n    function isMinter(address minter) public view returns (bool) {\\n        return _minters[minter];\\n    }\\n\\n    /**\\n     * Throws if called by any account other than the Admin/Owner.\\n     */\\n    modifier onlyAdmin() {\\n        require(_admins[_msgSender()] || _msgSender() == owner(), \\\"AccessProtected: caller is not admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Throws if called by any account other than the Minter/Admin/Owner.\\n     */\\n    modifier onlyMinter() {\\n        require(\\n            publicMinting || _minters[_msgSender()] || _admins[_msgSender()] || _msgSender() == owner(),\\n            \\\"AccessProtected: caller is not minter\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\n    },\n    \"src/ERC2981Royalties.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\nabstract contract ERC2981Royalties is IERC2981 {\\n    struct Royalty {\\n        address recipient;\\n        uint256 value; // as a % unit, from 0 - 10000 (2 extra 0s) for eg 25% is 2500\\n    }\\n\\n    mapping(uint256 => Royalty) internal _royalties; // tokenId => royalty\\n\\n    function _setTokenRoyalty(\\n        uint256 id,\\n        address recipient,\\n        uint256 value\\n    ) internal {\\n        require(value <= 100_00, \\\"ERC2981Royalties: value too high\\\");\\n        _royalties[id] = Royalty(recipient, value);\\n    }\\n\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        Royalty memory royalty = _royalties[_tokenId];\\n        return (royalty.recipient, (_salePrice * royalty.value) / 100_00);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/finance/PaymentSplitter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20 token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\"\n    },\n    \"src/fundraising/ShowtimeBakeSale.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { PaymentSplitter } from \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\nimport { IERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport { ShowtimeMTReceiver } from \\\"./ShowtimeMTReceiver.sol\\\";\\n\\ninterface IShowtimeV1Market {\\n    function createSale(\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        uint256 _price,\\n        address _currency\\n    ) external returns (uint256 listingId);\\n\\n    function cancelSale(uint256 _listingId) external;\\n}\\n\\n/// This contract acts as a delegate for listings on the showtime.io marketplace.\\n/// It allows trustless sales for 3rd parties such as charities.\\n///\\n/// Usage:\\n/// 1. deploy a copy of this contract with the appropriate payees and shares. The payees are immutable and auditable by anyone.\\n/// 2. anybody can mint a Showtime NFT with the royalties recipient set to the address of this contract\\n/// 3. the minter transfers (some or all of the editions of) the Showtime NFT to this contract\\n/// 4. the deployer of the contract calls `createSale`\\n/// 5. (optional) the deployer calls `renounceOwnership()`, proving that the listing and the remaining supply will be permanently left untouched\\n/// 6. proceeds from primary sales will accrue in this contract (and secondary sales if it the NFTs use it as the royalties recipient address)\\n/// 7. anybody can call `release(IERC20 token, address account)` to disperse the funds to the recipients\\ncontract ShowtimeBakeSale is PaymentSplitter, ShowtimeMTReceiver, Ownable {\\n    IShowtimeV1Market public immutable showtimeMarket;\\n\\n    constructor(\\n        address _showtimeMT,\\n        address _showtimeMarket,\\n        address[] memory payees,\\n        uint256[] memory shares_\\n    ) PaymentSplitter(payees, shares_) ShowtimeMTReceiver(_showtimeMT) {\\n        showtimeMarket = IShowtimeV1Market(_showtimeMarket);\\n\\n        IERC1155(_showtimeMT).setApprovalForAll(_showtimeMarket, true);\\n    }\\n\\n    function createSale(\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        uint256 _price,\\n        address _currency\\n    ) external onlyOwner returns (uint256 listingId) {\\n        listingId = showtimeMarket.createSale(_tokenId, _quantity, _price, _currency);\\n    }\\n\\n    function cancelSale(uint256 listingId) external onlyOwner {\\n        showtimeMarket.cancelSale(listingId);\\n    }\\n\\n    function withdraw(uint256 _tokenId, address to) external onlyOwner {\\n        uint howMany = IERC1155(showtimeMT).balanceOf(address(this), _tokenId);\\n        IERC1155(showtimeMT).safeTransferFrom(address(this), to, _tokenId, howMany, \\\"\\\");\\n    }\\n}\\n\"\n    },\n    \"src/fundraising/ShowtimeMTReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport { ERC1155Receiver } from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\\\";\\n\\ncontract ShowtimeMTReceiver is ERC1155Receiver {\\n    address public immutable showtimeMT;\\n\\n    error UnexpectedERC1155Transfer(address _nftContract, uint256 id);\\n    error UnexpectedERC1155BatchTransfer(address _nftContract, uint256[] ids);\\n\\n    constructor(address _showtimeMT) {\\n        showtimeMT = _showtimeMT;\\n    }\\n\\n    /// Accept transfers from ShowtimeMT\\n    function onERC1155Received(\\n        address, /* operator */\\n        address, /* from */\\n        uint256 id,\\n        uint256, /* value */\\n        bytes calldata /* data */\\n    ) external view override returns (bytes4) {\\n        if (msg.sender != showtimeMT) {\\n            revert UnexpectedERC1155Transfer(msg.sender, id);\\n        }\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /// Accept batch transfers from ShowtimeMT\\n    function onERC1155BatchReceived(\\n        address, /* operator */\\n        address, /* from */\\n        uint256[] calldata ids,\\n        uint256[] calldata, /* values */\\n        bytes calldata /* data */\\n    ) external view override returns (bytes4) {\\n        if (msg.sender != showtimeMT) {\\n            revert UnexpectedERC1155BatchTransfer(msg.sender, ids);\\n        }\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"src/meta-tx/ShowtimeForwarder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Forwarder } from \\\"lib/gsn/packages/contracts/src/forwarder/Forwarder.sol\\\";\\n\\ncontract ShowtimeForwarder is Forwarder {\\n    /// no extra functionality\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"metadata\": {\n      \"bytecodeHash\": \"none\",\n      \"useLiteralContent\": true\n    },\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1000000\n    },\n    \"viaIR\": true,\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    }\n  }\n}",
      "solcInputHash": "84c8e1217695cca8ba1bbd09ead777e3",
      "transactionHash": "0xb332358f4ae07845316b19ce054a0cea594acb92d7c1861a1de0e3a95e7fdcff",
      "args": [
        "0x773E5B82179E6CE1CdF8c5C0d736e797b3ceDDDC",
        "0x00d2249ef000002B2Fdec16900058800E900000c",
        "0x50c001E4eB10801968F6640E1537D63a557e5d72"
      ]
    },
    "decoded": {
      "from": "0x515F7d84cEE53051b7ADF645fA2220f65BC25c68",
      "gasPrice": "40000000002",
      "maxFeePerGas": "40000000002",
      "maxPriorityFeePerGas": "39999999992",
      "gasLimit": "820930",
      "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
      "value": "0",
      "nonce": 30,
      "data": "0x00000000000000000000000000000000000000000000000c00000000001bd4136101008060405234620000be5760608162000f978038038091620000248285620000c3565b833981010312620000be57805162000068916200004182620000fd565b60406020820151916200005483620000fd565b0151916200006283620000fd565b62000137565b604051610d8f9081620002088239608051818181610203015281816102c70152610731015260a05181818160de0152610bd3015260c0518181816101620152610a04015260e05181818161054d0152610b130152f35b600080fd5b601f909101601f19168101906001600160401b03821190821017620000e757604052565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811603620000be57565b90816020910312620000be57516200012781620000fd565b90565b506040513d6000823e3d90fd5b6001600160a01b03908116929083158015620001fc575b8015620001f1575b620001df578060209360049560805216918260a0521660e052604051928380926314d8397560e21b82525afa908115620001cf575b6000916200019a575b5060c052565b620001c0915060203d8111620001c7575b620001b78183620000c3565b8101906200010f565b3862000194565b503d620001ab565b620001d96200012a565b6200018b565b60405163e99d5ac560e01b8152600490fd5b508082161562000156565b50808316156200014e56fe608080604052600436101561001357600080fd5b6000803560e01c918263075461721461009657505080635360e5d41461008d578063ac52edfd14610084578063d33ed8b81461007b578063e4e22e1e146100725763f565d63d14610065575b38600080fd5b61006d610501565b61005f565b5061006d61040e565b5061006d61027b565b5061006d610186565b5061006d610116565b3461010257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101025760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b600091031261011157565b600080fd5b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115760206040517fac52edfd000000000000000000000000000000000000000000000000000000008152600435600482015273ffffffffffffffffffffffffffffffffffffffff8282602481847f0000000000000000000000000000000000000000000000000000000000000000165afa91821561026e575b60009261023f575b5060405191168152f35b610260919250833d8111610267575b610258818361033c565b8101906106eb565b9038610235565b503d61024e565b6102766106c0565b61022d565b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161032f57604052565b6103376102eb565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761032f57604052565b81601f820112156101115780359067ffffffffffffffff82116103f3575b604051926103d160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561033c565b8284526020838301011161011157816000926020809301838601378301015290565b6103fb6102eb565b61039b565b908160a09103126101115790565b5034610111576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115767ffffffffffffffff6004803582811161011157610460903690830161037d565b60243583811161011157610477903690840161037d565b6044358481116101115761048e903690850161037d565b90606435858111610111576104a6903690860161037d565b9260e435958611610111576104c46104d6956104fd97369101610400565b9360c4359360a4359360843593610703565b60405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b0390f35b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b604051906040820182811067ffffffffffffffff8211176105bc575b604052600882527f53484f5754494d450000000000000000000000000000000000000000000000006020830152565b6105c46102eb565b61058d565b90816020910312610111575190565b91908251928382526000905b84821061062f5750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610622575b0116010190565b600085828601015261061b565b906020908180828501015190828601015201906105e4565b9361068c6106af9461067e610100989561067061069a969d9c9b9d610120808c528b01906105d8565b9089820360208b01526105d8565b9087820360408901526105d8565b9085820360608701526105d8565b906000608085015283820360a08501526105d8565b94600060c083015260e08201520152565b506040513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff81160361011157565b908160209103126101115751610700816106cd565b90565b916107ea9397969491959261071788610995565b5073ffffffffffffffffffffffffffffffffffffffff98897f0000000000000000000000000000000000000000000000000000000000000000169261079961075d610571565b9660405196879485947f10c3009e00000000000000000000000000000000000000000000000000000000865260209d8e9b8c9960048901610647565b03816000855af191821561086e575b60009261083f575b5060405180809581947fac52edfd000000000000000000000000000000000000000000000000000000008352600483019190602083019252565b03915afa928315610832575b60009361080f575b5050819261080b92610aef565b1690565b61080b9350908161082b92903d1061026757610258818361033c565b91386107fe565b61083a6106c0565b6107f6565b610860919250833d8511610867575b610858818361033c565b8101906105c9565b90386107b0565b503d61084e565b6108766106c0565b6107a8565b35610700816106cd565b90816020910312610111575180151581036101115790565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b906020825280356108ec816106cd565b73ffffffffffffffffffffffffffffffffffffffff80911660208401526020820135610917816106cd565b166040830152604081013560608301526060810135608083015260808101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156101115781019081359067ffffffffffffffff8211610111578136031261011157602060c08460a08061070097015201920161089d565b6109a16020820161087b565b9073ffffffffffffffffffffffffffffffffffffffff913083821603610aa65750610a006000926020926040519485809481937f82059300000000000000000000000000000000000000000000000000000000008352600483016108dc565b03927f0000000000000000000000000000000000000000000000000000000000000000165af1908115610a99575b600091610a6b575b5015610a4157600190565b60046040517f439cc0cd000000000000000000000000000000000000000000000000000000008152fd5b610a8c915060203d8111610a92575b610a84818361033c565b810190610885565b38610a36565b503d610a7a565b610aa16106c0565b610a2e565b6040517fcc49271c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602490fd5b9190610afa9061087b565b73ffffffffffffffffffffffffffffffffffffffff80807f000000000000000000000000000000000000000000000000000000000000000016941692843b15610111576040517f26d79f7c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602481019190915260009485908290604490829084905af18015610d75575b610d62575b50823b15610d5e576040517f29ec16dd0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009190911673ffffffffffffffffffffffffffffffffffffffff16600482015260016024820152838160448183875af18015610d51575b610d3e575b506040517fa66ff0af00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260208160248187875af18015610d31575b610d13575b50813b15610d0f576040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015291908290602490829084905af18015610d02575b610ced5750565b80610cfa610d009261031b565b80610106565b565b610d0a6106c0565b610ce6565b8280fd5b610d2a9060203d811161086757610858818361033c565b5038610c86565b610d396106c0565b610c81565b80610cfa610d4b9261031b565b38610c2d565b610d596106c0565b610c28565b8380fd5b80610cfa610d6f9261031b565b38610ba3565b610d7d6106c0565b610b9e56fea164736f6c634300080d000a000000000000000000000000773e5b82179e6ce1cdf8c5c0d736e797b3cedddc00000000000000000000000000d2249ef000002b2fdec16900058800e900000c00000000000000000000000050c001e4eb10801968f6640e1537d63a557e5d72",
      "r": "0x30c46180fa9701c6bf8013b185d751817a7a0583b2428c6a530ed6487e37c8b1",
      "s": "0x554dcdd733824557cf1e878ee57c9cddf0fa2b2781262083a9960cd823ffae49",
      "v": 0,
      "chainId": 80001
    }
  }
}