{
  "address": "0x8d16B48AE01d5b5a66178074Debb90204aeF6a51",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_editionCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timeCop",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "context",
          "type": "address"
        }
      ],
      "name": "UnexpectedContext",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerificationFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "animationUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "royaltyBPS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimWindowDurationSeconds",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "context",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedAttestation",
          "name": "signedAttestation",
          "type": "tuple"
        }
      ],
      "name": "createEdition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "editionCreator",
      "outputs": [
        {
          "internalType": "contract ISingleEditionMintableCreator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "editionId",
          "type": "uint256"
        }
      ],
      "name": "getEditionAtId",
      "outputs": [
        {
          "internalType": "contract IEditionSingleMintable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "contract IGatedEditionMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showtimeVerifier",
      "outputs": [
        {
          "internalType": "contract IShowtimeVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeCop",
      "outputs": [
        {
          "internalType": "contract TimeCop",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3634d9538d31d4a214b1b5ba2d4e1795076367f6f2a6f23e0846329f792ba9b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x515F7d84cEE53051b7ADF645fA2220f65BC25c68",
    "contractAddress": null,
    "transactionIndex": 11,
    "gasUsed": "809965",
    "logsBloom": "0x00000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000004000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000080000000100000000000200000000000000000400000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100040000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x7e53a745bf935ea2eb5b16299e9c2393f7e82ae65cc02f0f51cbcdb7d58ebc4e",
    "transactionHash": "0xa3634d9538d31d4a214b1b5ba2d4e1795076367f6f2a6f23e0846329f792ba9b",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 27650079,
        "transactionHash": "0xa3634d9538d31d4a214b1b5ba2d4e1795076367f6f2a6f23e0846329f792ba9b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000515f7d84cee53051b7adf645fa2220f65bc25c68",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000064b70f8735aebe00000000000000000000000000000000000000000000000003f7906dd9a353eb000000000000000000000000000000000000000000002309a17ac7d94219fc1f0000000000000000000000000000000000000000000000000392d95e526da52d000000000000000000000000000000000000000000002309a1df7ee8c94faadd",
        "logIndex": 20,
        "blockHash": "0x7e53a745bf935ea2eb5b16299e9c2393f7e82ae65cc02f0f51cbcdb7d58ebc4e"
      }
    ],
    "blockNumber": 27650079,
    "cumulativeGasUsed": "3641377",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x773E5B82179E6CE1CdF8c5C0d736e797b3ceDDDC",
    "0xd93d362c0024dc3b8020043FD70c0D0fC01576EB",
    "0x50c001E4eB10801968F6640E1537D63a557e5d72"
  ],
  "numDeployments": 1,
  "solcInputHash": "7dd94dde600f3f638c5876206305049e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_editionCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timeCop\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"}],\"name\":\"UnexpectedContext\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerificationFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimWindowDurationSeconds\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedAttestation\",\"name\":\"signedAttestation\",\"type\":\"tuple\"}],\"name\":\"createEdition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editionCreator\",\"outputs\":[{\"internalType\":\"contract ISingleEditionMintableCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"getEditionAtId\",\"outputs\":[{\"internalType\":\"contract IEditionSingleMintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract IGatedEditionMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showtimeVerifier\",\"outputs\":[{\"internalType\":\"contract IShowtimeVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeCop\",\"outputs\":[{\"internalType\":\"contract TimeCop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createEdition(string,string,string,string,uint256,uint256,uint256,((address,address,uint256,uint256),bytes))\":{\"details\":\"we expect the signed attestation's context to correspond to this contract's addresswe expect the signed attestation's beneficiary to be the edition's creator\",\"params\":{\"animationUrl\":\"Metadata: Animation url (optional) of the edition entry\",\"claimWindowDurationSeconds\":\"How long after deployment the edition can be claimed, in seconds\",\"description\":\"Metadata: Description of the edition entry\",\"editionSize\":\"Total size of the edition (number of possible editions)\",\"imageUrl\":\"Metadata: Image url (semi-required) of the edition entry\",\"name\":\"Name of the edition contract\",\"royaltyBPS\":\"BPS amount of royalty\",\"signedAttestation\":\"the attestation to verify along with a corresponding signature\"},\"returns\":{\"_0\":\"the address of the created edition\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createEdition(string,string,string,string,uint256,uint256,uint256,((address,address,uint256,uint256),bytes))\":{\"notice\":\"Creates a new edition contract as a factory with a deterministic address Important: None of these fields (except the Url fields with the same hash) can be changed after calling\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/editions/GatedEditionCreator.sol\":\"GatedEditionCreator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x45fe5b6e09537c84248325b6cb3595aed7752b07425dfe136351234f2d8130dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n  function mintEditions(address[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x04b73ddff10e4feb9297834b5550faecb1e63bfc8c4a513ecdf25796c49360db\",\"license\":\"GPL-3.0\"},\"src/editions/GatedEditionCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IGatedEditionMinter } from \\\"./interfaces/IGatedEditionMinter.sol\\\";\\nimport { IShowtimeVerifier, Attestation, SignedAttestation } from \\\"src/interfaces/IShowtimeVerifier.sol\\\";\\nimport { ISingleEditionMintableCreator, IEditionSingleMintable } from \\\"./interfaces/ISingleEditionMintableCreator.sol\\\";\\nimport { MetaEditionMinter } from \\\"./MetaEditionMinter.sol\\\";\\nimport { MetaEditionMinterFactory } from \\\"./MetaEditionMinterFactory.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ninterface _IEditionSingleMintable {\\n    function transferOwnership(address newOwner) external;\\n\\n    function setApprovedMinter(address minter, bool allowed) external;\\n}\\n\\ncontract GatedEditionCreator {\\n    error NullAddress();\\n    error VerificationFailed();\\n    error UnexpectedContext(address context);\\n\\n    string constant SYMBOL = \\\"SHOWTIME\\\";\\n\\n    ISingleEditionMintableCreator public immutable editionCreator;\\n    IGatedEditionMinter public immutable minter;\\n    IShowtimeVerifier public immutable showtimeVerifier;\\n    TimeCop public immutable timeCop;\\n\\n    constructor(\\n        address _editionCreator,\\n        address _minter,\\n        address _timeCop\\n    ) {\\n        if (_editionCreator == address(0) || _minter == address(0) || _timeCop == address(0)) {\\n            revert NullAddress();\\n        }\\n        editionCreator = ISingleEditionMintableCreator(_editionCreator);\\n        minter = IGatedEditionMinter(_minter);\\n        timeCop = TimeCop(_timeCop);\\n\\n        showtimeVerifier = IGatedEditionMinter(_minter).showtimeVerifier();\\n    }\\n\\n    /// Creates a new edition contract as a factory with a deterministic address\\n    /// Important: None of these fields (except the Url fields with the same hash) can be changed after calling\\n    /// @param name Name of the edition contract\\n    /// @param description Metadata: Description of the edition entry\\n    /// @param animationUrl Metadata: Animation url (optional) of the edition entry\\n    /// @param imageUrl Metadata: Image url (semi-required) of the edition entry\\n    /// @param editionSize Total size of the edition (number of possible editions)\\n    /// @param royaltyBPS BPS amount of royalty\\n    /// @param claimWindowDurationSeconds How long after deployment the edition can be claimed, in seconds\\n    /// @param signedAttestation the attestation to verify along with a corresponding signature\\n    /// @dev we expect the signed attestation's context to correspond to this contract's address\\n    /// @dev we expect the signed attestation's beneficiary to be the edition's creator\\n    /// @return the address of the created edition\\n    function createEdition(\\n        // ISingleEditionMintableCreator parameters\\n        string memory name,\\n        string memory description,\\n        string memory animationUrl,\\n        string memory imageUrl,\\n        uint256 editionSize,\\n        uint256 royaltyBPS,\\n        // additional parameters\\n        uint256 claimWindowDurationSeconds,\\n        SignedAttestation calldata signedAttestation\\n    ) external returns (address) {\\n        validateAttestation(signedAttestation);\\n\\n        // deploy the new edition\\n        IEditionSingleMintable edition = editionCreator.getEditionAtId(\\n            editionCreator.createEdition(\\n                name,\\n                SYMBOL,\\n                description,\\n                animationUrl,\\n                0, // animation hash\\n                imageUrl,\\n                0, // image hash\\n                editionSize,\\n                royaltyBPS\\n            )\\n        );\\n\\n        configureEdition(edition, signedAttestation, claimWindowDurationSeconds);\\n\\n        return address(edition);\\n    }\\n\\n    function getEditionAtId(uint256 editionId) external view returns (IEditionSingleMintable) {\\n        return editionCreator.getEditionAtId(editionId);\\n    }\\n\\n    function validateAttestation(SignedAttestation calldata signedAttestation) internal returns (bool) {\\n        // verify that the context for this attestation is valid\\n        address context = signedAttestation.attestation.context;\\n        if (context != address(this)) {\\n            revert UnexpectedContext(context);\\n        }\\n\\n        // verify attestation\\n        if (!showtimeVerifier.verifyAndBurn(signedAttestation)) {\\n            revert VerificationFailed();\\n        }\\n\\n        return true;\\n    }\\n\\n    function configureEdition(\\n        IEditionSingleMintable edition,\\n        // address creator,\\n        SignedAttestation calldata signedAttestation,\\n        uint256 _claimWindowDurationSeconds\\n    ) internal {\\n        address creator = signedAttestation.attestation.beneficiary;\\n\\n        // configure the time limit\\n        timeCop.setTimeLimit(address(edition), _claimWindowDurationSeconds);\\n\\n        // configure the edition (while we still own it)\\n        _IEditionSingleMintable(address(edition)).setApprovedMinter(address(minter), true);\\n\\n        // auto claim one for the creator\\n        edition.mintEdition(creator);\\n\\n        // and finally transfer ownership of the configured contract to the actual creator\\n        _IEditionSingleMintable(address(edition)).transferOwnership(creator);\\n    }\\n}\\n\",\"keccak256\":\"0xcb6bba8556eb68debd44431c21648c5cd55c7ac965edf0891c0c1be8244c6595\",\"license\":\"MIT\"},\"src/editions/MetaEditionMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\nimport { BaseRelayRecipient } from \\\"../utils/BaseRelayRecipient.sol\\\";\\n\\nimport { IEditionMinter } from \\\"./interfaces/IEditionMinter.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ncontract MetaEditionMinter is BaseRelayRecipient, IEditionMinter, Initializable {\\n    event Destroyed(MetaEditionMinter minter, IEditionSingleMintable collection);\\n\\n    error NullAddress();\\n    error AlreadyMinted(IEditionSingleMintable collection, address operator);\\n    error TimeLimitReached(IEditionSingleMintable collection);\\n    error TimeLimitNotReached(IEditionSingleMintable collection);\\n\\n    /// @dev these would be immutable if they were not set in the initializer\\n    IEditionSingleMintable public collection;\\n    TimeCop public timeCop;\\n\\n    mapping(address => bool) public minted;\\n\\n    /// @dev deploy the initial implementation via constructor and lock the contract, preventing calls to initialize()\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _trustedForwarder,\\n        IEditionSingleMintable _collection,\\n        TimeCop _timeCop\\n    ) external initializer {\\n        if (address(_collection) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        if (address(_timeCop) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        // we accept the null address for the trusted forwarder (meta-tx disabled)\\n        trustedForwarder = _trustedForwarder;\\n        collection = _collection;\\n        timeCop = _timeCop;\\n    }\\n\\n    function mintEdition(address _to) external override {\\n        if (timeCop.timeLimitReached(address(collection))) {\\n            revert TimeLimitReached(collection);\\n        }\\n\\n        address operator = _msgSender();\\n        recordMint(operator);\\n        if (operator != _to) {\\n            recordMint(_to);\\n        }\\n\\n        collection.mintEdition(_to);\\n    }\\n\\n    function recordMint(address minter) internal {\\n        if (minted[minter]) {\\n            revert AlreadyMinted(collection, minter);\\n        }\\n\\n        minted[minter] = true;\\n    }\\n\\n    /// @notice deletes the record of who minted for that collection if we are past the claim window\\n    /// @notice no-op if there was no time limit set or it has not expired yet\\n    function purge() external {\\n        // collection is not set in the implementation contract\\n        if (address(collection) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        bool expired = timeCop.timeLimitReached(address(collection));\\n        if (!expired) {\\n            revert TimeLimitNotReached(collection);\\n        }\\n\\n        emit Destroyed(this, collection);\\n\\n        selfdestruct(payable(collection.owner()));\\n    }\\n}\\n\",\"keccak256\":\"0x8c450e652342c3ef47f689b9d6fece36060ca9c9a1d4826356d6f8130a768d26\",\"license\":\"MIT\"},\"src/editions/MetaEditionMinterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { ClonesUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\nimport { MetaEditionMinter } from \\\"./MetaEditionMinter.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ncontract MetaEditionMinterFactory {\\n    error NullAddress();\\n\\n    address public immutable trustedForwarder;\\n    MetaEditionMinter public immutable minterImpl;\\n    TimeCop public immutable timeCop;\\n\\n    constructor (address _trustedForwarder, address _timeCop) {\\n        if (_timeCop == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        /// @dev we accept the null address for the trusted forwarder (meta-tx disabled)\\n        trustedForwarder = _trustedForwarder;\\n        timeCop = TimeCop(_timeCop);\\n\\n        /// @dev this deploys and locks down the base implementation, which we will later deploy proxies to\\n        minterImpl = new MetaEditionMinter();\\n    }\\n\\n    /// returns an initialized minimal proxy to the base MetaEditionMinter implementation\\n    function createMinter(IEditionSingleMintable _edition) public returns (MetaEditionMinter newMinter) {\\n        // deploy the minter for this edition\\n        newMinter = MetaEditionMinter(\\n            ClonesUpgradeable.cloneDeterministic(\\n                address(minterImpl),\\n                bytes32(uint256(uint160(address(_edition))))\\n            )\\n        );\\n\\n        newMinter.initialize(trustedForwarder, _edition, timeCop);\\n    }\\n\\n    function getMinterForEdition(address edition) public view returns (address) {\\n        return ClonesUpgradeable.predictDeterministicAddress(\\n            address(minterImpl),\\n            bytes32(uint256(uint160(edition)))\\n        );\\n    }\\n}\",\"keccak256\":\"0x6c1123f0650f87160522b82d9aae08dd15f1afd80cf009b7ec1139d1d399a1d7\",\"license\":\"MIT\"},\"src/editions/TimeCop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TimeCop {\\n    event TimeLimitSet(address collection, uint256 deadline);\\n\\n    error InvalidTimeLimit(uint256 offsetSeconds);\\n    error NotCollectionOwner();\\n    error TimeLimitAlreadySet();\\n\\n    uint256 public immutable MAX_DURATION_SECONDS;\\n\\n    /// @notice the time limits expressed as a timestamp in seconds\\n    mapping(address => uint256) public timeLimits;\\n\\n    /// @param _maxDurationSeconds maximum time limit\\n    /// @dev _maxDurationSeconds can be set to 0 to have no maximum time limit\\n    constructor(uint256 _maxDurationSeconds) {\\n        MAX_DURATION_SECONDS = _maxDurationSeconds;\\n    }\\n\\n    /// @notice Sets the deadline for the given collection\\n    /// @notice Only the owner of the collection can set the deadline\\n    /// @param collection The address to set the deadline for\\n    /// @param offsetSeconds a duration in seconds that will be used to set the time limit\\n    function setTimeLimit(address collection, uint256 offsetSeconds) external {\\n        if (offsetSeconds == 0) {\\n            revert InvalidTimeLimit(offsetSeconds);\\n        }\\n\\n        if (MAX_DURATION_SECONDS > 0 && offsetSeconds > MAX_DURATION_SECONDS) {\\n            revert InvalidTimeLimit(offsetSeconds);\\n        }\\n\\n        if (timeLimitSet(collection)) {\\n            revert TimeLimitAlreadySet();\\n        }\\n\\n        if (msg.sender != Ownable(collection).owner()) {\\n            revert NotCollectionOwner();\\n        }\\n\\n        uint256 deadline = block.timestamp + offsetSeconds;\\n        timeLimits[collection] = deadline;\\n\\n        emit TimeLimitSet(collection, deadline);\\n    }\\n\\n    function timeLimitSet(address collection) public view returns (bool) {\\n        return timeLimits[collection] > 0;\\n    }\\n\\n    /// @return false if there is no time limit set for that collection\\n    function timeLimitReached(address collection) public view returns (bool) {\\n        return timeLimitSet(collection) && block.timestamp > timeLimits[collection];\\n    }\\n}\",\"keccak256\":\"0x7a245be43fac95db15a2f5b1badaa8de64feac5a9afb6ab8c06f535512f03743\",\"license\":\"MIT\"},\"src/editions/interfaces/IEditionMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IEditionMinter {\\n    function mintEdition(address _to) external;\\n}\\n\",\"keccak256\":\"0xbb6abf578a6fdaa3a53694b9b4539975395983ab485abac35143ba6b5fcd6840\",\"license\":\"MIT\"},\"src/editions/interfaces/IGatedEditionMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IShowtimeVerifier, SignedAttestation } from \\\"src/interfaces/IShowtimeVerifier.sol\\\";\\n\\ninterface IGatedEditionMinter {\\n    function mintEdition(SignedAttestation calldata signedAttestation) external;\\n\\n    function showtimeVerifier() external view returns (IShowtimeVerifier);\\n}\\n\",\"keccak256\":\"0xa407de034a9e047cc52df2924ad8088f741ab7f2e7f98d6465132dab810a17ed\",\"license\":\"MIT\"},\"src/editions/interfaces/ISingleEditionMintableCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\ninterface ISingleEditionMintableCreator {\\n    /// @return The ID of the created edition\\n    function createEdition(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS\\n    ) external returns (uint256);\\n\\n    /// Get edition given the created ID\\n    /// @param editionId id of edition to get contract for\\n    /// @return SingleEditionMintable Edition NFT contract\\n    function getEditionAtId(uint256 editionId) external view returns (IEditionSingleMintable);\\n}\\n\",\"keccak256\":\"0xbf4d6d1047d74d55e38b59c15a12bb81d66ad588fbce39277ccec85bca955f11\",\"license\":\"MIT\"},\"src/interfaces/IShowtimeVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nstruct Attestation {\\n    address beneficiary;\\n    address context;\\n    uint256 nonce;\\n    uint256 validUntil;\\n}\\n\\nstruct SignedAttestation {\\n    Attestation attestation;\\n    bytes signature;\\n}\\n\\ninterface IShowtimeVerifier {\\n    error BadNonce(uint256 expected, uint256 actual);\\n    error DeadlineTooLong();\\n    error Expired();\\n    error NullAddress();\\n    error SignerExpired(address signer);\\n    error Unauthorized();\\n    error UnknownSigner();\\n\\n    event SignerAdded(address signer, uint256 validUntil);\\n    event SignerRevoked(address signer);\\n    event ManagerUpdated(address newManager);\\n\\n    function verify(SignedAttestation calldata signedAttestation) external view returns (bool);\\n\\n    function verifyAndBurn(SignedAttestation calldata signedAttestation) external returns (bool);\\n\\n    function verify(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external view returns (bool);\\n\\n    function verifyAndBurn(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external returns (bool);\\n\\n    function setManager(address _manager) external;\\n\\n    function registerSigner(address signer, uint256 validityDays) external returns (uint256 validUntil);\\n\\n    function revokeSigner(address signer) external;\\n\\n    function registerAndRevoke(\\n        address signerToRegister,\\n        address signerToRevoke,\\n        uint256 validityDays\\n    ) external returns (uint256 validUntil);\\n}\\n\",\"keccak256\":\"0x695d273638ee417210ccd91f0d47a9e280573887d068086f19038b8483950af8\",\"license\":\"MIT\"},\"src/utils/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    /*\\n     * require a function to be called through GSN only\\n     */\\n    modifier trustedForwarderOnly() {\\n        require(msg.sender == address(trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n        _;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal view virtual returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bc32699996cd88763232d1d70d7c680c382c13dfd6a3db3580156dd79cd3f1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101008060405234620000be5760608162000f978038038091620000248285620000c3565b833981010312620000be57805162000068916200004182620000fd565b60406020820151916200005483620000fd565b0151916200006283620000fd565b62000137565b604051610d8f9081620002088239608051818181610203015281816102c70152610731015260a05181818160de0152610bd3015260c0518181816101620152610a04015260e05181818161054d0152610b130152f35b600080fd5b601f909101601f19168101906001600160401b03821190821017620000e757604052565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811603620000be57565b90816020910312620000be57516200012781620000fd565b90565b506040513d6000823e3d90fd5b6001600160a01b03908116929083158015620001fc575b8015620001f1575b620001df578060209360049560805216918260a0521660e052604051928380926314d8397560e21b82525afa908115620001cf575b6000916200019a575b5060c052565b620001c0915060203d8111620001c7575b620001b78183620000c3565b8101906200010f565b3862000194565b503d620001ab565b620001d96200012a565b6200018b565b60405163e99d5ac560e01b8152600490fd5b508082161562000156565b50808316156200014e56fe608080604052600436101561001357600080fd5b6000803560e01c918263075461721461009657505080635360e5d41461008d578063ac52edfd14610084578063d33ed8b81461007b578063e4e22e1e146100725763f565d63d14610065575b38600080fd5b61006d610501565b61005f565b5061006d61040e565b5061006d61027b565b5061006d610186565b5061006d610116565b3461010257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101025760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b600091031261011157565b600080fd5b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115760206040517fac52edfd000000000000000000000000000000000000000000000000000000008152600435600482015273ffffffffffffffffffffffffffffffffffffffff8282602481847f0000000000000000000000000000000000000000000000000000000000000000165afa91821561026e575b60009261023f575b5060405191168152f35b610260919250833d8111610267575b610258818361033c565b8101906106eb565b9038610235565b503d61024e565b6102766106c0565b61022d565b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161032f57604052565b6103376102eb565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761032f57604052565b81601f820112156101115780359067ffffffffffffffff82116103f3575b604051926103d160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561033c565b8284526020838301011161011157816000926020809301838601378301015290565b6103fb6102eb565b61039b565b908160a09103126101115790565b5034610111576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115767ffffffffffffffff6004803582811161011157610460903690830161037d565b60243583811161011157610477903690840161037d565b6044358481116101115761048e903690850161037d565b90606435858111610111576104a6903690860161037d565b9260e435958611610111576104c46104d6956104fd97369101610400565b9360c4359360a4359360843593610703565b60405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b0390f35b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b604051906040820182811067ffffffffffffffff8211176105bc575b604052600882527f53484f5754494d450000000000000000000000000000000000000000000000006020830152565b6105c46102eb565b61058d565b90816020910312610111575190565b91908251928382526000905b84821061062f5750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610622575b0116010190565b600085828601015261061b565b906020908180828501015190828601015201906105e4565b9361068c6106af9461067e610100989561067061069a969d9c9b9d610120808c528b01906105d8565b9089820360208b01526105d8565b9087820360408901526105d8565b9085820360608701526105d8565b906000608085015283820360a08501526105d8565b94600060c083015260e08201520152565b506040513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff81160361011157565b908160209103126101115751610700816106cd565b90565b916107ea9397969491959261071788610995565b5073ffffffffffffffffffffffffffffffffffffffff98897f0000000000000000000000000000000000000000000000000000000000000000169261079961075d610571565b9660405196879485947f10c3009e00000000000000000000000000000000000000000000000000000000865260209d8e9b8c9960048901610647565b03816000855af191821561086e575b60009261083f575b5060405180809581947fac52edfd000000000000000000000000000000000000000000000000000000008352600483019190602083019252565b03915afa928315610832575b60009361080f575b5050819261080b92610aef565b1690565b61080b9350908161082b92903d1061026757610258818361033c565b91386107fe565b61083a6106c0565b6107f6565b610860919250833d8511610867575b610858818361033c565b8101906105c9565b90386107b0565b503d61084e565b6108766106c0565b6107a8565b35610700816106cd565b90816020910312610111575180151581036101115790565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b906020825280356108ec816106cd565b73ffffffffffffffffffffffffffffffffffffffff80911660208401526020820135610917816106cd565b166040830152604081013560608301526060810135608083015260808101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156101115781019081359067ffffffffffffffff8211610111578136031261011157602060c08460a08061070097015201920161089d565b6109a16020820161087b565b9073ffffffffffffffffffffffffffffffffffffffff913083821603610aa65750610a006000926020926040519485809481937f82059300000000000000000000000000000000000000000000000000000000008352600483016108dc565b03927f0000000000000000000000000000000000000000000000000000000000000000165af1908115610a99575b600091610a6b575b5015610a4157600190565b60046040517f439cc0cd000000000000000000000000000000000000000000000000000000008152fd5b610a8c915060203d8111610a92575b610a84818361033c565b810190610885565b38610a36565b503d610a7a565b610aa16106c0565b610a2e565b6040517fcc49271c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602490fd5b9190610afa9061087b565b73ffffffffffffffffffffffffffffffffffffffff80807f000000000000000000000000000000000000000000000000000000000000000016941692843b15610111576040517f26d79f7c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602481019190915260009485908290604490829084905af18015610d75575b610d62575b50823b15610d5e576040517f29ec16dd0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009190911673ffffffffffffffffffffffffffffffffffffffff16600482015260016024820152838160448183875af18015610d51575b610d3e575b506040517fa66ff0af00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260208160248187875af18015610d31575b610d13575b50813b15610d0f576040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015291908290602490829084905af18015610d02575b610ced5750565b80610cfa610d009261031b565b80610106565b565b610d0a6106c0565b610ce6565b8280fd5b610d2a9060203d811161086757610858818361033c565b5038610c86565b610d396106c0565b610c81565b80610cfa610d4b9261031b565b38610c2d565b610d596106c0565b610c28565b8380fd5b80610cfa610d6f9261031b565b38610ba3565b610d7d6106c0565b610b9e56fea164736f6c634300080d000a",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b6000803560e01c918263075461721461009657505080635360e5d41461008d578063ac52edfd14610084578063d33ed8b81461007b578063e4e22e1e146100725763f565d63d14610065575b38600080fd5b61006d610501565b61005f565b5061006d61040e565b5061006d61027b565b5061006d610186565b5061006d610116565b3461010257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101025760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b600091031261011157565b600080fd5b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101115760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115760206040517fac52edfd000000000000000000000000000000000000000000000000000000008152600435600482015273ffffffffffffffffffffffffffffffffffffffff8282602481847f0000000000000000000000000000000000000000000000000000000000000000165afa91821561026e575b60009261023f575b5060405191168152f35b610260919250833d8111610267575b610258818361033c565b8101906106eb565b9038610235565b503d61024e565b6102766106c0565b61022d565b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161032f57604052565b6103376102eb565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761032f57604052565b81601f820112156101115780359067ffffffffffffffff82116103f3575b604051926103d160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116018561033c565b8284526020838301011161011157816000926020809301838601378301015290565b6103fb6102eb565b61039b565b908160a09103126101115790565b5034610111576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101115767ffffffffffffffff6004803582811161011157610460903690830161037d565b60243583811161011157610477903690840161037d565b6044358481116101115761048e903690850161037d565b90606435858111610111576104a6903690860161037d565b9260e435958611610111576104c46104d6956104fd97369101610400565b9360c4359360a4359360843593610703565b60405173ffffffffffffffffffffffffffffffffffffffff90911681529081906020820190565b0390f35b50346101115760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011157602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b604051906040820182811067ffffffffffffffff8211176105bc575b604052600882527f53484f5754494d450000000000000000000000000000000000000000000000006020830152565b6105c46102eb565b61058d565b90816020910312610111575190565b91908251928382526000905b84821061062f5750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610622575b0116010190565b600085828601015261061b565b906020908180828501015190828601015201906105e4565b9361068c6106af9461067e610100989561067061069a969d9c9b9d610120808c528b01906105d8565b9089820360208b01526105d8565b9087820360408901526105d8565b9085820360608701526105d8565b906000608085015283820360a08501526105d8565b94600060c083015260e08201520152565b506040513d6000823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff81160361011157565b908160209103126101115751610700816106cd565b90565b916107ea9397969491959261071788610995565b5073ffffffffffffffffffffffffffffffffffffffff98897f0000000000000000000000000000000000000000000000000000000000000000169261079961075d610571565b9660405196879485947f10c3009e00000000000000000000000000000000000000000000000000000000865260209d8e9b8c9960048901610647565b03816000855af191821561086e575b60009261083f575b5060405180809581947fac52edfd000000000000000000000000000000000000000000000000000000008352600483019190602083019252565b03915afa928315610832575b60009361080f575b5050819261080b92610aef565b1690565b61080b9350908161082b92903d1061026757610258818361033c565b91386107fe565b61083a6106c0565b6107f6565b610860919250833d8511610867575b610858818361033c565b8101906105c9565b90386107b0565b503d61084e565b6108766106c0565b6107a8565b35610700816106cd565b90816020910312610111575180151581036101115790565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b906020825280356108ec816106cd565b73ffffffffffffffffffffffffffffffffffffffff80911660208401526020820135610917816106cd565b166040830152604081013560608301526060810135608083015260808101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112156101115781019081359067ffffffffffffffff8211610111578136031261011157602060c08460a08061070097015201920161089d565b6109a16020820161087b565b9073ffffffffffffffffffffffffffffffffffffffff913083821603610aa65750610a006000926020926040519485809481937f82059300000000000000000000000000000000000000000000000000000000008352600483016108dc565b03927f0000000000000000000000000000000000000000000000000000000000000000165af1908115610a99575b600091610a6b575b5015610a4157600190565b60046040517f439cc0cd000000000000000000000000000000000000000000000000000000008152fd5b610a8c915060203d8111610a92575b610a84818361033c565b810190610885565b38610a36565b503d610a7a565b610aa16106c0565b610a2e565b6040517fcc49271c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602490fd5b9190610afa9061087b565b73ffffffffffffffffffffffffffffffffffffffff80807f000000000000000000000000000000000000000000000000000000000000000016941692843b15610111576040517f26d79f7c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602481019190915260009485908290604490829084905af18015610d75575b610d62575b50823b15610d5e576040517f29ec16dd0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000009190911673ffffffffffffffffffffffffffffffffffffffff16600482015260016024820152838160448183875af18015610d51575b610d3e575b506040517fa66ff0af00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260208160248187875af18015610d31575b610d13575b50813b15610d0f576040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015291908290602490829084905af18015610d02575b610ced5750565b80610cfa610d009261031b565b80610106565b565b610d0a6106c0565b610ce6565b8280fd5b610d2a9060203d811161086757610858818361033c565b5038610c86565b610d396106c0565b610c81565b80610cfa610d4b9261031b565b38610c2d565b610d596106c0565b610c28565b8380fd5b80610cfa610d6f9261031b565b38610ba3565b610d7d6106c0565b610b9e56fea164736f6c634300080d000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createEdition(string,string,string,string,uint256,uint256,uint256,((address,address,uint256,uint256),bytes))": {
        "details": "we expect the signed attestation's context to correspond to this contract's addresswe expect the signed attestation's beneficiary to be the edition's creator",
        "params": {
          "animationUrl": "Metadata: Animation url (optional) of the edition entry",
          "claimWindowDurationSeconds": "How long after deployment the edition can be claimed, in seconds",
          "description": "Metadata: Description of the edition entry",
          "editionSize": "Total size of the edition (number of possible editions)",
          "imageUrl": "Metadata: Image url (semi-required) of the edition entry",
          "name": "Name of the edition contract",
          "royaltyBPS": "BPS amount of royalty",
          "signedAttestation": "the attestation to verify along with a corresponding signature"
        },
        "returns": {
          "_0": "the address of the created edition"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createEdition(string,string,string,string,uint256,uint256,uint256,((address,address,uint256,uint256),bytes))": {
        "notice": "Creates a new edition contract as a factory with a deterministic address Important: None of these fields (except the Url fields with the same hash) can be changed after calling"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}