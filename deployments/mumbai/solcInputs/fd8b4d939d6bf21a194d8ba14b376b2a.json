{
  "language": "Solidity",
  "sources": {
    "src/ERC2981Royalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\nabstract contract ERC2981Royalties is IERC2981 {\n    struct Royalty {\n        address recipient;\n        uint256 value; // as a % unit, from 0 - 10000 (2 extra 0s) for eg 25% is 2500\n    }\n\n    mapping(uint256 => Royalty) internal _royalties; // tokenId => royalty\n\n    function _setTokenRoyalty(\n        uint256 id,\n        address recipient,\n        uint256 value\n    ) internal {\n        require(value <= 100_00, \"ERC2981Royalties: value too high\");\n        _royalties[id] = Royalty(recipient, value);\n    }\n\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        Royalty memory royalty = _royalties[_tokenId];\n        return (royalty.recipient, (_salePrice * royalty.value) / 100_00);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/ShowtimeMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"./utils/AccessProtected.sol\";\nimport \"./utils/BaseRelayRecipient.sol\";\nimport \"./ERC2981Royalties.sol\";\n\ncontract ShowtimeMT is ERC1155Burnable, ERC2981Royalties, AccessProtected, BaseRelayRecipient {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n    string public baseURI = \"https://gateway.pinata.cloud/ipfs/\";\n    mapping(uint256 => string) private _hashes;\n\n    constructor() ERC1155(\"\") {}\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, IERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * Mint + Issue Token\n     *\n     * @param recipient - Token will be issued to recipient\n     * @param amount - amount of tokens to mint\n     * @param hash - IPFS hash\n     * @param data - additional data\n     * @param royaltyRecipient - royalty receiver address\n     * @param royaltyPercent - percentage of royalty\n     */\n    function issueToken(\n        address recipient,\n        uint256 amount,\n        string memory hash,\n        bytes memory data,\n        address royaltyRecipient,\n        uint256 royaltyPercent\n    ) public onlyMinter returns (uint256) {\n        _tokenIds.increment();\n        uint256 newTokenId = _tokenIds.current();\n        _hashes[newTokenId] = hash;\n        _mint(recipient, newTokenId, amount, data);\n        if (royaltyPercent > 0) {\n            _setTokenRoyalty(newTokenId, royaltyRecipient, royaltyPercent);\n        }\n        return newTokenId;\n    }\n\n    /**\n     * Mint + Issue Token Batch\n     *\n     * @param recipient - Token will be issued to recipient\n     * @param amounts - amounts of each token to mint\n     * @param hashes - IPFS hashes\n     * @param data - additional data\n     * @param royaltyRecipients - royalty receiver addresses\n     * @param royaltyPercents - percentages of royalty\n     */\n    function issueTokenBatch(\n        address recipient,\n        uint256[] memory amounts,\n        string[] memory hashes,\n        bytes memory data,\n        address[] memory royaltyRecipients,\n        uint256[] memory royaltyPercents\n    ) public onlyMinter returns (uint256[] memory) {\n        require(\n            amounts.length == hashes.length &&\n                royaltyRecipients.length == royaltyPercents.length &&\n                amounts.length == royaltyRecipients.length,\n            \"array length mismatch\"\n        );\n        uint256[] memory ids = new uint256[](amounts.length);\n        for (uint256 i = 0; i < amounts.length; i++) {\n            _tokenIds.increment();\n            uint256 newTokenId = _tokenIds.current();\n            _hashes[newTokenId] = hashes[i];\n            ids[i] = newTokenId;\n            if (royaltyPercents[i] > 0) {\n                _setTokenRoyalty(newTokenId, royaltyRecipients[i], royaltyPercents[i]);\n            }\n        }\n        _mintBatch(recipient, ids, amounts, data);\n        return ids;\n    }\n\n    /**\n     * Set Base URI\n     *\n     * @param _baseURI - Base URI\n     */\n    function setBaseURI(string calldata _baseURI) external onlyOwner {\n        baseURI = _baseURI;\n    }\n\n    /**\n     * Get Token URI\n     *\n     * @param tokenId - Token ID\n     */\n    function uri(uint256 tokenId) public view override returns (string memory) {\n        return string(abi.encodePacked(baseURI, _hashes[tokenId]));\n    }\n\n    /**\n     * Set Trusted Forwarder\n     *\n     * @param _trustedForwarder - Trusted Forwarder address\n     */\n    function setTrustedForwarder(address _trustedForwarder) external onlyAdmin {\n        trustedForwarder = _trustedForwarder;\n    }\n\n    /**\n     * returns the message sender\n     */\n    function _msgSender() internal view override(Context, BaseRelayRecipient) returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "src/utils/AccessProtected.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nabstract contract AccessProtected is Context, Ownable {\n    mapping(address => bool) private _admins; // user address => admin? mapping\n    mapping(address => bool) private _minters; // user address => minter? mapping\n    bool public publicMinting;\n\n    event UserAccessSet(address _user, string _access, bool _enabled);\n\n    /**\n     * @notice Set Admin Access\n     *\n     * @param admin - Address of Minter\n     * @param enabled - Enable/Disable Admin Access\n     */\n    function setAdmin(address admin, bool enabled) external onlyOwner {\n        require(admin != address(0), \"Invalid Admin Address\");\n        _admins[admin] = enabled;\n        emit UserAccessSet(admin, \"ADMIN\", enabled);\n    }\n\n    /**\n     * @notice Set Minter Access\n     *\n     * @param minter - Address of Minter\n     * @param enabled - Enable/Disable Admin Access\n     */\n    function setMinter(address minter, bool enabled) public onlyAdmin {\n        require(minter != address(0), \"Invalid Minter Address\");\n        _minters[minter] = enabled;\n        emit UserAccessSet(minter, \"MINTER\", enabled);\n    }\n\n    /**\n     * @notice Set Minter Access\n     *\n     * @param minters - Address of Minters\n     * @param enabled - Enable/Disable Admin Access\n     */\n    function setMinters(address[] calldata minters, bool enabled) external onlyAdmin {\n        for (uint256 i = 0; i < minters.length; i++) {\n            address minter = minters[i];\n            setMinter(minter, enabled);\n        }\n    }\n\n    /**\n     * @notice Enable/Disable public Minting\n     *\n     * @param enabled - Enable/Disable\n     */\n    function setPublicMinting(bool enabled) external onlyAdmin {\n        publicMinting = enabled;\n        emit UserAccessSet(address(0), \"MINTER\", enabled);\n    }\n\n    /**\n     * @notice Check Admin Access\n     *\n     * @param admin - Address of Admin\n     * @return whether minter has access\n     */\n    function isAdmin(address admin) public view returns (bool) {\n        return _admins[admin];\n    }\n\n    /**\n     * @notice Check Minter Access\n     *\n     * @param minter - Address of minter\n     * @return whether minter has access\n     */\n    function isMinter(address minter) public view returns (bool) {\n        return _minters[minter];\n    }\n\n    /**\n     * Throws if called by any account other than the Admin/Owner.\n     */\n    modifier onlyAdmin() {\n        require(_admins[_msgSender()] || _msgSender() == owner(), \"AccessProtected: caller is not admin\");\n        _;\n    }\n\n    /**\n     * Throws if called by any account other than the Minter/Admin/Owner.\n     */\n    modifier onlyMinter() {\n        require(\n            publicMinting || _minters[_msgSender()] || _admins[_msgSender()] || _msgSender() == owner(),\n            \"AccessProtected: caller is not minter\"\n        );\n        _;\n    }\n}\n"
    },
    "src/utils/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity =0.8.7;\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nabstract contract BaseRelayRecipient {\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address public trustedForwarder;\n\n    /*\n     * require a function to be called through GSN only\n     */\n    modifier trustedForwarderOnly() {\n        require(msg.sender == address(trustedForwarder), \"Function can only be called through the trusted Forwarder\");\n        _;\n    }\n\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal view virtual returns (address ret) {\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "src/test/ShowtimeV1Market.t.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"./Hevm.sol\";\nimport \"./TestToken.sol\";\nimport \"../../lib/ds-test/src/test.sol\";\nimport \"../ShowtimeMT.sol\";\nimport \"../ShowtimeV1Market.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\n\ncontract User is ERC1155Holder {}\n\ncontract ShowtimeV1MarketTest is DSTest, ERC1155Holder {\n    uint256 constant INITIAL_NFT_SUPPLY = 10;\n    address constant BURN_ADDRESS = address(0xdEaD);\n    address constant FORWARDER_ADDRESS = BURN_ADDRESS;\n\n    User internal bob;\n    User internal alice;\n    TestToken internal token;\n    ShowtimeMT internal showtimeNFT;\n    ShowtimeV1Market internal market;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    uint256 tokenId0PctRoyalty;\n    uint256 tokenId10PctRoyaltyToAlice;\n    uint256 tokenId100PctRoyaltyToAlice;\n    uint256 tokenId10PctRoyaltyToZeroAddress;\n\n    event ListingCreated(uint256 indexed listingId, address indexed seller, uint256 indexed tokenId);\n    event ListingDeleted(uint256 indexed listingId, address indexed seller);\n    event SaleCompleted(\n        uint256 indexed listingId,\n        address indexed seller,\n        address indexed buyer,\n        address receiver,\n        uint256 quantity\n    );\n    event RoyaltyPaid(address indexed receiver, IERC20 currency, uint256 amount);\n    event MaxRoyaltiesUpdated(address indexed account, uint256 maxRoyaltiesBasisPoints);\n    event RoyaltiesEnabledChanged(address indexed account, bool royaltiesEnabled);\n    event AcceptedCurrencyChanged(address indexed account, address currency, bool accepted);\n\n    function setUp() public {\n        alice = new User();\n        bob = new User();\n\n        // mint NFTs\n        showtimeNFT = new ShowtimeMT();\n        tokenId0PctRoyalty = showtimeNFT.issueToken(\n            address(alice),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(0),\n            0\n        );\n        tokenId10PctRoyaltyToAlice = showtimeNFT.issueToken(\n            address(this),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(alice),\n            10_00\n        ); // 10% royalty\n        tokenId10PctRoyaltyToZeroAddress = showtimeNFT.issueToken(\n            address(this),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(0),\n            10_00\n        ); // 10% royalty\n        tokenId100PctRoyaltyToAlice = showtimeNFT.issueToken(\n            address(this),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(alice),\n            100_00\n        ); // 100% royalty\n\n        // mint erc20s to bob\n        token = new TestToken();\n        hevm.prank(address(bob));\n        token.mint(2500);\n\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(token);\n\n        // approvals\n        market = new ShowtimeV1Market(address(showtimeNFT), FORWARDER_ADDRESS, tokens);\n        showtimeNFT.setApprovalForAll(address(market), true);\n        hevm.prank(address(alice));\n        showtimeNFT.setApprovalForAll(address(market), true);\n        hevm.prank(address(bob));\n        token.approve(address(market), 2500);\n    }\n\n    // it doesn't allow to deploy with incorrect constructor arguments\n    function testIncorrectConstructorArguments() public {\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(token);\n\n        try new ShowtimeV1Market(address(0x1), FORWARDER_ADDRESS, tokens) {\n            emit log(\"Call did not revert\");\n            fail();\n        } catch (bytes memory revertMsg) {\n            assertEq(bytes32(revertMsg), bytes32(abi.encodeWithSignature(\"NotContractAddress(address)\", address(0x1))));\n        }\n\n        try new ShowtimeV1Market(address(showtimeNFT), address(0), tokens) {\n            emit log(\"Call did not revert\");\n            fail();\n        } catch (bytes memory revertMsg) {\n            assertEq(bytes32(revertMsg), bytes32(abi.encodeWithSignature(\"NullAddress()\")));\n        }\n\n        tokens[0] = address(0);\n\n        try new ShowtimeV1Market(address(showtimeNFT), FORWARDER_ADDRESS, tokens) {\n            emit log(\"Call did not revert\");\n            fail();\n        } catch (bytes memory revertMsg) {\n            assertEq(bytes32(revertMsg), bytes32(abi.encodeWithSignature(\"NotContractAddress(address)\", address(0x1))));\n        }\n    }\n\n    // it deploys with correct constructor arguments\"\n    function testCorrectConstructorArguments() public {\n        assertEq(address(market.nft()), address(showtimeNFT));\n        assertTrue(market.acceptedCurrencies(address(token)));\n        assertTrue(market.royaltiesEnabled());\n    }\n\n    // it creates a new listing\n    function testCanCreateListing() public {\n        hevm.expectEmit(true, true, true, true);\n        emit ListingCreated(0, address(alice), 1);\n\n        // alice creates a sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // alice still owns the NFTs\n        assertEq(showtimeNFT.balanceOf(address(alice), 1), INITIAL_NFT_SUPPLY);\n\n        (uint256 tokenId, uint256 quantity, uint256 price, IERC20 currency, address seller) = market.listings(\n            listingId\n        );\n\n        assertEq(tokenId, 1);\n        assertEq(quantity, 5);\n        assertEq(price, 500);\n        assertEq(address(currency), address(token));\n        assertEq(seller, address(alice));\n    }\n\n    // it ensures that the seller owns the listed tokens\n    function testSellerOwnsTokens() public {\n        // alice does not own token 2\n        assertEq(showtimeNFT.balanceOf(address(alice), 2), 0);\n\n        hevm.expectRevert(abi.encodeWithSignature(\"SellerDoesNotOwnToken(uint256,uint256)\", 2, 5));\n        hevm.prank(address(alice));\n        market.createSale(2, 5, 500, address(token));\n    }\n\n    // it ensures that the listing is in an accepted currency\n    function testListingUsesAcceptedCurrenciesOnly() public {\n        hevm.expectRevert(abi.encodeWithSignature(\"CurrencyNotAccepted(address)\", address(showtimeNFT)));\n\n        hevm.prank(address(alice));\n        market.createSale(1, 5, 500, address(showtimeNFT));\n    }\n\n    // it ensures that the seller owns enough of the listed tokens\n    function testSellerOwnsListedTokens() public {\n        // alice owns INITIAL_NFT_SUPPLY of token 1\n        assertEq(showtimeNFT.balanceOf(address(alice), 1), INITIAL_NFT_SUPPLY);\n\n        hevm.expectRevert(abi.encodeWithSignature(\"SellerDoesNotOwnToken(uint256,uint256)\", 1, INITIAL_NFT_SUPPLY + 1));\n\n        hevm.prank(address(alice));\n\n        market.createSale(1, INITIAL_NFT_SUPPLY + 1, 500, address(token));\n    }\n\n    // it ensures that request from the buyer lines up with the listing\n    function testBuyerRequestMatchesListing() public {\n        // alice creates a sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 10, address(token));\n\n        hevm.startPrank(address(bob));\n\n        hevm.expectRevert(abi.encodeWithSignature(\"TokenIdMismatch(uint256)\", 1));\n        market.buy(listingId, 424242424242, 2, 10, address(token), address(bob));\n\n        hevm.expectRevert(abi.encodeWithSignature(\"PriceMismatch(uint256)\", 10));\n        market.buy(listingId, 1, 2, 424242424242, address(token), address(bob));\n\n        hevm.expectRevert(abi.encodeWithSignature(\"CurrencyMismatch(address)\", address(token)));\n        market.buy(listingId, 1, 2, 10, address(bob), address(bob));\n    }\n\n    // it creates a new listing with price 0\n    function testCreateFreeListing() public {\n        // alice creates a sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 0, address(token));\n\n        (uint256 tokenId, , , , address seller) = market.listings(listingId);\n\n        assertEq(listingId, 0);\n        assertEq(seller, address(alice));\n        assertEq(tokenId, 1);\n\n        uint256 bobsTokenBalanceBefore = token.balanceOf(address(bob));\n\n        hevm.prank(address(bob));\n        market.buy(listingId, 1, 2, 0, address(token), address(bob));\n\n        assertEq(showtimeNFT.balanceOf(address(bob), tokenId), 2);\n\n        uint256 bobsTokenBalanceAfter = token.balanceOf(address(bob));\n        assertEq(bobsTokenBalanceBefore, bobsTokenBalanceAfter);\n    }\n\n    // sellers can *not* buy from themselves\n    function testSellersCannotSelfBuy() public {\n        // alice creates a sale\n        hevm.startPrank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        (uint256 tokenId, , , , address seller) = market.listings(listingId);\n\n        // the listing exists and alice is the seller\n        assertEq(seller, address(alice));\n\n        // alice still owns the NFTs\n        assertEq(showtimeNFT.balanceOf(address(alice), tokenId), INITIAL_NFT_SUPPLY);\n\n        // alice can not initially complete the sale because she doesn't have the tokens to buy\n        hevm.expectRevert(abi.encodeWithSignature(\"CanNotSellToSelf()\"));\n        market.buy(listingId, 1, 5, 500, address(token), address(alice));\n    }\n\n    // it has enough tokens to buy\n    function testChecksBuyerCanPay() public {\n        // alice creates the sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob burns his tokens\n        hevm.startPrank(address(bob));\n        token.transfer(BURN_ADDRESS, token.balanceOf(address(bob)));\n\n        // bob has no tokens now\n        assertEq(token.balanceOf(address(bob)), 0);\n\n        // bob can no longer buy\n        hevm.expectRevert(\"ERC20: transfer amount exceeds balance\");\n        market.buy(listingId, 1, 5, 500, address(token), address(bob));\n    }\n\n    // it cannot cancel other seller's sale\n    function testCannotCancelSomeonesSale() public {\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob cannot cancel\n        hevm.prank(address(bob));\n\n        hevm.expectRevert(abi.encodeWithSignature(\"NotListingSeller(uint256)\", listingId));\n        market.cancelSale(listingId);\n    }\n\n    // it cannot cancel non existent sale\n    function testCannotCancelNonExistentSale() public {\n        hevm.expectRevert(abi.encodeWithSignature(\"ListingDoesNotExist(uint256)\", 42));\n\n        market.cancelSale(42);\n    }\n\n    // it allows seller to cancel their sale\n    function testSellerCanCancelSale() public {\n        // alice creates a sale\n        hevm.startPrank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // alice cancels her sale\n        hevm.expectEmit(true, true, true, true);\n        emit ListingDeleted(listingId, address(alice));\n        market.cancelSale(listingId);\n\n        (uint256 tokenId, uint256 quantity, uint256 price, IERC20 currency, address seller) = market.listings(\n            listingId\n        );\n\n        assertEq(seller, address(0));\n        assertEq(tokenId, 0);\n        assertEq(quantity, 0);\n        assertEq(price, 0);\n        assertEq(address(currency), address(0));\n    }\n\n    // it cannot buy a cancelled sale\n    function testCannotBuyCancelledSale() public {\n        hevm.startPrank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token)); // alice create\n        market.cancelSale(listingId); // alice cancel\n        hevm.stopPrank();\n\n        hevm.prank(address(bob));\n        hevm.expectRevert(abi.encodeWithSignature(\"ListingDoesNotExist(uint256)\", listingId));\n        market.buy(listingId, 1, 5, 500, address(token), address(bob));\n    }\n\n    // it completes a valid buy\n    function testCanBuy() public {\n        // alice puts up 5 NFTs for sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob buys them\n        hevm.prank(address(bob));\n        hevm.expectEmit(true, true, true, true);\n        emit SaleCompleted(listingId, address(alice), address(bob), address(bob), 5);\n        market.buy(listingId, 1, 5, 500, address(token), address(bob));\n\n        (, , , , address seller) = market.listings(listingId);\n        assertEq(seller, address(0));\n        assertEq(showtimeNFT.balanceOf(address(alice), 1), 5); // 10 - 5\n        assertEq(showtimeNFT.balanceOf(address(bob), 1), 5); // 0 + 5\n    }\n\n    // it can not buy for address 0\n    function testCannotBuyForBurnAddress() public {\n        // alice creates a sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        hevm.expectRevert(abi.encodeWithSignature(\"NullAddress()\"));\n        market.buy(listingId, 1, 5, 500, address(token), address(0));\n    }\n\n    // it allows buying for another user\n    function testCanBuyForSomeoneElse() public {\n        // alice creates a sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob buys the sale for another user\n        hevm.prank(address(bob));\n        hevm.expectEmit(true, true, true, true);\n        emit SaleCompleted(listingId, address(alice), address(bob), address(this), 5);\n        market.buy(listingId, 1, 5, 500, address(token), address(this));\n\n        (, , , , address seller) = market.listings(listingId);\n        assertEq(seller, address(0));\n\n        assertEq(showtimeNFT.balanceOf(address(alice), 1), 5); // 10 - 5\n        assertEq(showtimeNFT.balanceOf(address(this), 1), 5); // 0 + 5\n    }\n\n    // it buys specific quantity of tokenIds\n    function testBuySpecificQuantities() public {\n        // alice creates a sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob buys the sale: 2 tokens only out of 5\n        hevm.startPrank(address(bob));\n        hevm.expectEmit(true, true, true, true);\n        emit SaleCompleted(listingId, address(alice), address(bob), address(bob), 2);\n        market.buy(listingId, 1, 2, 500, address(token), address(bob));\n\n        // there should still be 3 left available\n        hevm.expectEmit(true, true, true, true);\n        emit SaleCompleted(listingId, address(alice), address(bob), address(bob), 3);\n        market.buy(listingId, 1, 3, 500, address(token), address(bob));\n    }\n\n    // it throws on attempting to buy 0\"\n    function testCannotBuy0Tokens() public {\n        // alice lists 5 NFTs for sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob tries to buy 0 NFTs\n        hevm.expectRevert(abi.encodeWithSignature(\"NullQuantity()\"));\n        market.buy(listingId, 1, 0, 500, address(token), address(bob));\n    }\n\n    // it throws on attempting to buy more than available quantity\n    function testCannotBuyMoreThanListed() public {\n        // alice lists 5 NFTs for sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob tries to buy 6 NFTs\n        hevm.prank(address(bob));\n        hevm.expectRevert(abi.encodeWithSignature(\"AvailableQuantityInsuficient(uint256)\", 5));\n        market.buy(listingId, 1, 6, 500, address(token), address(bob));\n    }\n\n    // it throws on attempting to buy listed quantity that is no longer available\n    function testCannotBuyMoreThanAvailable() public {\n        // alice creates a sale\n        hevm.startPrank(address(alice));\n        uint256 listingId = market.createSale(1, INITIAL_NFT_SUPPLY, 500, address(token));\n\n        // then she burns the NFTs except 1\n        showtimeNFT.burn(address(alice), 1, INITIAL_NFT_SUPPLY - 1);\n        hevm.stopPrank();\n\n        // bob tries to buy 2\n        hevm.prank(address(bob));\n        hevm.expectRevert(abi.encodeWithSignature(\"AvailableQuantityInsuficient(uint256)\", 1));\n\n        market.buy(listingId, 1, 2, 500, address(token), address(bob));\n\n        uint256 actuallyAvailable = market.availableForSale(listingId);\n        assertEq(actuallyAvailable, 1);\n\n        // the listing is unchanged\n        (, uint256 quantity, , , ) = market.listings(listingId);\n        assertEq(quantity, INITIAL_NFT_SUPPLY);\n    }\n\n    // it completes a partial sale when required <= available < listed\n    function testCanCompletePartialSale() public {\n        // alice lists 5 NFTs for sale\n        hevm.startPrank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // then she burns 8 NFTs\n        showtimeNFT.burn(address(alice), 1, 8);\n\n        // there are still 2 available for sale\n        assertEq(market.availableForSale(listingId), 2);\n\n        hevm.stopPrank();\n\n        // bob can buy 1\n        hevm.startPrank(address(bob));\n        market.buy(listingId, 1, 1, 500, address(token), address(bob));\n\n        // there is still 1 available for sale\n        assertEq(market.availableForSale(listingId), 1);\n\n        // the listing has been updated to reflect the available quantity\n        (, uint256 quantity, , , ) = market.listings(listingId);\n        assertEq(quantity, 1);\n\n        // bob buys the last one\n        market.buy(listingId, 1, 1, 500, address(token), address(bob));\n\n        // the listing no longer exists\n        (, , , , address seller) = market.listings(listingId);\n        assertEq(seller, address(0));\n    }\n\n    // it completes a sale which has 10% royalties associated with it\n    function testCanCompleteSaleWithRoyalties() public {\n        // admin puts his tokenId on sale which has 10% royalty to alice\n        market.createSale(tokenId10PctRoyaltyToAlice, 5, 500, address(token));\n        assertEq(token.balanceOf(address(alice)), 0);\n\n        hevm.prank(address(bob));\n        hevm.expectEmit(true, true, true, true);\n        emit RoyaltyPaid(address(alice), token, 250);\n        market.buy(0, tokenId10PctRoyaltyToAlice, 5, 500, address(token), address(bob));\n\n        assertEq(token.balanceOf(address(alice)), 250); // received her 10%\n        assertEq(token.balanceOf(address(this)), 2250); // price - royalty\n    }\n\n    // it completes a sale which has 10% royalties to the zero address associated with it\n    function testCanCompleteSaleWithZeroAddressRoyalties() public {\n        // admin puts his tokenId on sale which has 10% royalty to the zero address\n        market.createSale(tokenId10PctRoyaltyToZeroAddress, 5, 500, address(token));\n        assertEq(token.balanceOf(address(alice)), 0);\n\n        // we ignore the royalty, everything goes to the seller\n        hevm.prank(address(bob));\n        market.buy(0, tokenId10PctRoyaltyToZeroAddress, 5, 500, address(token), address(bob));\n        assertEq(token.balanceOf(address(this)), 2500); // price\n    }\n\n    // it completes a sale which has 100% royalties associated with it, but royalties are capped at 50%\n    function testCanCompleteSaleWithCappedRoyalties() public {\n        // admin puts 5 of their tokenId on sale which has 100% royalty to alice\n        market.createSale(tokenId100PctRoyaltyToAlice, 5, 500, address(token));\n        assertEq(token.balanceOf(address(alice)), 0);\n\n        // bob buys 2 of them\n        hevm.prank(address(bob));\n        hevm.expectEmit(true, true, true, true);\n        emit RoyaltyPaid(address(alice), token, 500);\n        market.buy(0, tokenId100PctRoyaltyToAlice, 2, 500, address(token), address(bob));\n\n        assertEq(token.balanceOf(address(alice)), 500); // capped at 50%!\n        assertEq(token.balanceOf(address(this)), 500); // price - royalty\n    }\n\n    // it permits only owner to update max royalties\n    function testOnlyOwnerCanUpdateRoyaltyCap() public {\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n\n        hevm.prank(address(bob));\n        market.setMaxRoyalties(100);\n    }\n\n    // it does not permit to set maxRoyalties above 100%\n    function testCannotCapRoyaltiesOver100Percent() public {\n        hevm.expectRevert(abi.encodeWithSignature(\"InvalidMaxRoyalties()\"));\n\n        market.setMaxRoyalties(200_00);\n    }\n\n    // it completes a sale which has 100% royalties associated with it when we lift the royalties cap\n    function testCanCompleteAFullRoyaltySaleIfNoCap() public {\n        // admin puts 5 of their tokenId on sale which has 100% royalty to alice\n        market.createSale(tokenId100PctRoyaltyToAlice, 5, 500, address(token));\n\n        // then we set the max royalties to 100%\n        hevm.expectEmit(true, true, true, true);\n        emit MaxRoyaltiesUpdated(address(this), 100_00);\n        market.setMaxRoyalties(100_00);\n\n        uint256 aliceBalanceBefore = token.balanceOf(address(alice));\n        uint256 adminBalanceBefore = token.balanceOf(address(this));\n\n        // bob buys 2 of them\n        hevm.prank(address(bob));\n        hevm.expectEmit(true, true, true, true);\n        emit RoyaltyPaid(address(alice), token, 1000);\n        market.buy(0, tokenId100PctRoyaltyToAlice, 2, 500, address(token), address(bob));\n\n        assertEq(token.balanceOf(address(alice)), aliceBalanceBefore + 1000); // alice does get 100% of the sale\n        assertEq(token.balanceOf(address(this)), adminBalanceBefore); // and admin gets nothing\n    }\n\n    // it no royalties are paid when we set the royalties cap at 0%\n    function testCanDisableRoyaltiesBySettingCapTo0() public {\n        // admin puts 5 of their tokenId on sale which has 100% royalty to alice\n        market.createSale(tokenId100PctRoyaltyToAlice, 5, 500, address(token));\n\n        // then we set the max royalties to 0%\n        market.setMaxRoyalties(0);\n\n        uint256 aliceBalanceBefore = token.balanceOf(address(alice));\n        uint256 adminBalanceBefore = token.balanceOf(address(this));\n\n        // bob buys 2 of them\n        hevm.prank(address(bob));\n        market.buy(0, tokenId100PctRoyaltyToAlice, 2, 500, address(token), address(bob));\n\n        assertEq(token.balanceOf(address(alice)), aliceBalanceBefore); // alice gets no royalties\n        assertEq(token.balanceOf(address(this)), adminBalanceBefore + 1000); // the seller gets 100% of the proceeds\n    }\n\n    // it permits only owner to turn off royalty on the contract\n    function testOnlyOwnerCanDisableRoyalties() public {\n        hevm.prank(address(alice));\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        market.setRoyaltiesEnabled(false);\n        assertTrue(market.royaltiesEnabled());\n\n        hevm.expectEmit(true, true, true, true);\n        emit RoyaltiesEnabledChanged(address(this), false);\n        market.setRoyaltiesEnabled(false);\n\n        assertTrue(!market.royaltiesEnabled());\n    }\n\n    // it pays no royalty when royalty is turned off\n    function testNoRoyaltiesArePaidWhenDisabled() public {\n        market.setRoyaltiesEnabled(false);\n        market.createSale(2, 5, 500, address(token));\n        assertEq(token.balanceOf(address(alice)), 0);\n\n        hevm.prank(address(bob));\n        market.buy(0, 2, 5, 500, address(token), address(bob));\n\n        assertEq(token.balanceOf(address(alice)), 0); // received no royalty\n        assertEq(token.balanceOf(address(this)), 2500);\n    }\n\n    // it permits only owner to pause and unpause the contract\n    function testOnlyOwnerCanPauseAndUnpause() public {\n        assertTrue(!market.paused());\n\n        hevm.prank(address(alice));\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        market.pause();\n        assertTrue(!market.paused());\n\n        market.pause();\n        assertTrue(market.paused());\n\n        hevm.prank(address(alice));\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        market.unpause();\n        assertTrue(market.paused());\n\n        market.unpause();\n        assertTrue(!market.paused());\n    }\n\n    // it can not create a listing when paused\n    function testCannotCreateListingWhenPaused() public {\n        market.pause();\n\n        hevm.expectRevert(\"Pausable: paused\");\n        hevm.prank(address(alice));\n        market.createSale(1, 5, 500, address(token));\n    }\n\n    // it can not buy when paused\n    function testCannotBuyWhenPaused() public {\n        hevm.prank(address(alice));\n        market.createSale(1, 5, 500, address(token));\n\n        market.pause();\n\n        hevm.prank(address(bob));\n        hevm.expectRevert(\"Pausable: paused\");\n        market.buy(0, 1, 5, 500, address(token), address(bob));\n\n        market.unpause();\n\n        // succeeds after unpausing\n        hevm.prank(address(bob));\n        market.buy(0, 1, 5, 500, address(token), address(bob));\n    }\n\n    // it can still cancel a listing when paused\n    function testCanCancelWhenPaused() public {\n        hevm.prank(address(alice));\n        market.createSale(1, 5, 500, address(token));\n\n        market.pause();\n\n        hevm.prank(address(alice));\n        market.cancelSale(0);\n    }\n\n    // it permits only owner to add accepted currencies\n    function testOnlyOwnerCanAddCurrencies() public {\n        assertTrue(!market.acceptedCurrencies(address(showtimeNFT)));\n\n        hevm.prank(address(alice));\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        market.setAcceptedCurrency(address(showtimeNFT), true);\n\n        hevm.expectEmit(true, true, true, true);\n        emit AcceptedCurrencyChanged(address(this), address(showtimeNFT), true);\n        market.setAcceptedCurrency(address(showtimeNFT), true);\n\n        assertTrue(market.acceptedCurrencies(address(showtimeNFT)));\n    }\n\n    // it permits only owner to remove accepted currency\n    function testOnlyOwnerCanRemoveCurrencies() public {\n        market.setAcceptedCurrency(address(showtimeNFT), true);\n\n        hevm.prank(address(alice));\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        market.setAcceptedCurrency(address(showtimeNFT), false);\n\n        hevm.expectEmit(true, true, true, true);\n        emit AcceptedCurrencyChanged(address(this), address(showtimeNFT), false);\n        market.setAcceptedCurrency(address(showtimeNFT), false);\n\n        assertTrue(!market.acceptedCurrencies(address(showtimeNFT)));\n    }\n}\n"
    },
    "src/test/Hevm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\ninterface Hevm {\n    // Set block.timestamp (newTimestamp)\n    function warp(uint256) external;\n\n    // Set block.height (newHeight)\n    function roll(uint256) external;\n\n    // Set block.basefee (newBasefee)\n    function fee(uint256) external;\n\n    // Loads a storage slot from an address (who, slot)\n    function load(address, bytes32) external returns (bytes32);\n\n    // Stores a value to an address' storage slot, (who, slot, value)\n    function store(\n        address,\n        bytes32,\n        bytes32\n    ) external;\n\n    // Signs data, (privateKey, digest) => (r, v, s)\n    function sign(uint256, bytes32)\n        external\n        returns (\n            uint8,\n            bytes32,\n            bytes32\n        );\n\n    // Gets address for a given private key, (privateKey) => (address)\n    function addr(uint256) external returns (address);\n\n    // Performs a foreign function call via terminal, (stringInputs) => (result)\n    function ffi(string[] calldata) external returns (bytes memory);\n\n    // Sets the *next* call's msg.sender to be the input address\n    function prank(address) external;\n\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called\n    function startPrank(address) external;\n\n    // Resets subsequent calls' msg.sender to be `address(this)`\n    function stopPrank() external;\n\n    // Sets an address' balance, (who, newBalance)\n    function deal(address, uint256) external;\n\n    // Sets an address' code, (who, newCode)\n    function etch(address, bytes calldata) external;\n\n    // Expects an error on next call\n    function expectRevert(bytes calldata) external;\n\n    // Expects an event on next call\n    function expectEmit(\n        bool,\n        bool,\n        bool,\n        bool\n    ) external;\n\n    // Record all storage reads and writes\n    function record() external;\n\n    // Gets all accessed reads and write slot from a recording session, for a given address\n    function accesses(address) external returns (bytes32[] memory reads, bytes32[] memory writes);\n\n    function assume(bool condition) external;\n}\n"
    },
    "src/test/TestToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestToken is ERC20(\"Test Token\", \"TKN\") {\n    function mint(uint256 _amount) external {\n        _mint(msg.sender, _amount);\n    }\n}\n"
    },
    "lib/ds-test/src/test.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.4.23;\n\ncontract DSTest {\n    event log                    (string);\n    event logs                   (bytes);\n\n    event log_address            (address);\n    event log_bytes32            (bytes32);\n    event log_int                (int);\n    event log_uint               (uint);\n    event log_bytes              (bytes);\n    event log_string             (string);\n\n    event log_named_address      (string key, address val);\n    event log_named_bytes32      (string key, bytes32 val);\n    event log_named_decimal_int  (string key, int val, uint decimals);\n    event log_named_decimal_uint (string key, uint val, uint decimals);\n    event log_named_int          (string key, int val);\n    event log_named_uint         (string key, uint val);\n    event log_named_bytes        (string key, bytes val);\n    event log_named_string       (string key, string val);\n\n    bool public IS_TEST = true;\n    bool public failed;\n\n    address constant HEVM_ADDRESS =\n        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\n\n    modifier mayRevert() { _; }\n    modifier testopts(string memory) { _; }\n\n    function fail() internal {\n        failed = true;\n    }\n\n    modifier logs_gas() {\n        uint startGas = gasleft();\n        _;\n        uint endGas = gasleft();\n        emit log_named_uint(\"gas\", startGas - endGas);\n    }\n\n    function assertTrue(bool condition) internal {\n        if (!condition) {\n            emit log(\"Error: Assertion Failed\");\n            fail();\n        }\n    }\n\n    function assertTrue(bool condition, string memory err) internal {\n        if (!condition) {\n            emit log_named_string(\"Error\", err);\n            assertTrue(condition);\n        }\n    }\n\n    function assertEq(address a, address b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [address]\");\n            emit log_named_address(\"  Expected\", b);\n            emit log_named_address(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(address a, address b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEq(bytes32 a, bytes32 b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [bytes32]\");\n            emit log_named_bytes32(\"  Expected\", b);\n            emit log_named_bytes32(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(bytes32 a, bytes32 b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq32(bytes32 a, bytes32 b) internal {\n        assertEq(a, b);\n    }\n    function assertEq32(bytes32 a, bytes32 b, string memory err) internal {\n        assertEq(a, b, err);\n    }\n\n    function assertEq(int a, int b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [int]\");\n            emit log_named_int(\"  Expected\", b);\n            emit log_named_int(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(int a, int b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq(uint a, uint b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [uint]\");\n            emit log_named_uint(\"  Expected\", b);\n            emit log_named_uint(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(uint a, uint b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Expected\", b, decimals);\n            emit log_named_decimal_int(\"    Actual\", a, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Expected\", b, decimals);\n            emit log_named_decimal_uint(\"    Actual\", a, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGt(uint a, uint b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(uint a, uint b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGt(int a, int b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(int a, int b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGe(uint a, uint b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(uint a, uint b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGe(int a, int b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(int a, int b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLt(uint a, uint b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(uint a, uint b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLt(int a, int b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(int a, int b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLe(uint a, uint b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(uint a, uint b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLe(int a, int b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(int a, int b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLeDecimal(a, b, decimals);\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertEq(string memory a, string memory b) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log(\"Error: a == b not satisfied [string]\");\n            emit log_named_string(\"  Value a\", a);\n            emit log_named_string(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertEq(string memory a, string memory b, string memory err) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {\n        ok = true;\n        if (a.length == b.length) {\n            for (uint i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) {\n                    ok = false;\n                }\n            }\n        } else {\n            ok = false;\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b) internal {\n        if (!checkEq0(a, b)) {\n            emit log(\"Error: a == b not satisfied [bytes]\");\n            emit log_named_bytes(\"  Expected\", a);\n            emit log_named_bytes(\"    Actual\", b);\n            fail();\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b, string memory err) internal {\n        if (!checkEq0(a, b)) {\n            emit log_named_string(\"Error\", err);\n            assertEq0(a, b);\n        }\n    }\n}\n"
    },
    "src/ShowtimeV1Market.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport { Pausable } from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport { IERC1155 } from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport { IERC2981 } from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { Ownable, Context } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport { BaseRelayRecipient } from \"./utils/BaseRelayRecipient.sol\";\n\ninterface ShowtimeERC1155 is IERC1155, IERC2981 {}\n\n//////////////////////////////////////////////\n//                                          //\n//                    ▄▄                    //\n//                   ▄██▄                   //\n//                  ▄████▄                  //\n//                ▄████████▄                //\n//              ▄████████████▄              //\n//            ▄████████████████▄            //\n//        ▄████████████████████████▄        //\n//   ▄██████████████████████████████████▄   //\n//   ▀██████████████████████████████████▀   //\n//       ████████████████████████████       //\n//           ████████████████████           //\n//              ██████████████              //\n//                ██████████                //\n//                 ████████                 //\n//                  ██████                  //\n//                   ████                   //\n//                    ██                    //\n//                                          //\n//////////////////////////////////////////////\n\n/// @title Showtime V1 Market for the Showtime ERC1155 Token\n///\n/// This is a non-escrow marketplace that allows users to list Showtime NFTs for sale\n/// for a fixed price, using a configurable list of allowed ERC20 currencies.\n///\n/// @dev listings have no expiration date, but frontends may choose to hide old listings\n///\n/// Built with feedback from the community! ♥️ Big thanks to:\n///     aaronsebesta chejazi chiuzon garythung mariobyn_eth MarkBeylin sina_eth_\n///     StErMi theramblingboy timidan_x transmissions11 William94029369\ncontract ShowtimeV1Market is Ownable, Pausable, BaseRelayRecipient {\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    /// the address of the ShowtimeMT NFT (ERC1155) contract\n    ShowtimeERC1155 public immutable nft;\n\n    /// @dev listings only contain a tokenId because we are implicitly only listing tokens from the ShowtimeMT contract\n    struct Listing {\n        uint256 tokenId;\n        uint256 quantity;\n        uint256 price;\n        IERC20 currency;\n        address seller;\n    }\n\n    /// ============ Mutable storage ============\n\n    /// royalties payments can be turned on/off by the owner of the contract\n    bool public royaltiesEnabled = true;\n\n    /// the configurable cap on royalties, enforced during the sale (50% by default)\n    uint256 public maxRoyaltiesBasisPoints = 50_00;\n\n    /// the configurable list of accepted ERC20 contract addresses\n    mapping(address => bool) public acceptedCurrencies;\n\n    /// maps a listing id to the corresponding Listing\n    mapping(uint256 => Listing) public listings;\n\n    /// a simple counter to assign ids to new listings\n    uint256 listingCounter;\n\n    /// ============ Events ============\n\n    /// marketplace and listing related events\n    event ListingCreated(uint256 indexed listingId, address indexed seller, uint256 indexed tokenId);\n    event ListingDeleted(uint256 indexed listingId, address indexed seller);\n    event RoyaltyPaid(address indexed receiver, IERC20 currency, uint256 amount);\n    event SaleCompleted(\n        uint256 indexed listingId,\n        address indexed seller,\n        address indexed buyer,\n        address receiver,\n        uint256 quantity\n    );\n\n    /// admin events\n    event AcceptedCurrencyChanged(address indexed account, address currency, bool accepted);\n    event RoyaltiesEnabledChanged(address indexed account, bool royaltiesEnabled);\n    event MaxRoyaltiesUpdated(address indexed account, uint256 maxRoyaltiesBasisPoints);\n\n    /// ============ Custom Errors ============\n\n    error ListingDoesNotExist(uint256 listingId);\n    error NotListingSeller(uint256 listingId);\n    error NotContractAddress(address addr);\n    error CurrencyNotAccepted(address currency);\n    error SellerDoesNotOwnToken(uint256 tokenId, uint256 quantity);\n    error NullAddress();\n    error NullQuantity();\n    error TokenIdMismatch(uint256 listedTokenId);\n    error PriceMismatch(uint256 listedPrice);\n    error CurrencyMismatch(address listedCurrency);\n    error CanNotSellToSelf();\n    error AvailableQuantityInsuficient(uint256 availableQuantity);\n    error RoyaltiesTooHigh(uint256 royaltyAmount, uint256 totalPrice);\n    error InvalidMaxRoyalties();\n\n    /// ============ Modifiers ============\n\n    modifier onlySeller(uint256 _id) {\n        if (listings[_id].seller != _msgSender()) revert NotListingSeller(_id);\n        _;\n    }\n\n    modifier listingExists(uint256 _id) {\n        if (listings[_id].seller == address(0)) revert ListingDoesNotExist(_id);\n        _;\n    }\n\n    /// ============ Constructor ============\n\n    constructor(\n        address _nft,\n        address _trustedForwarder,\n        address[] memory _initialCurrencies\n    ) {\n        /// initialize the address of the NFT contract\n        if (!_nft.isContract()) revert NotContractAddress(_nft);\n        nft = ShowtimeERC1155(_nft);\n\n        for (uint256 i = 0; i < _initialCurrencies.length; i++) {\n            address currency = _initialCurrencies[i];\n            if (!currency.isContract()) revert NotContractAddress(currency);\n            acceptedCurrencies[currency] = true;\n        }\n\n        /// set the trustedForwarder only once, see BaseRelayRecipient\n        if (_trustedForwarder == address(0)) revert NullAddress();\n        trustedForwarder = _trustedForwarder;\n    }\n\n    /// ============ Marketplace functions ============\n\n    /// @notice `setApprovalForAll` before calling\n    /// @notice creates a new Listing\n    /// @param _quantity the number of tokens to be listed\n    /// @param _price the price per token\n    function createSale(\n        uint256 _tokenId,\n        uint256 _quantity,\n        uint256 _price,\n        address _currency\n    ) external whenNotPaused returns (uint256 listingId) {\n        address seller = _msgSender();\n\n        if (!acceptedCurrencies[_currency]) revert CurrencyNotAccepted(_currency);\n        if (_quantity == 0) revert NullQuantity();\n        if (nft.balanceOf(seller, _tokenId) < _quantity) revert SellerDoesNotOwnToken(_tokenId, _quantity);\n\n        Listing memory listing = Listing({\n            tokenId: _tokenId,\n            quantity: _quantity,\n            price: _price,\n            currency: IERC20(_currency),\n            seller: seller\n        });\n\n        listingId = listingCounter;\n        listings[listingId] = listing;\n\n        // no need to check for overflows here\n        unchecked {\n            listingCounter++;\n        }\n\n        emit ListingCreated(listingId, seller, _tokenId);\n    }\n\n    /// @notice cancel an active sale\n    function cancelSale(uint256 _listingId) external listingExists(_listingId) onlySeller(_listingId) {\n        delete listings[_listingId];\n\n        emit ListingDeleted(_listingId, _msgSender());\n    }\n\n    /// @notice the seller may own fewer NFTs than the listed quantity\n    function availableForSale(uint256 _listingId) public view listingExists(_listingId) returns (uint256) {\n        Listing memory listing = listings[_listingId];\n        return Math.min(nft.balanceOf(listing.seller, listing.tokenId), listing.quantity);\n    }\n\n    /// @notice Complete a sale\n    /// @param _quantity the number of tokens to purchase\n    /// @param _receiver the address that will receive the NFTs\n    /// @dev we let the transaction complete even if the currency is no longer accepted in order to avoid stuck listings\n    function buy(\n        uint256 _listingId,\n        uint256 _tokenId,\n        uint256 _quantity,\n        uint256 _price,\n        address _currency,\n        address _receiver\n    ) external listingExists(_listingId) whenNotPaused {\n        /// 1. Checks\n        if (_quantity == 0) revert NullQuantity();\n        if (_receiver == address(0)) revert NullAddress();\n\n        Listing memory listing = listings[_listingId];\n\n        // to prevent issues with block reorgs, we need to make sure that the expectations of the buyer (tokenId,\n        // price and currency) match with the listing\n        if (listing.tokenId != _tokenId) revert TokenIdMismatch(listing.tokenId);\n        if (listing.price != _price) revert PriceMismatch(listing.price);\n        if (address(listing.currency) != _currency) revert CurrencyMismatch(address(listing.currency));\n\n        // disable buying something from the seller for the seller\n        // note that the seller can still buy from themselves as a gift for someone else\n        // the difference with a transfer is that this will result in royalties being paid out\n        if (_receiver == listing.seller) revert CanNotSellToSelf();\n\n        uint256 availableQuantity = availableForSale(_listingId);\n        if (_quantity > availableQuantity) revert AvailableQuantityInsuficient(availableQuantity);\n\n        uint256 totalPrice = listing.price * _quantity;\n        (address royaltyReceiver, uint256 royaltyAmount) = getRoyalties(listing.tokenId, totalPrice);\n        if (royaltyAmount > totalPrice) revert RoyaltiesTooHigh(royaltyAmount, totalPrice);\n\n        /// 2. Effects\n        updateListing(_listingId, availableQuantity - _quantity);\n\n        emit SaleCompleted(_listingId, listing.seller, _msgSender(), _receiver, _quantity);\n\n        /// 3. Interactions\n        // transfer royalties\n        if (royaltyAmount > 0) {\n            emit RoyaltyPaid(royaltyReceiver, listing.currency, royaltyAmount);\n            listing.currency.safeTransferFrom(_msgSender(), royaltyReceiver, royaltyAmount);\n        }\n\n        // the royalty amount is deducted from the price paid by the buyer\n        listing.currency.safeTransferFrom(_msgSender(), listing.seller, totalPrice - royaltyAmount);\n\n        // transfer the NFTs from the seller to the buyer\n        nft.safeTransferFrom(listing.seller, _receiver, listing.tokenId, _quantity, \"\");\n    }\n\n    /// ============ Utility functions ============\n\n    /// @notice update the listing with the remaining quantity, or delete it if newQuantity is zero\n    function updateListing(uint256 listingId, uint256 newQuantity) private {\n        if (newQuantity == 0) {\n            address seller = listings[listingId].seller;\n            delete listings[listingId];\n            emit ListingDeleted(listingId, seller);\n        } else {\n            listings[listingId].quantity = newQuantity;\n        }\n    }\n\n    function getRoyalties(uint256 tokenId, uint256 price)\n        private\n        view\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        if (!royaltiesEnabled) {\n            return (address(0), 0);\n        }\n\n        (receiver, royaltyAmount) = nft.royaltyInfo(tokenId, price);\n\n        // we ignore royalties to address 0, otherwise the transfer would fail\n        // and it would result in NFTs that are impossible to sell\n        if (receiver == address(0) || royaltyAmount == 0) {\n            return (address(0), 0);\n        }\n\n        royaltyAmount = capRoyalties(price, royaltyAmount);\n    }\n\n    function capRoyalties(uint256 salePrice, uint256 royaltyAmount) private view returns (uint256) {\n        uint256 maxRoyaltiesAmount = (salePrice * maxRoyaltiesBasisPoints) / 100_00;\n        return Math.min(maxRoyaltiesAmount, royaltyAmount);\n    }\n\n    function _msgSender() internal view override(Context, BaseRelayRecipient) returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n\n    /// ============ Admin functions ============\n\n    /// @notice switch royalty payments on/off\n    function setRoyaltiesEnabled(bool newValue) external onlyOwner {\n        royaltiesEnabled = newValue;\n\n        emit RoyaltiesEnabledChanged(_msgSender(), royaltiesEnabled);\n    }\n\n    /// @notice sets the maximum royalties that will be paid during sales, in basis points\n    /// ex: if a token requests 75% royalties but maxRoyaltiesBasisPoints is set to 60_00 (= 60%),\n    ///    then 60% will be paid out instead of the 75% requested\n    function setMaxRoyalties(uint256 newValue) external onlyOwner {\n        if (newValue > 100_00) revert InvalidMaxRoyalties();\n        maxRoyaltiesBasisPoints = newValue;\n\n        emit MaxRoyaltiesUpdated(_msgSender(), maxRoyaltiesBasisPoints);\n    }\n\n    /// @notice add a currency to the accepted currency list\n    function setAcceptedCurrency(address currency, bool accepted) external onlyOwner {\n        if (accepted && !currency.isContract()) revert NotContractAddress(currency);\n        acceptedCurrencies[currency] = accepted;\n\n        emit AcceptedCurrencyChanged(_msgSender(), currency, accepted);\n    }\n\n    /// @notice pause the contract\n    function pause() external whenNotPaused onlyOwner {\n        _pause();\n    }\n\n    /// @notice unpause the contract\n    function unpause() external whenPaused onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "src/test/ShowtimeMT.t.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"./Hevm.sol\";\nimport \"./TestToken.sol\";\nimport \"../../lib/ds-test/src/test.sol\";\nimport \"../ShowtimeMT.sol\";\nimport \"../ShowtimeV1Market.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\n\ncontract User is ERC1155Holder {}\n\ncontract ShowtimeMTAccessTest is DSTest, ERC1155Holder {\n    User internal anon;\n    User internal admin;\n    User internal minter;\n    address[] internal minters;\n    ShowtimeMT internal mt;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    event UserAccessSet(address _user, string _access, bool _enabled);\n\n    function setUp() public {\n        anon = new User();\n        admin = new User();\n        minter = new User();\n        minters = [\n            address(new User()),\n            address(new User()),\n            address(new User()),\n            address(new User()),\n            address(new User())\n        ];\n\n        mt = new ShowtimeMT();\n        mt.setAdmin(address(admin), true);\n        mt.setMinter(address(minter), true);\n    }\n\n    // it non-minter should not be able to mint\n    function testNotMintersCannotMint() public {\n        hevm.prank(address(anon));\n        hevm.expectRevert(\"AccessProtected: caller is not minter\");\n\n        mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0), 0);\n    }\n\n    // it owner should be able to set admin\n    function testOwnerCanSetAdmin() public {\n        assertTrue(!mt.isAdmin(address(anon)));\n\n        hevm.expectEmit(true, true, true, true);\n        emit UserAccessSet(address(anon), \"ADMIN\", true);\n\n        mt.setAdmin(address(anon), true);\n\n        assertTrue(mt.isAdmin(address(anon)));\n    }\n\n    // it admin should be able to set minter\n    function testAdminCanSetMinter() public {\n        assertTrue(!mt.isMinter(address(anon)));\n\n        hevm.prank(address(admin));\n        mt.setMinter(address(anon), true);\n        emit UserAccessSet(address(anon), \"MINTER\", true);\n\n        assertTrue(mt.isMinter(address(anon)));\n    }\n\n    // it admin should be able to set batch of minters\n    function testAdminCanSetMinterBatch() public {\n        for (uint256 i = 0; i < minters.length; i++) {\n            assertTrue(!mt.isMinter(minters[i]));\n        }\n\n        hevm.prank(address(admin));\n\n        for (uint256 i = 0; i < minters.length; i++) {\n            hevm.expectEmit(true, true, true, true);\n            emit UserAccessSet(minters[i], \"MINTER\", true);\n        }\n\n        mt.setMinters(minters, true);\n\n        for (uint256 i = 0; i < minters.length; i++) {\n            assertTrue(mt.isMinter(minters[i]));\n        }\n    }\n\n    // it admin should be able to revoke minter\n    function testAdminCanRevokeMinter() public {\n        assertTrue(mt.isMinter(address(minter)));\n\n        hevm.prank(address(admin));\n        hevm.expectEmit(true, true, true, true);\n        emit UserAccessSet(address(minter), \"MINTER\", false);\n\n        mt.setMinter(address(minter), false);\n\n        assertTrue(!mt.isMinter(address(minter)));\n    }\n\n    // it admin should be able to revoke batch of minters\n    function testAdminCanRevokeMinterBatch() public {\n        hevm.prank(address(admin));\n\n        for (uint256 i = 0; i < minters.length; i++) {\n            hevm.expectEmit(true, true, true, true);\n            emit UserAccessSet(minters[i], \"MINTER\", false);\n        }\n\n        mt.setMinters(minters, false);\n\n        for (uint256 i = 0; i < minters.length; i++) {\n            assertTrue(!mt.isMinter(minters[i]));\n        }\n    }\n\n    // it non-owner should not be able to set admin\n    function testNonOwnerCannotSetAdmin() public {\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n\n        hevm.prank(address(admin));\n        mt.setAdmin(address(admin), true);\n    }\n\n    // it owner should be able to revoke admin\n    function testOwnerCanRevokeAdmin() public {\n        hevm.expectEmit(true, true, true, true);\n        emit UserAccessSet(address(admin), \"ADMIN\", false);\n\n        mt.setAdmin(address(admin), false);\n\n        assertTrue(!mt.isAdmin(address(admin)));\n    }\n\n    // it admin should be able to enable/disable minting for all\n    function testAdminCanControlPublicMinting() public {\n        hevm.startPrank(address(admin));\n        hevm.expectEmit(true, true, true, true);\n        emit UserAccessSet(address(0), \"MINTER\", true);\n\n        mt.setPublicMinting(true);\n\n        assertTrue(mt.publicMinting());\n\n        hevm.expectEmit(true, true, true, true);\n        emit UserAccessSet(address(0), \"MINTER\", false);\n\n        mt.setPublicMinting(false);\n\n        assertTrue(!mt.publicMinting());\n    }\n}\n\ncontract ShowtimeMTMintingTest is DSTest, ERC1155Holder {\n    User internal admin;\n    ShowtimeMT internal mt;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    function setUp() public {\n        admin = new User();\n\n        mt = new ShowtimeMT();\n        mt.setAdmin(address(admin), true);\n    }\n\n    // it minter should be able to mint\n    function testMintersCanMint() public {\n        mt.issueToken(address(admin), 10, \"some-hash\", \"0\", address(0), 0);\n        assertEq(mt.balanceOf(address(admin), 1), 10);\n\n        // assert no royalty\n        (address receiver, uint256 royaltyAmount) = mt.royaltyInfo(1, 1 wei);\n        assertEq(receiver, address(0));\n        assertEq(royaltyAmount, 0);\n\n        assertEq(mt.uri(1), \"https://gateway.pinata.cloud/ipfs/some-hash\");\n    }\n\n    // it minter should be able to batch mint\n    function testMintersCanBatchMint() public {\n        uint256[] memory tokenAmounts = new uint256[](5);\n        string[] memory hashes = new string[](5);\n        address[] memory addresses = new address[](5);\n        uint256[] memory royalties = new uint256[](5);\n\n        for (uint256 i = 0; i < 5; i++) {\n            tokenAmounts[i] = i;\n            hashes[i] = string(abi.encodePacked(\"hash-\", i));\n            addresses[i] = address(0);\n            royalties[i] = 0;\n        }\n\n        uint256[] memory tokenIds = mt.issueTokenBatch(address(admin), tokenAmounts, hashes, \"0\", addresses, royalties);\n\n        for (uint256 i = 0; i < 5; i++) {\n            assertEq(mt.balanceOf(address(admin), tokenIds[i]), tokenAmounts[i]);\n\n            // assert no royalty\n            (address receiver, uint256 royaltyAmount) = mt.royaltyInfo(tokenIds[i], 1 wei);\n            assertEq(receiver, address(0));\n            assertEq(royaltyAmount, 0);\n\n            assertEq(mt.uri(tokenIds[i]), string(abi.encodePacked(\"https://gateway.pinata.cloud/ipfs/\", hashes[i])));\n        }\n    }\n\n    // it should not be able to mint if public minting is disabled\n    function testMintersCantMintIfMintingIsDisabled() public {\n        hevm.expectRevert(\"AccessProtected: caller is not minter\");\n        hevm.prank(address(0x1));\n\n        mt.issueToken(address(0x1), 10, \"some-hash\", \"0\", address(0), 0);\n    }\n}\n\ncontract ShowtimeMTBurningTest is DSTest, ERC1155Holder {\n    ShowtimeMT internal mt;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    function setUp() public {\n        mt = new ShowtimeMT();\n    }\n\n    // it holder should be able to burn\n    function testHolderCanBurn() public {\n        mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0), 0);\n        assertEq(mt.balanceOf(address(this), 1), 10);\n\n        mt.burn(address(this), 1, 10);\n        assertEq(mt.balanceOf(address(this), 1), 0);\n    }\n\n    // it holder should be able to batch burn\n    function testHolderCanBatchBurn() public {\n        uint256[] memory tokenAmounts = new uint256[](5);\n        string[] memory hashes = new string[](5);\n        address[] memory addresses = new address[](5);\n        uint256[] memory royalties = new uint256[](5);\n\n        for (uint256 i = 0; i < 5; i++) {\n            tokenAmounts[i] = i;\n            hashes[i] = string(abi.encodePacked(\"hash-\", i));\n            addresses[i] = address(0);\n            royalties[i] = 0;\n        }\n        uint256[] memory tokenIds = mt.issueTokenBatch(address(this), tokenAmounts, hashes, \"0\", addresses, royalties);\n\n        for (uint256 i = 0; i < 5; i++) {\n            assertEq(mt.balanceOf(address(this), tokenIds[i]), tokenAmounts[i]);\n        }\n\n        mt.burnBatch(address(this), tokenIds, tokenAmounts);\n\n        for (uint256 i = 0; i < 5; i++) {\n            assertEq(mt.balanceOf(address(this), tokenIds[i]), 0);\n        }\n    }\n\n    // it can burn arbitrary amount\n    function testArbitraryAmountsCanBeBurned() public {\n        mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0), 0);\n        assertEq(mt.balanceOf(address(this), 1), 10);\n\n        mt.burn(address(this), 1, 5);\n        assertEq(mt.balanceOf(address(this), 1), 5);\n    }\n\n    // it reverts of attempting to burn unowned tokens\n    function testCannotBurnSomeonesTokens() public {\n        mt.issueToken(address(0x1), 10, \"some-hash\", \"0\", address(0), 0);\n\n        hevm.expectRevert(\"ERC1155: caller is not owner nor approved\");\n        mt.burn(address(0x1), 1, 10);\n    }\n\n    // it reverts on attempting to batch burn unowned tokens\n    function testCannotBatchBurnSomeonesTokens() public {\n        uint256[] memory tokenAmounts = new uint256[](5);\n        string[] memory hashes = new string[](5);\n        address[] memory addresses = new address[](5);\n        uint256[] memory royalties = new uint256[](5);\n\n        for (uint256 i = 0; i < 5; i++) {\n            tokenAmounts[i] = i;\n            hashes[i] = string(abi.encodePacked(\"hash-\", i));\n            addresses[i] = address(0);\n            royalties[i] = 0;\n        }\n        uint256[] memory tokenIds = mt.issueTokenBatch(address(0x1), tokenAmounts, hashes, \"0\", addresses, royalties);\n\n        hevm.expectRevert(\"ERC1155: caller is not owner nor approved\");\n        mt.burnBatch(address(0x1), tokenIds, tokenAmounts);\n    }\n\n    // it reverts on attempting to burn more than balance\n    function testCannotBurnMoreThanOwned() public {\n        mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0), 0);\n\n        hevm.expectRevert(\"ERC1155: burn amount exceeds balance\");\n        mt.burn(address(this), 1, 11);\n    }\n}\n\ncontract ShowtimeMTURITest is DSTest, ERC1155Holder {\n    ShowtimeMT internal mt;\n    uint256 internal tokenId;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    function setUp() public {\n        mt = new ShowtimeMT();\n\n        tokenId = mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0), 0);\n    }\n\n    // it should be able to get baseURI\n    function testCanGetBaseURI() public {\n        assertEq(mt.baseURI(), \"https://gateway.pinata.cloud/ipfs/\");\n    }\n\n    // it owner should be able to set baseURI\n    function testOwnerCanSetBaseURI() public {\n        mt.setBaseURI(\"https://gateway.test.com/ipfs/\");\n\n        assertEq(mt.baseURI(), \"https://gateway.test.com/ipfs/\");\n    }\n\n    // it should be able to get token URI\n    function testCanGetTokenURI() public {\n        assertEq(mt.uri(tokenId), \"https://gateway.pinata.cloud/ipfs/some-hash\");\n    }\n}\n\ncontract ShowtimeMTTransferTest is DSTest, ERC1155Holder {\n    ShowtimeMT internal mt;\n    uint256 internal tokenId;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    function setUp() public {\n        mt = new ShowtimeMT();\n\n        tokenId = mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0), 0);\n    }\n\n    // it nft-owner should be able to transfer amount\n    function testCanTransfer() public {\n        uint256 fromBalance = mt.balanceOf(address(this), tokenId);\n        uint256 toBalance = mt.balanceOf(address(0x1), tokenId);\n\n        mt.safeTransferFrom(address(this), address(0x1), tokenId, 1, \"0\");\n\n        uint256 fromBalance_new = mt.balanceOf(address(this), tokenId);\n        uint256 toBalance_new = mt.balanceOf(address(0x1), tokenId);\n        assertEq(fromBalance_new, fromBalance - 1);\n        assertEq(toBalance_new, toBalance + 1);\n    }\n}\n\ncontract ShowtimeMTRoyaltyTest is DSTest, ERC1155Holder {\n    ShowtimeMT internal mt;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    function setUp() public {\n        mt = new ShowtimeMT();\n    }\n\n    // it mints token with royalty\n    function testMintsWithRoyalty() public {\n        uint256 tokenId = mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0x1), 10_00);\n        (address receiver, uint256 royaltyAmount) = mt.royaltyInfo(tokenId, 100); // 100 is sale price\n\n        assertEq(receiver, address(0x1));\n        assertEq(royaltyAmount, 10);\n    }\n\n    // it mints in batch with royalty\n    function testBatchMintsWithRoyalty() public {\n        uint256[] memory tokenAmounts = new uint256[](5);\n        string[] memory hashes = new string[](5);\n        address[] memory addresses = new address[](5);\n        uint256[] memory royalties = new uint256[](5);\n\n        for (uint256 i = 0; i < 5; i++) {\n            tokenAmounts[i] = i;\n            hashes[i] = string(abi.encodePacked(\"hash-\", i));\n            addresses[i] = address(0x1);\n            royalties[i] = 500 * (i + 1);\n        }\n        uint256[] memory tokenIds = mt.issueTokenBatch(address(this), tokenAmounts, hashes, \"0\", addresses, royalties);\n        for (uint256 i = 0; i < 5; i++) {\n            (address receiver, uint256 royaltyAmount) = mt.royaltyInfo(tokenIds[i], 100);\n            assertEq(receiver, address(0x1));\n            assertEq(royaltyAmount, 5 * (i + 1));\n        }\n    }\n\n    // it throws on % greater than 100%\n    function testCannotHaveMoreThan100PercentRoyalty() public {\n        hevm.expectRevert(\"ERC2981Royalties: value too high\");\n        mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(this), 101_00);\n    }\n}\n\ncontract ShowtimeMTERC165Test is DSTest, ERC1155Holder {\n    ShowtimeMT internal mt;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    function setUp() public {\n        mt = new ShowtimeMT();\n    }\n\n    // it supports interface IERC165\n    function testIERC165Support() public {\n        assertTrue(mt.supportsInterface(0x01ffc9a7));\n    }\n\n    // it supports interface IERC1155\n    function testIERC1155Support() public {\n        assertTrue(mt.supportsInterface(0xd9b67a26));\n    }\n\n    // it supports interface IERC2981\n    function testIERC2981Support() public {\n        assertTrue(mt.supportsInterface(0x2a55205a));\n    }\n\n    // it returns false for 0xffffffff\n    function testReturnsFalseForFFF() public {\n        assertTrue(!mt.supportsInterface(0xffffffff));\n    }\n}\n"
    },
    "src/test/ShowtimeBakeSaleTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./Hevm.sol\";\nimport \"./TestToken.sol\";\nimport \"../../lib/ds-test/src/test.sol\";\nimport \"../ShowtimeMT.sol\";\nimport \"../ShowtimeV1Market.sol\";\nimport \"../periphery/ShowtimeBakeSale.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\n\ncontract User is ERC1155Holder {}\n\ncontract ShowtimeBakeSaleTest is DSTest, ERC1155Holder {\n    uint256 constant INITIAL_NFT_SUPPLY = 1000;\n    address constant BURN_ADDRESS = address(0xdEaD);\n    address constant FORWARDER_ADDRESS = BURN_ADDRESS;\n\n    User internal bob = new User();\n    User internal alice = new User();\n    User internal charity = new User();\n    TestToken internal token;\n    ShowtimeMT internal showtimeNFT;\n    ShowtimeV1Market internal market;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    address[] justCharityPayees = [address(charity)];\n    uint256[] just100Shares = [100];\n\n    ShowtimeBakeSale charitySeller;\n\n    uint256 tokenId0PctRoyalty;\n    uint256 tokenId10PctRoyaltyToAlice;\n    uint256 tokenId100PctRoyaltyToAlice;\n    uint256 tokenId10PctRoyaltyToZeroAddress;\n\n    event ListingCreated(uint256 indexed listingId, address indexed seller, uint256 indexed tokenId);\n    event ListingDeleted(uint256 indexed listingId, address indexed seller);\n    event SaleCompleted(\n        uint256 indexed listingId,\n        address indexed seller,\n        address indexed buyer,\n        address receiver,\n        uint256 quantity\n    );\n    event RoyaltyPaid(address indexed receiver, IERC20 currency, uint256 amount);\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    function setUp() public {\n        // mint NFTs\n        showtimeNFT = new ShowtimeMT();\n        tokenId0PctRoyalty = showtimeNFT.issueToken(\n            address(alice),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(0),\n            0\n        ); // 0% royalties\n        tokenId10PctRoyaltyToAlice = showtimeNFT.issueToken(\n            address(alice),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(alice),\n            10_00\n        ); // 10% royalties\n        tokenId100PctRoyaltyToAlice = showtimeNFT.issueToken(\n            address(alice),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(alice),\n            100_00\n        ); // 100% royalties\n\n        // mint erc20s to bob\n        token = new TestToken();\n        hevm.prank(address(bob));\n        token.mint(0xffffffff);\n\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(token);\n\n        // approvals\n        market = new ShowtimeV1Market(address(showtimeNFT), FORWARDER_ADDRESS, tokens);\n        hevm.prank(address(bob));\n        token.approve(address(market), type(uint256).max);\n\n        // deploy the normal splitter with 100% to charity\n        charitySeller = new ShowtimeBakeSale(address(showtimeNFT), address(market), justCharityPayees, just100Shares);\n    }\n\n    function testDeploySalesContractWithNoPayees() public {\n        hevm.expectRevert(\"PaymentSplitter: no payees\");\n\n        address[] memory payees = new address[](0);\n        uint256[] memory shares = new uint256[](0);\n\n        new ShowtimeBakeSale(address(showtimeNFT), address(market), payees, shares);\n    }\n\n    function testDeploySalesContractWithBadShares() public {\n        hevm.expectRevert(\"PaymentSplitter: shares are 0\");\n\n        address[] memory payees = new address[](1);\n        payees[0] = address(bob);\n\n        uint256[] memory shares = new uint256[](1);\n        shares[0] = 0;\n\n        new ShowtimeBakeSale(address(showtimeNFT), address(market), payees, shares);\n    }\n\n    function testDeploySalesContractWithPayeesSharesMismatch() public {\n        hevm.expectRevert(\"PaymentSplitter: payees and shares length mismatch\");\n\n        address[] memory payees = new address[](2);\n        payees[0] = address(alice);\n        payees[1] = address(bob);\n\n        uint256[] memory shares = new uint256[](1);\n        shares[0] = 100;\n\n        new ShowtimeBakeSale(address(showtimeNFT), address(market), payees, shares);\n    }\n\n    function testDeploySalesContractWithDuplicatePayees() public {\n        hevm.expectRevert(\"PaymentSplitter: account already has shares\");\n\n        address[] memory payees = new address[](2);\n        payees[0] = address(bob);\n        payees[1] = address(bob);\n\n        uint256[] memory shares = new uint256[](2);\n        shares[0] = 50;\n        shares[1] = 50;\n\n        new ShowtimeBakeSale(address(showtimeNFT), address(market), payees, shares);\n    }\n\n    function testOnlyOwnerCanCreateSales() public {\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n\n        hevm.prank(address(alice));\n        charitySeller.createSale(2, 2, 2, address(token));\n    }\n\n    function testOnlyOwnerCanCancelSales() public {\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n\n        hevm.prank(address(alice));\n        charitySeller.cancelSale(0);\n    }\n\n    function testOnlyOwnerCanWithdraw() public {\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        hevm.prank(address(alice));\n        charitySeller.withdraw(42, address(alice));\n    }\n\n    function testHappyPathEndToEnd(uint16 price, uint8 quantity) public {\n        uint256 tokenId = tokenId10PctRoyaltyToAlice;\n\n        // when alice transfers her NFTs to the charitySeller\n        hevm.prank(address(alice));\n        showtimeNFT.safeTransferFrom(address(alice), address(charitySeller), tokenId, INITIAL_NFT_SUPPLY, \"\");\n\n        // then we see the balance of the charitySeller reflected\n        assertEq(INITIAL_NFT_SUPPLY, showtimeNFT.balanceOf(address(charitySeller), tokenId));\n\n        // when the charitySeller puts the NFT up for sale\n        uint256 listingId = charitySeller.createSale(tokenId, INITIAL_NFT_SUPPLY, price, address(token));\n\n        // then we see the expected supply available for purchase\n        assertEq(market.availableForSale(listingId), INITIAL_NFT_SUPPLY);\n\n        if (quantity == 0) {\n            // we can't purchase 0, it will throw `NullQuantity()`\n            return;\n        }\n\n        // when bob purchases an NFT\n        hevm.expectEmit(true, true, true, true);\n        emit SaleCompleted(listingId, address(charitySeller), address(bob), address(bob), quantity);\n\n        hevm.prank(address(bob));\n        market.buy(listingId, tokenId, quantity, price, address(token), address(bob));\n\n        // then we see the balances reflected\n        uint256 salePrice = uint256(quantity) * uint256(price);\n        uint256 royalties = salePrice / 10;\n        uint256 saleProceeds = salePrice - royalties;\n        uint remainingSupply = INITIAL_NFT_SUPPLY - quantity;\n        assertEq(quantity, showtimeNFT.balanceOf(address(bob), tokenId));\n        assertEq(remainingSupply, showtimeNFT.balanceOf(address(charitySeller), tokenId));\n        assertEq(saleProceeds, token.balanceOf(address(charitySeller)));\n        assertEq(royalties, token.balanceOf(address(alice)));\n\n        if (price == 0) {\n            // nothing to release, it will throw `account is not due payment`\n            return;\n        }\n\n        // when someone calls release (could be anyone, so let's randomly pick bob)\n        hevm.prank(address(bob));\n        charitySeller.release(token, address(charity));\n\n        // then we see the balance of the sales contract going to the charity\n        assertEq(0, token.balanceOf(address(charitySeller)));\n        assertEq(saleProceeds, token.balanceOf(address(charity)));\n\n        // when the deployer cancels the sale, then the listing really is deleted\n        hevm.expectEmit(true, true, true, true);\n        emit ListingDeleted(listingId, address(charitySeller));\n        charitySeller.cancelSale(listingId);\n\n        // when the deployer burns the remaining supply\n        hevm.expectEmit(true, true, true, true);\n        emit TransferSingle(\n            address(charitySeller),\n            address(charitySeller),\n            address(alice),\n            tokenId,\n            remainingSupply\n        );\n        charitySeller.withdraw(tokenId, address(alice));\n\n        // then the transfer really happened\n        assertEq(0, showtimeNFT.balanceOf(address(charitySeller), tokenId));\n        assertEq(remainingSupply, showtimeNFT.balanceOf(address(alice), tokenId));\n    }\n}\n"
    },
    "src/periphery/ShowtimeBakeSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { PaymentSplitter } from \"@openzeppelin/contracts/finance/PaymentSplitter.sol\";\nimport { IERC1155 } from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\nimport { ShowtimeMTReceiver } from \"./ShowtimeMTReceiver.sol\";\n\ninterface IShowtimeV1Market {\n    function createSale(\n        uint256 _tokenId,\n        uint256 _quantity,\n        uint256 _price,\n        address _currency\n    ) external returns (uint256 listingId);\n\n    function cancelSale(uint256 _listingId) external;\n}\n\n/// This contract acts as a delegate for listings on the showtime.io marketplace.\n/// It allows trustless sales for 3rd parties such as charities.\n///\n/// Usage:\n/// 1. deploy a copy of this contract with the appropriate payees and shares. The payees are immutable and auditable by anyone.\n/// 2. anybody can mint a Showtime NFT with the royalties recipient set to the address of this contract\n/// 3. the minter transfers (some or all of the editions of) the Showtime NFT to this contract\n/// 4. the deployer of the contract calls `createSale`\n/// 5. (optional) the deployer calls `renounceOwnership()`, proving that the listing and the remaining supply will be permanently left untouched\n/// 6. proceeds from primary sales will accrue in this contract (and secondary sales if it the NFTs use it as the royalties recipient address)\n/// 7. anybody can call `release(IERC20 token, address account)` to disperse the funds to the recipients\ncontract ShowtimeBakeSale is PaymentSplitter, ShowtimeMTReceiver, Ownable {\n    IShowtimeV1Market public immutable showtimeMarket;\n\n    constructor(\n        address _showtimeMT,\n        address _showtimeMarket,\n        address[] memory payees,\n        uint256[] memory shares_\n    ) PaymentSplitter(payees, shares_) ShowtimeMTReceiver(_showtimeMT) {\n        showtimeMarket = IShowtimeV1Market(_showtimeMarket);\n\n        IERC1155(_showtimeMT).setApprovalForAll(_showtimeMarket, true);\n    }\n\n    function createSale(\n        uint256 _tokenId,\n        uint256 _quantity,\n        uint256 _price,\n        address _currency\n    ) external onlyOwner returns (uint256 listingId) {\n        listingId = showtimeMarket.createSale(_tokenId, _quantity, _price, _currency);\n    }\n\n    function cancelSale(uint256 listingId) external onlyOwner {\n        showtimeMarket.cancelSale(listingId);\n    }\n\n    function withdraw(uint256 _tokenId, address to) external onlyOwner {\n        uint howMany = IERC1155(showtimeMT).balanceOf(address(this), _tokenId);\n        IERC1155(showtimeMT).safeTransferFrom(address(this), to, _tokenId, howMany, \"\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/finance/PaymentSplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\ncontract PaymentSplitter is Context {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20 token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(IERC20 token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = address(this).balance + totalReleased();\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _released[account] += payment;\n        _totalReleased += payment;\n\n        Address.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20 token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _erc20Released[token][account] += payment;\n        _erc20TotalReleased[token] += payment;\n\n        SafeERC20.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n}\n"
    },
    "src/periphery/ShowtimeMTReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport { ERC1155Receiver } from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\";\n\ncontract ShowtimeMTReceiver is ERC1155Receiver {\n    address public immutable showtimeMT;\n\n    error UnexpectedERC1155Transfer(address _nftContract, uint256 id);\n    error UnexpectedERC1155BatchTransfer(address _nftContract, uint256[] ids);\n\n    constructor(address _showtimeMT) {\n        showtimeMT = _showtimeMT;\n    }\n\n    /// Accept transfers from ShowtimeMT\n    function onERC1155Received(\n        address, /* operator */\n        address, /* from */\n        uint256 id,\n        uint256, /* value */\n        bytes calldata /* data */\n    ) external view override returns (bytes4) {\n        if (msg.sender != showtimeMT) {\n            revert UnexpectedERC1155Transfer(msg.sender, id);\n        }\n        return this.onERC1155Received.selector;\n    }\n\n    /// Accept batch transfers from ShowtimeMT\n    function onERC1155BatchReceived(\n        address, /* operator */\n        address, /* from */\n        uint256[] calldata ids,\n        uint256[] calldata, /* values */\n        bytes calldata /* data */\n    ) external view override returns (bytes4) {\n        if (msg.sender != showtimeMT) {\n            revert UnexpectedERC1155BatchTransfer(msg.sender, ids);\n        }\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/IERC721Metadata.sol\";\n"
    },
    "src/periphery/MetaSingleEditionMintableCreator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport { IERC2981 } from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport { IERC721Metadata } from \"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\";\n\n\nimport { BaseRelayRecipient } from \"../utils/BaseRelayRecipient.sol\";\n\ninterface ISingleEditionMintableCreator {\n    /// Creates a new edition contract as a factory with a deterministic address\n    /// Important: None of these fields (except the Url fields with the same hash) can be changed after calling\n    /// @param _name Name of the edition contract\n    /// @param _symbol Symbol of the edition contract\n    /// @param _description Metadata: Description of the edition entry\n    /// @param _animationUrl Metadata: Animation url (optional) of the edition entry\n    /// @param _animationHash Metadata: SHA-256 Hash of the animation (if no animation url, can be 0x0)\n    /// @param _imageUrl Metadata: Image url (semi-required) of the edition entry\n    /// @param _imageHash Metadata: SHA-256 hash of the Image of the edition entry (if not image, can be 0x0)\n    /// @param _editionSize Total size of the edition (number of possible editions)\n    /// @param _royaltyBPS BPS amount of royalty\n    function createEdition(\n        string memory _name,\n        string memory _symbol,\n        string memory _description,\n        string memory _animationUrl,\n        bytes32 _animationHash,\n        string memory _imageUrl,\n        bytes32 _imageHash,\n        uint256 _editionSize,\n        uint256 _royaltyBPS\n    ) external returns (uint256);\n\n    /// Get edition given the created ID\n    /// @param editionId id of edition to get contract for\n    /// @return SingleEditionMintable Edition NFT contract\n    function getEditionAtId(uint256 editionId) external view returns (ISingleEditionMintable);\n}\n\ninterface ISingleEditionMintable is IERC721Metadata, IERC2981 {\n  function mintEdition(address to) external returns (uint256);\n  function mintEditions(address[] memory to) external returns (uint256);\n  function numberCanMint() external view returns (uint256);\n  function owner() external view returns (address);\n  function transferOwnership(address newOwner) external;\n  function setApprovedMinter(address minter, bool allowed) external;\n}\n\ncontract MetaSingleEditionMintableCreator is BaseRelayRecipient {\n    ISingleEditionMintableCreator immutable editionCreator;\n\n    constructor(address _trustedForwarder, address _editionCreator) {\n        trustedForwarder = _trustedForwarder;\n        editionCreator = ISingleEditionMintableCreator(_editionCreator);\n    }\n\n    /// @param minter the address of the minter contract to use for this edition, or 0 for an open mint\n    function createEdition(\n        // ISingleEditionMintableCreator parameters\n        string memory _name,\n        string memory _symbol,\n        string memory _description,\n        string memory _animationUrl,\n        bytes32 _animationHash,\n        string memory _imageUrl,\n        bytes32 _imageHash,\n        uint256 _editionSize,\n        uint256 _royaltyBPS,\n\n        // additional parameters\n        address minter\n    ) external returns (uint256) {\n        // deploy the new contract\n        uint newId = editionCreator.createEdition(_name, _symbol, _description, _animationUrl, _animationHash,\n            _imageUrl, _imageHash, _editionSize, _royaltyBPS);\n\n        // configure it while we still own it\n        ISingleEditionMintable edition = editionCreator.getEditionAtId(newId);\n        edition.setApprovedMinter(minter, true);\n\n        // and finally transfer ownership of the configured contract to the actual creator\n        edition.transferOwnership(_msgSender());\n\n        return newId;\n    }\n\n    function getEditionAtId(uint256 editionId) external view returns (ISingleEditionMintable) {\n        return editionCreator.getEditionAtId(editionId);\n    }\n}"
    },
    "src/test/CreatorOwnedCollectionTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport {SharedNFTLogic} from \"@zoralabs/nft-editions-contracts/contracts/SharedNFTLogic.sol\";\nimport {SingleEditionMintable} from \"@zoralabs/nft-editions-contracts/contracts/SingleEditionMintable.sol\";\nimport {SingleEditionMintableCreator} from \"@zoralabs/nft-editions-contracts/contracts/SingleEditionMintableCreator.sol\";\n\nimport \"./Hevm.sol\";\nimport \"../../lib/ds-test/src/test.sol\";\n\nimport {OnePerAddressEditionMinter} from \"../periphery/OnePerAddressEditionMinter.sol\";\nimport {MetaSingleEditionMintableCreator, ISingleEditionMintable} from \"../periphery/MetaSingleEditionMintableCreator.sol\";\n\ncontract User {}\n\ncontract CreatorOwnedCollectionTest is DSTest {\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    User internal alice = new User();\n    User internal bob = new User();\n    User internal charlieTheCreator = new User();\n\n    SingleEditionMintableCreator editionCreator;\n    OnePerAddressEditionMinter minter;\n\n\n    function setUp() public {\n        SharedNFTLogic sharedNFTLogic = new SharedNFTLogic();\n        SingleEditionMintable editionImplementation = new SingleEditionMintable(sharedNFTLogic);\n        editionCreator = new SingleEditionMintableCreator(address(editionImplementation));\n        minter = new OnePerAddressEditionMinter(address(0));\n    }\n\n    function testCreateMintableCollection() public {\n        // when charlieTheCreator calls `createEdition`\n        hevm.prank(address(charlieTheCreator));\n        uint newId = editionCreator.createEdition(\n            \"The Collection\",\n            \"COLL\",\n            \"The best collection in the world\",\n            \"\",     // _animationUrl\n            0x0,    // _animationHash\n            \"http://example.com/image.png\",\n            keccak256(\"http://example.com/image.png\"),\n            2,      // _editionSize\n            1000);  // _royaltyBPS\n\n        // then we get a correctly configured collection\n        SingleEditionMintable edition = editionCreator.getEditionAtId(newId);\n        assertEq(edition.owner(), address(charlieTheCreator));\n        assertEq(edition.name(), \"The Collection\");\n\n        // when alice tries to mint from that collection, it should fail\n        hevm.prank(address(alice));\n        hevm.expectRevert(\"Needs to be an allowed minter\");\n        edition.mintEdition(address(alice));\n\n        // when bob tries to open up public minting, it should fail\n        hevm.prank(address(bob));\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        edition.setApprovedMinter(address(0), true);\n\n        // when charlieTheCreator opens up public minting\n        hevm.prank(address(charlieTheCreator));\n        edition.setApprovedMinter(address(0), true);\n\n        // then anybody can mint\n        hevm.prank(address(alice));\n        edition.mintEdition(address(alice));\n\n        hevm.prank(address(bob));\n        edition.mintEdition(address(bob));\n\n        // when we are sold out, then new mints fail (even for charlieTheCreator)\n        hevm.prank(address(charlieTheCreator));\n        hevm.expectRevert(\"Sold out\");\n        edition.mintEdition(address(charlieTheCreator));\n    }\n\n    function testCreateMintableCollectionViaOnePerAddressContract() public {\n        // when charlieTheCreator calls `createEdition`\n        hevm.prank(address(charlieTheCreator));\n        uint newId = editionCreator.createEdition(\n            \"The Collection\",\n            \"DROP\",\n            \"The best collection in the world\",\n            \"\",     // _animationUrl\n            0x0,    // _animationHash\n            \"ipfs://SOME_IMAGE_CID\",\n            keccak256(\"this is not really used, is it?\"),\n            0,      // _editionSize, 0 means unlimited\n            1000);  // _royaltyBPS\n\n        SingleEditionMintable edition = editionCreator.getEditionAtId(newId);\n        assertEq(edition.owner(), address(charlieTheCreator));\n        assertEq(edition.name(), \"The Collection\");\n\n        // when charlieTheCreator opens up public minting\n        hevm.prank(address(charlieTheCreator));\n        edition.setApprovedMinter(address(minter), true);\n\n        // then anybody can mint once via the minter contract\n        sharedTestOnePerAddress(address(edition));\n    }\n\n    function testCreateMintableCollectionViaMetaFactory() public {\n        // setup\n        MetaSingleEditionMintableCreator metaEditionCreator =\n            new MetaSingleEditionMintableCreator(address(0), address(editionCreator));\n\n        // when charlieTheCreator calls `createEdition`\n        hevm.prank(address(charlieTheCreator));\n        uint newId = metaEditionCreator.createEdition(\n            \"The Collection\",\n            \"DROP\",\n            \"The best collection in the world\",\n            \"\",     // _animationUrl\n            0x0,    // _animationHash\n            \"ipfs://SOME_IMAGE_CID\",\n            keccak256(\"this is not really used, is it?\"),\n            0,      // _editionSize, 0 means unlimited\n            1000,   // _royaltyBPS\n\n            address(minter));\n\n        // then we get a properly configured collection\n        ISingleEditionMintable edition = metaEditionCreator.getEditionAtId(newId);\n        assertEq(edition.owner(), address(charlieTheCreator));\n        assertEq(edition.name(), \"The Collection\");\n\n        // and anybody can mint once via the minter contract\n        sharedTestOnePerAddress(address(edition));\n    }\n\n    function sharedTestOnePerAddress(address _edition) internal {\n        ISingleEditionMintable edition = ISingleEditionMintable(_edition);\n\n        // and anybody can mint\n        hevm.prank(address(alice));\n        minter.mintEdition(address(edition), address(alice));\n\n        hevm.prank(address(bob));\n        minter.mintEdition(address(edition), address(bob));\n\n        // but only via the contract (unless you're the owner of the edition)\n        hevm.prank(address(alice));\n        hevm.expectRevert(\"Needs to be an allowed minter\");\n        edition.mintEdition(address(alice));\n\n        // and only once per address\n        hevm.prank(address(alice));\n        hevm.expectRevert(abi.encodeWithSignature(\"AlreadyMinted(address,address)\", address(edition), address(alice)));\n        minter.mintEdition(address(edition), address(alice));\n    }\n}\n"
    },
    "@zoralabs/nft-editions-contracts/contracts/SharedNFTLogic.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.6;\n\nimport {StringsUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport {Base64} from \"base64-sol/base64.sol\";\nimport {IPublicSharedMetadata} from \"./IPublicSharedMetadata.sol\";\n\n/// Shared NFT logic for rendering metadata associated with editions\n/// @dev Can safely be used for generic base64Encode and numberToString functions\ncontract SharedNFTLogic is IPublicSharedMetadata {\n    /// @param unencoded bytes to base64-encode\n    function base64Encode(bytes memory unencoded)\n        public\n        pure\n        override\n        returns (string memory)\n    {\n        return Base64.encode(unencoded);\n    }\n\n    /// Proxy to openzeppelin's toString function\n    /// @param value number to return as a string\n    function numberToString(uint256 value)\n        public\n        pure\n        override\n        returns (string memory)\n    {\n        return StringsUpgradeable.toString(value);\n    }\n\n    /// Generate edition metadata from storage information as base64-json blob\n    /// Combines the media data and metadata\n    /// @param name Name of NFT in metadata\n    /// @param description Description of NFT in metadata\n    /// @param imageUrl URL of image to render for edition\n    /// @param animationUrl URL of animation to render for edition\n    /// @param tokenOfEdition Token ID for specific token\n    /// @param editionSize Size of entire edition to show\n    function createMetadataEdition(\n        string memory name,\n        string memory description,\n        string memory imageUrl,\n        string memory animationUrl,\n        uint256 tokenOfEdition,\n        uint256 editionSize\n    ) external pure returns (string memory) {\n        string memory _tokenMediaData = tokenMediaData(\n            imageUrl,\n            animationUrl,\n            tokenOfEdition\n        );\n        bytes memory json = createMetadataJSON(\n            name,\n            description,\n            _tokenMediaData,\n            tokenOfEdition,\n            editionSize\n        );\n        return encodeMetadataJSON(json);\n    }\n\n    /// Function to create the metadata json string for the nft edition\n    /// @param name Name of NFT in metadata\n    /// @param description Description of NFT in metadata\n    /// @param mediaData Data for media to include in json object\n    /// @param tokenOfEdition Token ID for specific token\n    /// @param editionSize Size of entire edition to show\n    function createMetadataJSON(\n        string memory name,\n        string memory description,\n        string memory mediaData,\n        uint256 tokenOfEdition,\n        uint256 editionSize\n    ) public pure returns (bytes memory) {\n        bytes memory editionSizeText;\n        if (editionSize > 0) {\n            editionSizeText = abi.encodePacked(\n                \"/\",\n                numberToString(editionSize)\n            );\n        }\n        return\n            abi.encodePacked(\n                '{\"name\": \"',\n                name,\n                \" \",\n                numberToString(tokenOfEdition),\n                editionSizeText,\n                '\", \"',\n                'description\": \"',\n                description,\n                '\", \"',\n                mediaData,\n                'properties\": {\"number\": ',\n                numberToString(tokenOfEdition),\n                ', \"name\": \"',\n                name,\n                '\"}}'\n            );\n    }\n\n    /// Encodes the argument json bytes into base64-data uri format\n    /// @param json Raw json to base64 and turn into a data-uri\n    function encodeMetadataJSON(bytes memory json)\n        public\n        pure\n        override\n        returns (string memory)\n    {\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    base64Encode(json)\n                )\n            );\n    }\n\n    /// Generates edition metadata from storage information as base64-json blob\n    /// Combines the media data and metadata\n    /// @param imageUrl URL of image to render for edition\n    /// @param animationUrl URL of animation to render for edition\n    function tokenMediaData(\n        string memory imageUrl,\n        string memory animationUrl,\n        uint256 tokenOfEdition\n    ) public pure returns (string memory) {\n        bool hasImage = bytes(imageUrl).length > 0;\n        bool hasAnimation = bytes(animationUrl).length > 0;\n        if (hasImage && hasAnimation) {\n            return\n                string(\n                    abi.encodePacked(\n                        'image\": \"',\n                        imageUrl,\n                        \"?id=\",\n                        numberToString(tokenOfEdition),\n                        '\", \"animation_url\": \"',\n                        animationUrl,\n                        \"?id=\",\n                        numberToString(tokenOfEdition),\n                        '\", \"'\n                    )\n                );\n        }\n        if (hasImage) {\n            return\n                string(\n                    abi.encodePacked(\n                        'image\": \"',\n                        imageUrl,\n                        \"?id=\",\n                        numberToString(tokenOfEdition),\n                        '\", \"'\n                    )\n                );\n        }\n        if (hasAnimation) {\n            return\n                string(\n                    abi.encodePacked(\n                        'animation_url\": \"',\n                        animationUrl,\n                        \"?id=\",\n                        numberToString(tokenOfEdition),\n                        '\", \"'\n                    )\n                );\n        }\n\n        return \"\";\n    }\n}\n"
    },
    "@zoralabs/nft-editions-contracts/contracts/SingleEditionMintable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/**\n\n█▄░█ █▀▀ ▀█▀   █▀▀ █▀▄ █ ▀█▀ █ █▀█ █▄░█ █▀\n█░▀█ █▀░ ░█░   ██▄ █▄▀ █ ░█░ █ █▄█ █░▀█ ▄█\n\n▀█ █▀█ █▀█ ▄▀█\n█▄ █▄█ █▀▄ █▀█\n\n */\n\npragma solidity ^0.8.6;\n\nimport {ERC721Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {CountersUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport {AddressUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\nimport {SharedNFTLogic} from \"./SharedNFTLogic.sol\";\nimport {IEditionSingleMintable} from \"./IEditionSingleMintable.sol\";\n\n/**\n    This is a smart contract for handling dynamic contract minting.\n\n    @dev This allows creators to mint a unique serial edition of the same media within a custom contract\n    @author iain nash\n    Repository: https://github.com/ourzora/nft-editions\n*/\ncontract SingleEditionMintable is\n    ERC721Upgradeable,\n    IEditionSingleMintable,\n    IERC2981Upgradeable,\n    OwnableUpgradeable\n{\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n    event PriceChanged(uint256 amount);\n    event EditionSold(uint256 price, address owner);\n\n    // metadata\n    string public description;\n\n    // Media Urls\n    // animation_url field in the metadata\n    string private animationUrl;\n    // Hash for the associated animation\n    bytes32 private animationHash;\n    // Image in the metadata\n    string private imageUrl;\n    // Hash for the associated image\n    bytes32 private imageHash;\n\n    // Total size of edition that can be minted\n    uint256 public editionSize;\n    // Current token id minted\n    CountersUpgradeable.Counter private atEditionId;\n    // Royalty amount in bps\n    uint256 royaltyBPS;\n    // Addresses allowed to mint edition\n    mapping(address => bool) allowedMinters;\n\n    // Price for sale\n    uint256 public salePrice;\n\n    // NFT rendering logic contract\n    SharedNFTLogic private immutable sharedNFTLogic;\n\n    // Global constructor for factory\n    constructor(SharedNFTLogic _sharedNFTLogic) {\n        sharedNFTLogic = _sharedNFTLogic;\n    }\n\n    /**\n      @param _owner User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.\n      @param _name Name of edition, used in the title as \"$NAME NUMBER/TOTAL\"\n      @param _symbol Symbol of the new token contract\n      @param _description Description of edition, used in the description field of the NFT\n      @param _imageUrl Image URL of the edition. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a edition to render the NFT.\n      @param _imageHash SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero.\n      @param _animationUrl Animation URL of the edition. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs\n      @param _animationHash The associated hash of the animation in sha-256 bytes32 format. If animation is omitted the hash can be zero.\n      @param _editionSize Number of editions that can be minted in total. If 0, unlimited editions can be minted.\n      @param _royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.\n      @dev Function to create a new edition. Can only be called by the allowed creator\n           Sets the only allowed minter to the address that creates/owns the edition.\n           This can be re-assigned or updated later\n     */\n    function initialize(\n        address _owner,\n        string memory _name,\n        string memory _symbol,\n        string memory _description,\n        string memory _animationUrl,\n        bytes32 _animationHash,\n        string memory _imageUrl,\n        bytes32 _imageHash,\n        uint256 _editionSize,\n        uint256 _royaltyBPS\n    ) public initializer {\n        __ERC721_init(_name, _symbol);\n        __Ownable_init();\n        // Set ownership to original sender of contract call\n        transferOwnership(_owner);\n        description = _description;\n        animationUrl = _animationUrl;\n        animationHash = _animationHash;\n        imageUrl = _imageUrl;\n        imageHash = _imageHash;\n        editionSize = _editionSize;\n        royaltyBPS = _royaltyBPS;\n        // Set edition id start to be 1 not 0\n        atEditionId.increment();\n    }\n\n\n    /// @dev returns the number of minted tokens within the edition\n    function totalSupply() public view returns (uint256) {\n        return atEditionId.current() - 1;\n    }\n    /**\n        Simple eth-based sales function\n        More complex sales functions can be implemented through ISingleEditionMintable interface\n     */\n\n    /**\n      @dev This allows the user to purchase a edition edition\n           at the given price in the contract.\n     */\n    function purchase() external payable returns (uint256) {\n        require(salePrice > 0, \"Not for sale\");\n        require(msg.value == salePrice, \"Wrong price\");\n        address[] memory toMint = new address[](1);\n        toMint[0] = msg.sender;\n        emit EditionSold(salePrice, msg.sender);\n        return _mintEditions(toMint);\n    }\n\n    /**\n      @param _salePrice if sale price is 0 sale is stopped, otherwise that amount \n                       of ETH is needed to start the sale.\n      @dev This sets a simple ETH sales price\n           Setting a sales price allows users to mint the edition until it sells out.\n           For more granular sales, use an external sales contract.\n     */\n    function setSalePrice(uint256 _salePrice) external onlyOwner {\n        salePrice = _salePrice;\n        emit PriceChanged(salePrice);\n    }\n\n    /**\n      @dev This withdraws ETH from the contract to the contract owner.\n     */\n    function withdraw() external onlyOwner {\n        // No need for gas limit to trusted address.\n        AddressUpgradeable.sendValue(payable(owner()), address(this).balance);\n    }\n\n    /**\n      @dev This helper function checks if the msg.sender is allowed to mint the\n            given edition id.\n     */\n    function _isAllowedToMint() internal view returns (bool) {\n        if (owner() == msg.sender) {\n            return true;\n        }\n        if (allowedMinters[address(0x0)]) {\n            return true;\n        }\n        return allowedMinters[msg.sender];\n    }\n\n    /**\n      @param to address to send the newly minted edition to\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\n     */\n    function mintEdition(address to) external override returns (uint256) {\n        require(_isAllowedToMint(), \"Needs to be an allowed minter\");\n        address[] memory toMint = new address[](1);\n        toMint[0] = to;\n        return _mintEditions(toMint);\n    }\n\n    /**\n      @param recipients list of addresses to send the newly minted editions to\n      @dev This mints multiple editions to the given list of addresses.\n     */\n    function mintEditions(address[] memory recipients)\n        external\n        override\n        returns (uint256)\n    {\n        require(_isAllowedToMint(), \"Needs to be an allowed minter\");\n        return _mintEditions(recipients);\n    }\n\n    /**\n        Simple override for owner interface.\n     */\n    function owner()\n        public\n        view\n        override(OwnableUpgradeable, IEditionSingleMintable)\n        returns (address)\n    {\n        return super.owner();\n    }\n\n    /**\n      @param minter address to set approved minting status for\n      @param allowed boolean if that address is allowed to mint\n      @dev Sets the approved minting status of the given address.\n           This requires that msg.sender is the owner of the given edition id.\n           If the ZeroAddress (address(0x0)) is set as a minter,\n             anyone will be allowed to mint.\n           This setup is similar to setApprovalForAll in the ERC721 spec.\n     */\n    function setApprovedMinter(address minter, bool allowed) public onlyOwner {\n        allowedMinters[minter] = allowed;\n    }\n\n    /**\n      @dev Allows for updates of edition urls by the owner of the edition.\n           Only URLs can be updated (data-uris are supported), hashes cannot be updated.\n     */\n    function updateEditionURLs(\n        string memory _imageUrl,\n        string memory _animationUrl\n    ) public onlyOwner {\n        imageUrl = _imageUrl;\n        animationUrl = _animationUrl;\n    }\n\n    /// Returns the number of editions allowed to mint (max_uint256 when open edition)\n    function numberCanMint() public view override returns (uint256) {\n        // Return max int if open edition\n        if (editionSize == 0) {\n            return type(uint256).max;\n        }\n        // atEditionId is one-indexed hence the need to remove one here\n        return editionSize + 1 - atEditionId.current();\n    }\n\n    /**\n        @param tokenId Token ID to burn\n        User burn function for token id \n     */\n    function burn(uint256 tokenId) public {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"Not approved\");\n        _burn(tokenId);\n    }\n\n    /**\n      @dev Private function to mint als without any access checks.\n           Called by the public edition minting functions.\n     */\n    function _mintEditions(address[] memory recipients)\n        internal\n        returns (uint256)\n    {\n        uint256 startAt = atEditionId.current();\n        uint256 endAt = startAt + recipients.length - 1;\n        require(editionSize == 0 || endAt <= editionSize, \"Sold out\");\n        while (atEditionId.current() <= endAt) {\n            _mint(\n                recipients[atEditionId.current() - startAt],\n                atEditionId.current()\n            );\n            atEditionId.increment();\n        }\n        return atEditionId.current();\n    }\n\n    /**\n      @dev Get URIs for edition NFT\n      @return imageUrl, imageHash, animationUrl, animationHash\n     */\n    function getURIs()\n        public\n        view\n        returns (\n            string memory,\n            bytes32,\n            string memory,\n            bytes32\n        )\n    {\n        return (imageUrl, imageHash, animationUrl, animationHash);\n    }\n\n    /**\n        @dev Get royalty information for token\n        @param _salePrice Sale price for the token\n     */\n    function royaltyInfo(uint256, uint256 _salePrice)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        if (owner() == address(0x0)) {\n            return (owner(), 0);\n        }\n        return (owner(), (_salePrice * royaltyBPS) / 10_000);\n    }\n\n    /**\n        @dev Get URI for given token id\n        @param tokenId token id to get uri for\n        @return base64-encoded json metadata object\n    */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        require(_exists(tokenId), \"No token\");\n\n        return\n            sharedNFTLogic.createMetadataEdition(\n                name(),\n                description,\n                imageUrl,\n                animationUrl,\n                tokenId,\n                editionSize\n            );\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721Upgradeable, IERC165Upgradeable)\n        returns (bool)\n    {\n        return\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\n            ERC721Upgradeable.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@zoralabs/nft-editions-contracts/contracts/SingleEditionMintableCreator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/**\n\n█▄░█ █▀▀ ▀█▀   █▀▀ █▀▄ █ ▀█▀ █ █▀█ █▄░█ █▀\n█░▀█ █▀░ ░█░   ██▄ █▄▀ █ ░█░ █ █▄█ █░▀█ ▄█\n\n▀█ █▀█ █▀█ ▄▀█\n█▄ █▄█ █▀▄ █▀█\n\n */\n\npragma solidity ^0.8.6;\n\nimport {ClonesUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\";\nimport {CountersUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\n\nimport \"./SingleEditionMintable.sol\";\n\ncontract SingleEditionMintableCreator {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    /// Counter for current contract id upgraded\n    CountersUpgradeable.Counter private atContract;\n\n    /// Address for implementation of SingleEditionMintable to clone\n    address public implementation;\n\n    /// Initializes factory with address of implementation logic\n    /// @param _implementation SingleEditionMintable logic implementation contract to clone\n    constructor(address _implementation) {\n        implementation = _implementation;\n    }\n\n    /// Creates a new edition contract as a factory with a deterministic address\n    /// Important: None of these fields (except the Url fields with the same hash) can be changed after calling\n    /// @param _name Name of the edition contract\n    /// @param _symbol Symbol of the edition contract\n    /// @param _description Metadata: Description of the edition entry\n    /// @param _animationUrl Metadata: Animation url (optional) of the edition entry\n    /// @param _animationHash Metadata: SHA-256 Hash of the animation (if no animation url, can be 0x0)\n    /// @param _imageUrl Metadata: Image url (semi-required) of the edition entry\n    /// @param _imageHash Metadata: SHA-256 hash of the Image of the edition entry (if not image, can be 0x0)\n    /// @param _editionSize Total size of the edition (number of possible editions)\n    /// @param _royaltyBPS BPS amount of royalty\n    function createEdition(\n        string memory _name,\n        string memory _symbol,\n        string memory _description,\n        string memory _animationUrl,\n        bytes32 _animationHash,\n        string memory _imageUrl,\n        bytes32 _imageHash,\n        uint256 _editionSize,\n        uint256 _royaltyBPS\n    ) external returns (uint256) {\n        uint256 newId = atContract.current();\n        address newContract = ClonesUpgradeable.cloneDeterministic(\n            implementation,\n            bytes32(abi.encodePacked(newId))\n        );\n        SingleEditionMintable(newContract).initialize(\n            msg.sender,\n            _name,\n            _symbol,\n            _description,\n            _animationUrl,\n            _animationHash,\n            _imageUrl,\n            _imageHash,\n            _editionSize,\n            _royaltyBPS\n        );\n        emit CreatedEdition(newId, msg.sender, _editionSize, newContract);\n        // Returns the ID of the recently created minting contract\n        // Also increments for the next contract creation call\n        atContract.increment();\n        return newId;\n    }\n\n    /// Get edition given the created ID\n    /// @param editionId id of edition to get contract for\n    /// @return SingleEditionMintable Edition NFT contract\n    function getEditionAtId(uint256 editionId)\n        external\n        view\n        returns (SingleEditionMintable)\n    {\n        return\n            SingleEditionMintable(\n                ClonesUpgradeable.predictDeterministicAddress(\n                    implementation,\n                    bytes32(abi.encodePacked(editionId)),\n                    address(this)\n                )\n            );\n    }\n\n    /// Emitted when a edition is created reserving the corresponding token IDs.\n    /// @param editionId ID of newly created edition\n    event CreatedEdition(\n        uint256 indexed editionId,\n        address indexed creator,\n        uint256 editionSize,\n        address editionContractAddress\n    );\n}\n"
    },
    "src/periphery/OnePerAddressEditionMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport {IEditionSingleMintable} from \"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\";\n\nimport { BaseRelayRecipient } from \"../utils/BaseRelayRecipient.sol\";\n\ncontract OnePerAddressEditionMinter is BaseRelayRecipient {\n    error AlreadyMinted(address collection, address operator);\n\n    mapping(bytes32 => bool) minted;\n\n    constructor(address _trustedForwarder) {\n        trustedForwarder = _trustedForwarder;\n    }\n\n    function mintEdition(address collection, address _to) external {\n        address operator = _msgSender();\n        bytes32 _mintId = mintId(collection, operator);\n\n        if (minted[_mintId]) {\n            revert AlreadyMinted(collection, operator);\n        }\n\n        minted[_mintId] = true;\n        IEditionSingleMintable(collection).mintEdition(_to);\n    }\n\n    function mintId(address collection, address operator) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(collection, operator));\n    }\n\n    function hasMinted(address collection, address operator) public view returns (bool) {\n        return minted[mintId(collection, operator)];\n    }\n}"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@zoralabs/nft-editions-contracts/contracts/IPublicSharedMetadata.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.6;\n\n/// Shared public library for on-chain NFT functions\ninterface IPublicSharedMetadata {\n    /// @param unencoded bytes to base64-encode\n    function base64Encode(bytes memory unencoded)\n        external\n        pure\n        returns (string memory);\n\n    /// Encodes the argument json bytes into base64-data uri format\n    /// @param json Raw json to base64 and turn into a data-uri\n    function encodeMetadataJSON(bytes memory json)\n        external\n        pure\n        returns (string memory);\n\n    /// Proxy to openzeppelin's toString function\n    /// @param value number to return as a string\n    function numberToString(uint256 value)\n        external\n        pure\n        returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.6;\n\ninterface IEditionSingleMintable {\n  function mintEdition(address to) external returns (uint256);\n  function mintEditions(address[] memory to) external returns (uint256);\n  function numberCanMint() external view returns (uint256);\n  function owner() external view returns (address);\n}"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary ClonesUpgradeable {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "src/lib/gsn/forwarder/IForwarder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/interfaces/IERC165.sol\";\n\n/**\n * @title The Forwarder Interface\n * @notice The contracts implementing this interface take a role of authorization, authentication and replay protection\n * for contracts that choose to trust a `Forwarder`, instead of relying on a mechanism built into the Ethereum protocol.\n *\n * @notice if the `Forwarder` contract decides that an incoming `ForwardRequest` is valid, it must append 20 bytes that\n * represent the caller to the `data` field of the request and send this new data to the target address (the `to` field)\n *\n * :warning: **Warning** :warning: The Forwarder can have a full control over a `Recipient` contract.\n * Any vulnerability in a `Forwarder` implementation can make all of its `Recipient` contracts susceptible!\n * Recipient contracts should only trust forwarders that passed through security audit,\n * otherwise they are susceptible to identity theft.\n */\ninterface IForwarder is IERC165 {\n\n    /**\n     * @notice A representation of a request for a `Forwarder` to send `data` on behalf of a `from` to a target (`to`).\n     */\n    struct ForwardRequest {\n        address from;\n        address to;\n        uint256 value;\n        uint256 gas;\n        uint256 nonce;\n        bytes data;\n        uint256 validUntilTime;\n    }\n\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\n\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\n\n    /**\n     * @param from The address of a sender.\n     * @return The nonce for this address.\n     */\n    function getNonce(address from)\n    external view\n    returns(uint256);\n\n    /**\n     * @notice Verify the transaction is valid and can be executed.\n     * Implementations must validate the signature and the nonce of the request are correct.\n     * Does not revert and returns successfully if the input is valid.\n     * Reverts if any validation has failed. For instance, if either signature or nonce are incorrect.\n     * Reverts if `domainSeparator` or `requestTypeHash` are not registered as well.\n     */\n    function verify(\n        ForwardRequest calldata forwardRequest,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata signature\n    ) external view;\n\n    /**\n     * @notice Executes a transaction specified by the `ForwardRequest`.\n     * The transaction is first verified and then executed.\n     * The success flag and returned bytes array of the `CALL` are returned as-is.\n     *\n     * This method would revert only in case of a verification error.\n     *\n     * All the target errors are reported using the returned success flag and returned bytes array.\n     *\n     * @param forwardRequest All requested transaction parameters.\n     * @param domainSeparator The domain used when signing this request.\n     * @param requestTypeHash The request type used when signing this request.\n     * @param suffixData The ABI-encoded extension data for the current `RequestType` used when signing this request.\n     * @param signature The client signature to be validated.\n     *\n     * @return success The success flag of the underlying `CALL` to the target address.\n     * @return ret The byte array returned by the underlying `CALL` to the target address.\n     */\n    function execute(\n        ForwardRequest calldata forwardRequest,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata signature\n    )\n    external payable\n    returns (bool success, bytes memory ret);\n\n    /**\n     * @notice Register a new Request typehash.\n     *\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\n     *\n     * @param typeName The name of the request type.\n     * @param typeSuffix Any extra data after the generic params. Must contain add at least one param.\n     * The generic ForwardRequest type is always registered by the constructor.\n     */\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\n\n    /**\n     * @notice Register a new domain separator.\n     *\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\n     *\n     * @notice The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`.\n     * The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address.\n     * This method accepts the domain name and version to create and register the domain separator value.\n     * @param name The domain's display name.\n     * @param version The domain/protocol version.\n     */\n    function registerDomainSeparator(string calldata name, string calldata version) external;\n}\n"
    },
    "src/lib/gsn/forwarder/Forwarder.sol": {
      "content": "// solhint-disable not-rely-on-time\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./IForwarder.sol\";\n\n/**\n * @title The Forwarder Implementation\n * @notice This implementation of the `IForwarder` interface uses ERC-712 signatures and stored nonces for verification.\n */\ncontract Forwarder is IForwarder, ERC165 {\n    using ECDSA for bytes32;\n\n    string public constant GENERIC_PARAMS = \"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTime\";\n\n    string public constant EIP712_DOMAIN_TYPE = \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\n\n    mapping(bytes32 => bool) public typeHashes;\n    mapping(bytes32 => bool) public domains;\n\n    // Nonces of senders, used to prevent replay attacks\n    mapping(address => uint256) private nonces;\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    /// @inheritdoc IForwarder\n    function getNonce(address from)\n    public view override\n    returns (uint256) {\n        return nonces[from];\n    }\n\n    constructor() {\n        string memory requestType = string(abi.encodePacked(\"ForwardRequest(\", GENERIC_PARAMS, \")\"));\n        registerRequestTypeInternal(requestType);\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IForwarder).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /// @inheritdoc IForwarder\n    function verify(\n        ForwardRequest calldata req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig)\n    external override view {\n        _verifyNonce(req);\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\n    }\n\n    /// @inheritdoc IForwarder\n    function execute(\n        ForwardRequest calldata req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig\n    )\n    external payable\n    override\n    returns (bool success, bytes memory ret) {\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\n        _verifyAndUpdateNonce(req);\n\n        require(req.validUntilTime == 0 || req.validUntilTime > block.timestamp, \"FWD: request expired\");\n\n        uint256 gasForTransfer = 0;\n        if ( req.value != 0 ) {\n            gasForTransfer = 40000; //buffer in case we need to move eth after the transaction.\n        }\n        bytes memory callData = abi.encodePacked(req.data, req.from);\n        require(gasleft()*63/64 >= req.gas + gasForTransfer, \"FWD: insufficient gas\");\n        // solhint-disable-next-line avoid-low-level-calls\n        (success,ret) = req.to.call{gas : req.gas, value : req.value}(callData);\n        if ( req.value != 0 && address(this).balance>0 ) {\n            // can't fail: req.from signed (off-chain) the request, so it must be an EOA...\n            payable(req.from).transfer(address(this).balance);\n        }\n\n        return (success,ret);\n    }\n\n    function _verifyNonce(ForwardRequest calldata req) internal view {\n        require(nonces[req.from] == req.nonce, \"FWD: nonce mismatch\");\n    }\n\n    function _verifyAndUpdateNonce(ForwardRequest calldata req) internal {\n        require(nonces[req.from]++ == req.nonce, \"FWD: nonce mismatch\");\n    }\n\n    /// @inheritdoc IForwarder\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external override {\n\n        for (uint256 i = 0; i < bytes(typeName).length; i++) {\n            bytes1 c = bytes(typeName)[i];\n            require(c != \"(\" && c != \")\", \"FWD: invalid typename\");\n        }\n\n        string memory requestType = string(abi.encodePacked(typeName, \"(\", GENERIC_PARAMS, \",\", typeSuffix));\n        registerRequestTypeInternal(requestType);\n    }\n\n    /// @inheritdoc IForwarder\n    function registerDomainSeparator(string calldata name, string calldata version) external override {\n        uint256 chainId;\n        /* solhint-disable-next-line no-inline-assembly */\n        assembly { chainId := chainid() }\n\n        bytes memory domainValue = abi.encode(\n            keccak256(bytes(EIP712_DOMAIN_TYPE)),\n            keccak256(bytes(name)),\n            keccak256(bytes(version)),\n            chainId,\n            address(this));\n\n        bytes32 domainHash = keccak256(domainValue);\n\n        domains[domainHash] = true;\n        emit DomainRegistered(domainHash, domainValue);\n    }\n\n    function registerRequestTypeInternal(string memory requestType) internal {\n\n        bytes32 requestTypehash = keccak256(bytes(requestType));\n        typeHashes[requestTypehash] = true;\n        emit RequestTypeRegistered(requestTypehash, requestType);\n    }\n\n    function _verifySig(\n        ForwardRequest calldata req,\n        bytes32 domainSeparator,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData,\n        bytes calldata sig)\n    internal\n    virtual\n    view\n    {\n        require(domains[domainSeparator], \"FWD: unregistered domain sep.\");\n        require(typeHashes[requestTypeHash], \"FWD: unregistered typehash\");\n        bytes32 digest = keccak256(abi.encodePacked(\n                \"\\x19\\x01\", domainSeparator,\n                keccak256(_getEncoded(req, requestTypeHash, suffixData))\n            ));\n        require(digest.recover(sig) == req.from, \"FWD: signature mismatch\");\n    }\n\n    /**\n     * @notice Creates a byte array that is a valid ABI encoding of a request of a `RequestType` type. See `execute()`.\n     */\n    function _getEncoded(\n        ForwardRequest calldata req,\n        bytes32 requestTypeHash,\n        bytes calldata suffixData\n    )\n    public\n    pure\n    returns (\n        bytes memory\n    ) {\n        // we use encodePacked since we append suffixData as-is, not as dynamic param.\n        // still, we must make sure all first params are encoded as abi.encode()\n        // would encode them - as 256-bit-wide params.\n        return abi.encodePacked(\n            requestTypeHash,\n            uint256(uint160(req.from)),\n            uint256(uint160(req.to)),\n            req.value,\n            req.gas,\n            req.nonce,\n            keccak256(req.data),\n            req.validUntilTime,\n            suffixData\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "src/periphery/ShowtimeForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport {Forwarder} from \"../lib/gsn/forwarder/Forwarder.sol\";\n\ncontract ShowtimeForwarder is Forwarder {\n    /// no extra functionality\n}"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}