{
  "address": "0xefb210C93388F50b4611664C97b12f61c2c04F7f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DeadlineTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TemporalAnomaly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "UnknownSigner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_ATTESTATION_VALIDITY_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SIGNER_VALIDITY_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "context",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "signedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "validityDays",
          "type": "uint256"
        }
      ],
      "name": "registerSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestType",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "revokeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signerManager",
          "type": "address"
        }
      ],
      "name": "setSignerManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signerManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signerValidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "typeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "encodedData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "context",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "signedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xba919d89f103bc11f2a72df4d69a45c704016bf089af2b7c0e8ad20438902dbe",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x515F7d84cEE53051b7ADF645fA2220f65BC25c68",
    "contractAddress": null,
    "transactionIndex": 5,
    "gasUsed": "1025484",
    "logsBloom": "0x
    "blockHash": "0x1dd4bc1b2f8aec41128d6ce3a91dc3be58bf82acfc14bb2f2afc95850ef52f93",
    "transactionHash": "0xba919d89f103bc11f2a72df4d69a45c704016bf089af2b7c0e8ad20438902dbe",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 27374651,
        "transactionHash": "0xba919d89f103bc11f2a72df4d69a45c704016bf089af2b7c0e8ad20438902dbe",
        "address": "0xefb210C93388F50b4611664C97b12f61c2c04F7f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x1dd4bc1b2f8aec41128d6ce3a91dc3be58bf82acfc14bb2f2afc95850ef52f93"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 27374651,
        "transactionHash": "0xba919d89f103bc11f2a72df4d69a45c704016bf089af2b7c0e8ad20438902dbe",
        "address": "0xefb210C93388F50b4611664C97b12f61c2c04F7f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000515f7d84cee53051b7adf645fa2220f65bc25c68"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x1dd4bc1b2f8aec41128d6ce3a91dc3be58bf82acfc14bb2f2afc95850ef52f93"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 27374651,
        "transactionHash": "0xba919d89f103bc11f2a72df4d69a45c704016bf089af2b7c0e8ad20438902dbe",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000515f7d84cee53051b7adf645fa2220f65bc25c68",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000083e09e897af5fc000000000000000000000000000000000000000000000000069ed9ed6b33c1c300000000000000000000000000000000000000000000071bbaf42f16c179e8fe000000000000000000000000000000000000000000000000061af94ee1b8cbc700000000000000000000000000000000000000000000071bbb780fb54af4defa",
        "logIndex": 11,
        "blockHash": "0x1dd4bc1b2f8aec41128d6ce3a91dc3be58bf82acfc14bb2f2afc95850ef52f93"
      }
    ],
    "blockNumber": 27374651,
    "cumulativeGasUsed": "1297781",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x515F7d84cEE53051b7ADF645fA2220f65BC25c68"
  ],
  "numDeployments": 2,
  "solcInputHash": "6e006ac2da1fb2d2a6f2f1ce39c0426d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DeadlineTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TemporalAnomaly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"UnknownSigner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ATTESTATION_VALIDITY_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SIGNER_VALIDITY_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validityDays\",\"type\":\"uint256\"}],\"name\":\"registerSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestType\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"revokeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signerManager\",\"type\":\"address\"}],\"name\":\"setSignerManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerValidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"typeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encodedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerSigner(address,uint256)\":{\"params\":{\"signer\":\"the new signer to register\",\"validityDays\":\"how long the signer will be valid starting from the moment of registration\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setSignerManager(address)\":{\"params\":{\"_signerManager\":\"the address that will be authorized to add and remove signers (use address 0 to disable)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verify((address,address,uint256,uint256),bytes)\":{\"params\":{\"attestation\":\"the attestation to verify\",\"signature\":\"the signature of the attestation\"},\"returns\":{\"_0\":\"true if the attestation is valid, reverts otherwise\"}},\"verify(bytes32,bytes,bytes)\":{\"details\":\"see https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct\",\"params\":{\"encodedData\":\"the EIP712-encoded struct data to be verified (32 bytes long members, hashed dynamic types)\",\"signature\":\"the signature of the hashed struct\",\"typeHash\":\"the EIP712 type hash for the struct data to be verified\"},\"returns\":{\"_0\":\"true if the signature is valid, reverts otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"registerSigner(address,uint256)\":{\"notice\":\"Registers an authorized signer\"},\"revokeSigner(address)\":{\"notice\":\"Remove an authorized signer\"},\"setSignerManager(address)\":{\"notice\":\"Delegates the signer management to another address\"},\"verify((address,address,uint256,uint256),bytes)\":{\"notice\":\"Verifies the given attestationAttestations contain no nonces, so it is up to the calling contract to ensure replay-safety\"},\"verify(bytes32,bytes,bytes)\":{\"notice\":\"Verifies arbitrary typed data\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ShowtimeVerifier.sol\":\"ShowtimeVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"src/ShowtimeVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { EIP712, ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\nimport { IShowtimeVerifier, Attestation } from \\\"./interfaces/IShowtimeVerifier.sol\\\";\\n\\ncontract ShowtimeVerifier is Ownable, EIP712, IShowtimeVerifier {\\n    /*//////////////////////////////////////////////////////////////\\n                                CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n    bytes public constant requestType =\\n        \\\"Attestation(address beneficiary,address context,uint256 signedAt,uint256 validUntil)\\\";\\n\\n    bytes32 public constant REQUEST_TYPE_HASH = keccak256(requestType);\\n\\n    uint256 public constant MAX_ATTESTATION_VALIDITY_SECONDS = 5 * 60;\\n\\n    uint256 public constant MAX_SIGNER_VALIDITY_DAYS = 365;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MUTABLE STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n    mapping(address => uint256) public signerValidity;\\n\\n    address public signerManager;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MISE EN BOUCHE\\n    //////////////////////////////////////////////////////////////*/\\n    constructor(address _owner) EIP712(\\\"showtime.xyz\\\", \\\"v1\\\") Ownable() {\\n        transferOwnership(_owner);\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != owner() && msg.sender != signerManager) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    function domainSeparator() public view returns(bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            VERIFICATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function encode(Attestation memory attestation) public pure returns (bytes memory) {\\n        return abi.encode(\\n            attestation.beneficiary,\\n            attestation.context,\\n            attestation.signedAt,\\n            attestation.validUntil\\n        );\\n    }\\n\\n    /// @notice Verifies the given attestation\\n    /// @notice Attestations contain no nonces, so it is up to the calling contract to ensure replay-safety\\n    /// @param attestation the attestation to verify\\n    /// @param signature the signature of the attestation\\n    /// @return true if the attestation is valid, reverts otherwise\\n    function verify(Attestation calldata attestation, bytes calldata signature) external view override returns (bool) {\\n        uint256 signedAt = attestation.signedAt;\\n        uint256 validUntil = attestation.validUntil;\\n\\n        if (signedAt > block.timestamp) {\\n            revert TemporalAnomaly();\\n        }\\n\\n        if (block.timestamp > validUntil) {\\n            revert Expired();\\n        }\\n\\n        if ((validUntil - signedAt) > MAX_ATTESTATION_VALIDITY_SECONDS) {\\n            revert DeadlineTooLong();\\n        }\\n\\n        // what we want is EIP712 encoding, not ABI encoding\\n        return verify(REQUEST_TYPE_HASH, encode(attestation), signature);\\n    }\\n\\n\\n    /// @notice Verifies arbitrary typed data\\n    /// @dev see https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct\\n    /// @param typeHash the EIP712 type hash for the struct data to be verified\\n    /// @param encodedData the EIP712-encoded struct data to be verified (32 bytes long members, hashed dynamic types)\\n    /// @param signature the signature of the hashed struct\\n    /// @return true if the signature is valid, reverts otherwise\\n    function verify(bytes32 typeHash, bytes memory encodedData, bytes calldata signature) public view returns (bool) {\\n        bytes32 structHash = keccak256(abi.encodePacked(typeHash, encodedData));\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n        address signer = ECDSA.recover(digest, signature);\\n        uint256 signerExpirationTimestamp = signerValidity[signer];\\n\\n        if (signerExpirationTimestamp == 0) {\\n            revert UnknownSigner(signer);\\n        }\\n\\n        if (block.timestamp > signerExpirationTimestamp) {\\n            revert SignerExpired(signer);\\n        }\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        SIGNER MANAGEMENT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// Delegates the signer management to another address\\n    /// @param _signerManager the address that will be authorized to add and remove signers (use address 0 to disable)\\n    function setSignerManager(address _signerManager) external override onlyOwner {\\n        signerManager = _signerManager;\\n    }\\n\\n    /// Registers an authorized signer\\n    /// @param signer the new signer to register\\n    /// @param validityDays how long the signer will be valid starting from the moment of registration\\n    function registerSigner(address signer, uint256 validityDays) external override onlyAdmin {\\n        if (validityDays > MAX_SIGNER_VALIDITY_DAYS) {\\n            revert DeadlineTooLong();\\n        }\\n\\n        signerValidity[signer] = block.timestamp + validityDays * 24 * 60 * 60;\\n    }\\n\\n    /// Remove an authorized signer\\n    function revokeSigner(address signer) external override onlyAdmin {\\n        signerValidity[signer] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdb1a8d9ab1be6d543aff7680d4db5ed80c4cf0c42cb2a44af9b85cfaaa8bcb80\",\"license\":\"MIT\"},\"src/interfaces/IShowtimeVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nstruct Attestation {\\n    address beneficiary;\\n    address context;\\n    uint256 signedAt;\\n    uint256 validUntil;\\n}\\n\\ninterface IShowtimeVerifier {\\n    error DeadlineTooLong();\\n    error Expired();\\n    error NullAddress();\\n    error SignerExpired(address signer);\\n    error TemporalAnomaly();\\n    error Unauthorized();\\n    error UnknownSigner(address signer);\\n\\n    function verify(Attestation calldata attestation, bytes calldata signature) external view returns (bool);\\n    function setSignerManager(address _signerManager) external;\\n    function registerSigner(address signer, uint256 validityDays) external;\\n    function revokeSigner(address signer) external;\\n}\\n\",\"keccak256\":\"0xdee3478709684a41bd2ab77872f1f5c46aac4745ca1eb2b3314e63f905e00236\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063cb74082d11610097578063edf8f87811610066578063edf8f87814610207578063f2fde38b14610227578063f698da251461023a578063fde6360a1461024257600080fd5b8063cb74082d146101bb578063cba89d58146101ce578063cfe19798146101e1578063d7bdd1ae146101f457600080fd5b8063715018a6116100d3578063715018a6146101705780638da5cb5b1461017a578063c34b44a01461019f578063ca194c24146101b257600080fd5b80632ff3696914610105578063308b5569146101235780633840497c1461013a5780635bf48e3a1461014d575b600080fd5b61010d61024a565b60405161011a9190610f63565b60405180910390f35b61012c61012c81565b60405190815260200161011a565b61010d610148366004610ecb565b610266565b61016061015b366004610dad565b6102c9565b604051901515815260200161011a565b6101786103cb565b005b6000546001600160a01b03165b6040516001600160a01b03909116815260200161011a565b6101786101ad366004610d61565b610431565b61012c61016d81565b6101606101c9366004610e70565b61048e565b600254610187906001600160a01b031681565b6101786101ef366004610d61565b61054f565b610178610202366004610d83565b6105d8565b61012c610215366004610d61565b60016020526000908152604090205481565b610178610235366004610d61565b610689565b61012c61076b565b61012c61077a565b6040518060800160405280605481526020016110886054913981565b606081600001518260200151836040015184606001516040516020016102b394939291906001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6040516020818303038152906040529050919050565b60008085856040516020016102df929190610f3d565b60405160208183030381529060405280519060200120905060006103028261079d565b905060006103468287878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107f192505050565b6001600160a01b0381166000908152600160205260409020549091508061039057604051636bf4516160e11b81526001600160a01b03831660048201526024015b60405180910390fd5b804211156103bc57604051635b0a554360e01b81526001600160a01b0383166004820152602401610387565b50600198975050505050505050565b6000546001600160a01b031633146104255760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610387565b61042f6000610815565b565b6000546001600160a01b0316331480159061045757506002546001600160a01b03163314155b15610474576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0316600090815260016020526040812055565b600060408401356060850135428211156104bb57604051637ba319a560e11b815260040160405180910390fd5b804211156104dc57604051630407b05b60e31b815260040160405180910390fd5b61012c6104e98383610ffe565b1115610508576040516354090af960e01b815260040160405180910390fd5b61054560405180608001604052806054815260200161108860549139805160209091012061053e610148368a90038a018a610ecb565b87876102c9565b9695505050505050565b6000546001600160a01b031633146105a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610387565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633148015906105fe57506002546001600160a01b03163314155b1561061b576040516282b42960e81b815260040160405180910390fd5b61016d81111561063e576040516354090af960e01b815260040160405180910390fd5b610649816018610fdf565b61065490603c610fdf565b61065f90603c610fdf565b6106699042610fc7565b6001600160a01b0390921660009081526001602052604090209190915550565b6000546001600160a01b031633146106e35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610387565b6001600160a01b03811661075f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610387565b61076881610815565b50565b6000610775610872565b905090565b604051806080016040528060548152602001611088605491398051906020012081565b60006107eb6107aa610872565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b60008060006108008585610999565b9150915061080d81610a09565b509392505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156108cb57507f000000000000000000000000000000000000000000000000000000000000000046145b156108f557507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156109d05760208301516040840151606085015160001a6109c487828585610bc4565b94509450505050610a02565b8251604014156109fa57602083015160408401516109ef868383610cb1565b935093505050610a02565b506000905060025b9250929050565b6000816004811115610a1d57610a1d61105b565b1415610a265750565b6001816004811115610a3a57610a3a61105b565b1415610a885760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610387565b6002816004811115610a9c57610a9c61105b565b1415610aea5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610387565b6003816004811115610afe57610afe61105b565b1415610b575760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610387565b6004816004811115610b6b57610b6b61105b565b14156107685760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610387565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610bfb5750600090506003610ca8565b8460ff16601b14158015610c1357508460ff16601c14155b15610c245750600090506004610ca8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610c78573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610ca157600060019250925050610ca8565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681610ce760ff86901c601b610fc7565b9050610cf587828885610bc4565b935093505050935093915050565b80356001600160a01b0381168114610d1a57600080fd5b919050565b60008083601f840112610d3157600080fd5b50813567ffffffffffffffff811115610d4957600080fd5b602083019150836020828501011115610a0257600080fd5b600060208284031215610d7357600080fd5b610d7c82610d03565b9392505050565b60008060408385031215610d9657600080fd5b610d9f83610d03565b946020939093013593505050565b60008060008060608587031215610dc357600080fd5b8435935060208086013567ffffffffffffffff80821115610de357600080fd5b818801915088601f830112610df757600080fd5b813581811115610e0957610e09611071565b610e1b601f8201601f19168501610f96565b8181528a85838601011115610e2f57600080fd5b818585018683013760009181019094015291945060408701359180831115610e5657600080fd5b5050610e6487828801610d1f565b95989497509550505050565b600080600083850360a0811215610e8657600080fd5b6080811215610e9457600080fd5b50839250608084013567ffffffffffffffff811115610eb257600080fd5b610ebe86828701610d1f565b9497909650939450505050565b600060808284031215610edd57600080fd5b6040516080810181811067ffffffffffffffff82111715610f0057610f00611071565b604052610f0c83610d03565b8152610f1a60208401610d03565b602082015260408301356040820152606083013560608201528091505092915050565b82815260008251610f55816020850160208701611015565b919091016020019392505050565b6020815260008251806020840152610f82816040850160208701611015565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610fbf57610fbf611071565b604052919050565b60008219821115610fda57610fda611045565b500190565b6000816000190483118215151615610ff957610ff9611045565b500290565b60008282101561101057611010611045565b500390565b60005b83811015611030578181015183820152602001611018565b8381111561103f576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4174746573746174696f6e28616464726573732062656e65666963696172792c6164647265737320636f6e746578742c75696e74323536207369676e656441742c75696e743235362076616c6964556e74696c29a164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerSigner(address,uint256)": {
        "params": {
          "signer": "the new signer to register",
          "validityDays": "how long the signer will be valid starting from the moment of registration"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setSignerManager(address)": {
        "params": {
          "_signerManager": "the address that will be authorized to add and remove signers (use address 0 to disable)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verify((address,address,uint256,uint256),bytes)": {
        "params": {
          "attestation": "the attestation to verify",
          "signature": "the signature of the attestation"
        },
        "returns": {
          "_0": "true if the attestation is valid, reverts otherwise"
        }
      },
      "verify(bytes32,bytes,bytes)": {
        "details": "see https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct",
        "params": {
          "encodedData": "the EIP712-encoded struct data to be verified (32 bytes long members, hashed dynamic types)",
          "signature": "the signature of the hashed struct",
          "typeHash": "the EIP712 type hash for the struct data to be verified"
        },
        "returns": {
          "_0": "true if the signature is valid, reverts otherwise"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "registerSigner(address,uint256)": {
        "notice": "Registers an authorized signer"
      },
      "revokeSigner(address)": {
        "notice": "Remove an authorized signer"
      },
      "setSignerManager(address)": {
        "notice": "Delegates the signer management to another address"
      },
      "verify((address,address,uint256,uint256),bytes)": {
        "notice": "Verifies the given attestationAttestations contain no nonces, so it is up to the calling contract to ensure replay-safety"
      },
      "verify(bytes32,bytes,bytes)": {
        "notice": "Verifies arbitrary typed data"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 472,
        "contract": "src/ShowtimeVerifier.sol:ShowtimeVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6044,
        "contract": "src/ShowtimeVerifier.sol:ShowtimeVerifier",
        "label": "signerValidity",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6046,
        "contract": "src/ShowtimeVerifier.sol:ShowtimeVerifier",
        "label": "signerManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}