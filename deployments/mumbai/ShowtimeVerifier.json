{
  "address": "0x4712e57fF5e4d053Dca30F76024dFE2792D6D2A9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "BadNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeadlineTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "UnknownSigner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "ManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        }
      ],
      "name": "SignerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_ATTESTATION_VALIDITY_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SIGNER_VALIDITY_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "context",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerToRegister",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signerToRevoke",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "validityDays",
          "type": "uint256"
        }
      ],
      "name": "registerAndRevoke",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "validityDays",
          "type": "uint256"
        }
      ],
      "name": "registerSigner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestType",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "revokeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signerValidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "context",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "typeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "encodedData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "context",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "context",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyAndBurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "context",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "typeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "encodedData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyAndBurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x524ecfa3c025c1e667c02de8fe0e3adf516328aee428bcc7e6a3840817f5984a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x515F7d84cEE53051b7ADF645fA2220f65BC25c68",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1424169",
    "logsBloom": "0x
    "blockHash": "0xa26e7e880d33c2b2e46c456bd63a231ae722e47acfcd2c1bb33e26e055128a3c",
    "transactionHash": "0x524ecfa3c025c1e667c02de8fe0e3adf516328aee428bcc7e6a3840817f5984a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27579322,
        "transactionHash": "0x524ecfa3c025c1e667c02de8fe0e3adf516328aee428bcc7e6a3840817f5984a",
        "address": "0x4712e57fF5e4d053Dca30F76024dFE2792D6D2A9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa26e7e880d33c2b2e46c456bd63a231ae722e47acfcd2c1bb33e26e055128a3c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27579322,
        "transactionHash": "0x524ecfa3c025c1e667c02de8fe0e3adf516328aee428bcc7e6a3840817f5984a",
        "address": "0x4712e57fF5e4d053Dca30F76024dFE2792D6D2A9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000515f7d84cee53051b7adf645fa2220f65bc25c68"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa26e7e880d33c2b2e46c456bd63a231ae722e47acfcd2c1bb33e26e055128a3c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27579322,
        "transactionHash": "0x524ecfa3c025c1e667c02de8fe0e3adf516328aee428bcc7e6a3840817f5984a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000515f7d84cee53051b7adf645fa2220f65bc25c68",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000d653a1532209040000000000000000000000000000000000000000000000000568499113fdd73b0000000000000000000000000000000000000000000007d3651203606241eec10000000000000000000000000000000000000000000000000491f5efc0dbce370000000000000000000000000000000000000000000007d365e85701b563f7c5",
        "logIndex": 2,
        "blockHash": "0xa26e7e880d33c2b2e46c456bd63a231ae722e47acfcd2c1bb33e26e055128a3c"
      }
    ],
    "blockNumber": 27579322,
    "cumulativeGasUsed": "1424169",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x515F7d84cEE53051b7ADF645fA2220f65BC25c68"
  ],
  "numDeployments": 4,
  "solcInputHash": "60bd1e977ce3660d49d0836214a7c382",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"BadNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"UnknownSigner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ATTESTATION_VALIDITY_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SIGNER_VALIDITY_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerToRegister\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToRevoke\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validityDays\",\"type\":\"uint256\"}],\"name\":\"registerAndRevoke\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validityDays\",\"type\":\"uint256\"}],\"name\":\"registerSigner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestType\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"revokeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerValidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"typeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encodedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyAndBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"typeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encodedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyAndBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerSigner(address,uint256)\":{\"params\":{\"signer\":\"the new signer to register\",\"validityDays\":\"how long the signer will be valid starting from the moment of registration\"},\"returns\":{\"validUntil\":\"the timestamp in seconds after which the signer expires\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setManager(address)\":{\"params\":{\"_manager\":\"the address that will be authorized to add and remove signers (use address 0 to disable)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verify((address,address,uint256,uint256),bytes)\":{\"params\":{\"attestation\":\"the attestation to verify\",\"signature\":\"the signature of the attestation\"},\"returns\":{\"_0\":\"true if the attestation is valid, reverts otherwise\"}},\"verify((address,address,uint256,uint256),bytes32,bytes,bytes)\":{\"details\":\"see https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct\",\"params\":{\"attestation\":\"the attestation to verify\",\"encodedData\":\"the EIP712-encoded struct data to be verified (32 bytes long members, hashed dynamic types)\",\"signature\":\"the signature of the hashed struct\",\"typeHash\":\"the EIP712 type hash for the struct data to be verified\"},\"returns\":{\"_0\":\"true if the signature is valid, reverts otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"nonces(address)\":{\"notice\":\"maps addresses to their nonces\"},\"registerAndRevoke(address,address,uint256)\":{\"notice\":\"Convenience function for the workflow where one expects a single active signer\"},\"registerSigner(address,uint256)\":{\"notice\":\"Registers an authorized signer\"},\"revokeSigner(address)\":{\"notice\":\"Remove an authorized signer\"},\"setManager(address)\":{\"notice\":\"Delegates the signer management to another address\"},\"verify((address,address,uint256,uint256),bytes)\":{\"notice\":\"Verifies the given attestationThis method does not increment the nonce so it provides no replay safety\"},\"verify((address,address,uint256,uint256),bytes32,bytes,bytes)\":{\"notice\":\"Verifies arbitrary typed dataThis method does not increment the nonce so it provides no replay safetyThe attestation SHOULD be part of the encodedData (i.e. a change in the attestation should change the signature)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ShowtimeVerifier.sol\":\"ShowtimeVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"src/ShowtimeVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { EIP712, ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\nimport { IShowtimeVerifier, Attestation } from \\\"./interfaces/IShowtimeVerifier.sol\\\";\\n\\ncontract ShowtimeVerifier is Ownable, EIP712, IShowtimeVerifier {\\n    /*//////////////////////////////////////////////////////////////\\n                                CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n    bytes public constant requestType =\\n        \\\"Attestation(address beneficiary,address context,uint256 nonce,uint256 validUntil)\\\";\\n\\n    bytes32 public constant REQUEST_TYPE_HASH = keccak256(requestType);\\n\\n    uint256 public constant MAX_ATTESTATION_VALIDITY_SECONDS = 5 * 60;\\n\\n    uint256 public constant MAX_SIGNER_VALIDITY_DAYS = 365;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MUTABLE STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public signerValidity;\\n\\n    /// maps addresses to their nonces\\n    mapping(address => uint256) public nonces;\\n\\n    address public manager;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MISE EN BOUCHE\\n    //////////////////////////////////////////////////////////////*/\\n    constructor(address _owner) EIP712(\\\"showtime.xyz\\\", \\\"v1\\\") Ownable() {\\n        transferOwnership(_owner);\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != owner() && msg.sender != manager) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    function domainSeparator() public view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            VERIFICATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function encode(Attestation memory attestation) public pure returns (bytes memory) {\\n        return abi.encode(attestation.beneficiary, attestation.context, attestation.nonce, attestation.validUntil);\\n    }\\n\\n    /// @notice Verifies the given attestation\\n    /// @notice This method does not increment the nonce so it provides no replay safety\\n    /// @param attestation the attestation to verify\\n    /// @param signature the signature of the attestation\\n    /// @return true if the attestation is valid, reverts otherwise\\n    function verify(Attestation calldata attestation, bytes calldata signature) public view override returns (bool) {\\n        // what we want is EIP712 encoding, not ABI encoding\\n        return verify(attestation, REQUEST_TYPE_HASH, encode(attestation), signature);\\n    }\\n\\n    /// @notice Verifies arbitrary typed data\\n    /// @notice This method does not increment the nonce so it provides no replay safety\\n    /// @dev see https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct\\n    /// @notice The attestation SHOULD be part of the encodedData (i.e. a change in the attestation should change the signature)\\n    /// @param attestation the attestation to verify\\n    /// @param typeHash the EIP712 type hash for the struct data to be verified\\n    /// @param encodedData the EIP712-encoded struct data to be verified (32 bytes long members, hashed dynamic types)\\n    /// @param signature the signature of the hashed struct\\n    /// @return true if the signature is valid, reverts otherwise\\n    function verify(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) public view override returns (bool) {\\n        /// TIMESTAMP VERIFICATION\\n        uint256 validUntil = attestation.validUntil;\\n        if (block.timestamp > validUntil) {\\n            revert Expired();\\n        }\\n\\n        if ((validUntil - block.timestamp) > MAX_ATTESTATION_VALIDITY_SECONDS) {\\n            revert DeadlineTooLong();\\n        }\\n\\n        /// NONCE VERIFICATION\\n        uint256 expectedNonce = nonces[attestation.beneficiary];\\n        if (expectedNonce != attestation.nonce) {\\n            revert BadNonce(expectedNonce, attestation.nonce);\\n        }\\n\\n        /// SIGNER VERIFICATION\\n        bytes32 structHash = keccak256(abi.encodePacked(typeHash, encodedData));\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n        address signer = ECDSA.recover(digest, signature);\\n        uint256 signerExpirationTimestamp = signerValidity[signer];\\n        if (signerExpirationTimestamp == 0) {\\n            revert UnknownSigner(signer);\\n        }\\n\\n        if (block.timestamp > signerExpirationTimestamp) {\\n            revert SignerExpired(signer);\\n        }\\n\\n        return true;\\n    }\\n\\n    function incrementNonce(address beneficiary) private {\\n        unchecked {\\n            ++nonces[beneficiary];\\n        }\\n    }\\n\\n    function verifyAndBurn(Attestation calldata attestation, bytes calldata signature)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        if (!verify(attestation, signature)) {\\n            return false;\\n        }\\n\\n        incrementNonce(attestation.beneficiary);\\n        return true;\\n    }\\n\\n    function verifyAndBurn(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external override returns (bool) {\\n        if (!verify(attestation, typeHash, encodedData, signature)) {\\n            return false;\\n        }\\n\\n        incrementNonce(attestation.beneficiary);\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        SIGNER MANAGEMENT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// Delegates the signer management to another address\\n    /// @param _manager the address that will be authorized to add and remove signers (use address 0 to disable)\\n    function setManager(address _manager) external override onlyOwner {\\n        manager = _manager;\\n\\n        emit ManagerUpdated(manager);\\n    }\\n\\n    function _registerSigner(address signer, uint256 validityDays) private returns (uint256 validUntil) {\\n        if (validityDays > MAX_SIGNER_VALIDITY_DAYS) {\\n            revert DeadlineTooLong();\\n        }\\n\\n        validUntil = block.timestamp + validityDays * 24 * 60 * 60;\\n        signerValidity[signer] = validUntil;\\n\\n        emit SignerAdded(signer, validUntil);\\n    }\\n\\n    /// Registers an authorized signer\\n    /// @param signer the new signer to register\\n    /// @param validityDays how long the signer will be valid starting from the moment of registration\\n    /// @return validUntil the timestamp in seconds after which the signer expires\\n    function registerSigner(address signer, uint256 validityDays)\\n        external\\n        override\\n        onlyAdmin\\n        returns (uint256 validUntil)\\n    {\\n        validUntil = _registerSigner(signer, validityDays);\\n    }\\n\\n    function _revokeSigner(address signer) private {\\n        signerValidity[signer] = 0;\\n        emit SignerRevoked(signer);\\n    }\\n\\n    /// Remove an authorized signer\\n    function revokeSigner(address signer) external override onlyAdmin {\\n        _revokeSigner(signer);\\n    }\\n\\n    /// @notice Convenience function for the workflow where one expects a single active signer\\n    function registerAndRevoke(\\n        address signerToRegister,\\n        address signerToRevoke,\\n        uint256 validityDays\\n    ) external override onlyAdmin returns (uint256 validUntil) {\\n        _revokeSigner(signerToRevoke);\\n        return _registerSigner(signerToRegister, validityDays);\\n    }\\n}\\n\",\"keccak256\":\"0xdb493e2e5cd252ade5ad8ca0d7907b10c62919179be5b68bcbe234bce0323115\",\"license\":\"MIT\"},\"src/interfaces/IShowtimeVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nstruct Attestation {\\n    address beneficiary;\\n    address context;\\n    uint256 nonce;\\n    uint256 validUntil;\\n}\\n\\ninterface IShowtimeVerifier {\\n    error BadNonce(uint256 expected, uint256 actual);\\n    error DeadlineTooLong();\\n    error Expired();\\n    error NullAddress();\\n    error SignerExpired(address signer);\\n    error Unauthorized();\\n    error UnknownSigner(address signer);\\n\\n    event SignerAdded(address signer, uint256 validUntil);\\n    event SignerRevoked(address signer);\\n    event ManagerUpdated(address newManager);\\n\\n    function verify(Attestation calldata attestation, bytes calldata signature) external view returns (bool);\\n    function verifyAndBurn(Attestation calldata attestation, bytes calldata signature) external returns (bool);\\n\\n    function verify(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external view returns (bool);\\n\\n    function verifyAndBurn(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external returns (bool);\\n\\n    function setManager(address _manager) external;\\n    function registerSigner(address signer, uint256 validityDays) external returns (uint256 validUntil);\\n    function revokeSigner(address signer) external;\\n    function registerAndRevoke(address signerToRegister, address signerToRevoke, uint256 validityDays)\\n        external returns (uint256 validUntil);\\n}\\n\",\"keccak256\":\"0xc9853a38462f8401a17f5dc3cb7661c2a3b92716c6d14baa6636f5a4547d0aff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162001b1c38038062001b1c833981016040819052620000359162000259565b6040518060400160405280600c81526020016b39b437bbba34b6b2973c3cbd60a11b81525060405180604001604052806002815260200161763160f01b8152506200008f620000896200013060201b60201c565b62000134565b815160209283012081519183019190912060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818301969096526060810194909452608080850193909352308483018190528151808603909301835260c09485019091528151919095012090529190915261012052620001298162000184565b506200028b565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001e45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166200024b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001db565b620002568162000134565b50565b6000602082840312156200026c57600080fd5b81516001600160a01b03811681146200028457600080fd5b9392505050565b60805160a05160c05160e0516101005161012051611841620002db6000396000610e6501526000610eb401526000610e8f01526000610de801526000610e1201526000610e3c01526118416000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c806396f18040116100cd578063d7bdd1ae11610081578063f2fde38b11610066578063f2fde38b14610313578063f698da2514610326578063fde6360a1461032e57600080fd5b8063d7bdd1ae146102e0578063edf8f878146102f357600080fd5b8063ca194c24116100b2578063ca194c24146102b1578063cb74082d146102ba578063d0ebdbe7146102cd57600080fd5b806396f180401461028b578063c34b44a01461029e57600080fd5b8063715018a6116101245780637ecebe00116101095780637ecebe001461023a57806385c104161461025a5780638da5cb5b1461026d57600080fd5b8063715018a61461020d57806376fb297f1461021757600080fd5b8063308b556911610155578063308b5569146101ac5780633840497c146101b5578063481c6a75146101c857600080fd5b806328425d51146101715780632ff3696914610197575b600080fd5b61018461017f366004611357565b610336565b6040519081526020015b60405180910390f35b61019f6103cb565b60405161018e91906113c3565b61018461012c81565b61019f6101c3366004611492565b6103e7565b6003546101e89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161018e565b610215610457565b005b61022a61022536600461155e565b6104e9565b604051901515815260200161018e565b6101846102483660046115b2565b60026020526000908152604090205481565b61022a6102683660046115cd565b610549565b60005473ffffffffffffffffffffffffffffffffffffffff166101e8565b61022a6102993660046115cd565b6107c4565b6102156102ac3660046115b2565b6107fb565b61018461016d81565b61022a6102c836600461155e565b61087e565b6102156102db3660046115b2565b6108be565b6101846102ee3660046116c9565b6109b9565b6101846103013660046115b2565b60016020526000908152604090205481565b6102156103213660046115b2565b610a3b565b610184610b68565b610184610b77565b6000805473ffffffffffffffffffffffffffffffffffffffff163314801590610377575060035473ffffffffffffffffffffffffffffffffffffffff163314155b156103ae576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b783610b9a565b6103c18483610bf3565b90505b9392505050565b6040518060800160405280605181526020016117e46051913981565b60608160000151826020015183604001518460600151604051602001610441949392919073ffffffffffffffffffffffffffffffffffffffff94851681529290931660208301526040820152606081019190915260800190565b6040516020818303038152906040529050919050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6104e76000610cc6565b565b60006104f684848461087e565b610502575060006103c4565b61053f61051260208601866115b2565b73ffffffffffffffffffffffffffffffffffffffff16600090815260026020526040902080546001019055565b5060019392505050565b600060608601354281101561058a576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012c6105974283611722565b11156105cf576040517f54090af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002816105e160208b018b6115b2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508760400135811461066857604080517f3ddd5131000000000000000000000000000000000000000000000000000000008152600481018390529089013560248201526044016104d4565b6000878760405160200161067d929190611739565b60405160208183030381529060405280519060200120905060006106a082610d3b565b905060006106e48289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610daa92505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081205491925081900361075e576040517fd7e8a2c200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016104d4565b804211156107b0576040517f5b0a554300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016104d4565b600196505050505050505b95945050505050565b60006107d38686868686610549565b6107df575060006107bb565b6107ef61051260208801886115b2565b50600195945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480159061083b575060035473ffffffffffffffffffffffffffffffffffffffff163314155b15610872576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61087b81610b9a565b50565b60006103c1846040518060800160405280605181526020016117e46051913980516020909101206108b76101c336899003890189611492565b8686610549565b60005473ffffffffffffffffffffffffffffffffffffffff16331461093f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d4565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f2c1c11af44aa5608f1dca38c00275c30ea091e02417d36e70e9a1538689c433d906020015b60405180910390a150565b6000805473ffffffffffffffffffffffffffffffffffffffff1633148015906109fa575060035473ffffffffffffffffffffffffffffffffffffffff163314155b15610a31576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103c48383610bf3565b60005473ffffffffffffffffffffffffffffffffffffffff163314610abc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d4565b73ffffffffffffffffffffffffffffffffffffffff8116610b5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104d4565b61087b81610cc6565b6000610b72610dce565b905090565b6040518060800160405280605181526020016117e4605191398051906020012081565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602090815260408083209290925590519182527f99a705a3c2c3339d0051f56b36a60fef91e30142c93353002617999f27aec4af91016109ae565b600061016d821115610c31576040517f54090af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c3c82601861175f565b610c4790603c61175f565b610c5290603c61175f565b610c5c904261179c565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260016020908152604091829020849055815192835282018390529192507f50999ebf9b59bf3157a58816611976f2d723378ad51457d7b0413209e0cdee59910160405180910390a192915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610da4610d48610dce565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610db98585610f02565b91509150610dc681610f70565b509392505050565b60003073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015610e3457507f000000000000000000000000000000000000000000000000000000000000000046145b15610e5e57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604103610f385760208301516040840151606085015160001a610f2c878285856111c4565b94509450505050610f69565b8251604003610f615760208301516040840151610f568683836112dc565b935093505050610f69565b506000905060025b9250929050565b6000816004811115610f8457610f846117b4565b03610f8c5750565b6001816004811115610fa057610fa06117b4565b03611007576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104d4565b600281600481111561101b5761101b6117b4565b03611082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104d4565b6003816004811115611096576110966117b4565b03611123576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104d4565b6004816004811115611137576111376117b4565b0361087b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104d4565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156111fb57506000905060036112d3565b8460ff16601b1415801561121357508460ff16601c14155b1561122457506000905060046112d3565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611278573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166112cc576000600192509250506112d3565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161131260ff86901c601b61179c565b9050611320878288856111c4565b935093505050935093915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461135257600080fd5b919050565b60008060006060848603121561136c57600080fd5b6113758461132e565b92506113836020850161132e565b9150604084013590509250925092565b60005b838110156113ae578181015183820152602001611396565b838111156113bd576000848401525b50505050565b60208152600082518060208401526113e2816040850160208701611393565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561148a5761148a611414565b604052919050565b6000608082840312156114a457600080fd5b6040516080810181811067ffffffffffffffff821117156114c7576114c7611414565b6040526114d38361132e565b81526114e16020840161132e565b602082015260408301356040820152606083013560608201528091505092915050565b60006080828403121561151657600080fd5b50919050565b60008083601f84011261152e57600080fd5b50813567ffffffffffffffff81111561154657600080fd5b602083019150836020828501011115610f6957600080fd5b600080600060a0848603121561157357600080fd5b61157d8585611504565b9250608084013567ffffffffffffffff81111561159957600080fd5b6115a58682870161151c565b9497909650939450505050565b6000602082840312156115c457600080fd5b6103c48261132e565b600080600080600060e086880312156115e557600080fd5b6115ef8787611504565b94506080860135935060a086013567ffffffffffffffff8082111561161357600080fd5b818801915088601f83011261162757600080fd5b81358181111561163957611639611414565b61166a60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611443565b8181528a602083860101111561167f57600080fd5b81602085016020830137600060208383010152809650505060c08801359150808211156116ab57600080fd5b506116b88882890161151c565b969995985093965092949392505050565b600080604083850312156116dc57600080fd5b6116e58361132e565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611734576117346116f3565b500390565b82815260008251611751816020850160208701611393565b919091016020019392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611797576117976116f3565b500290565b600082198211156117af576117af6116f3565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfe4174746573746174696f6e28616464726573732062656e65666963696172792c6164647265737320636f6e746578742c75696e74323536206e6f6e63652c75696e743235362076616c6964556e74696c29a164736f6c634300080d000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c806396f18040116100cd578063d7bdd1ae11610081578063f2fde38b11610066578063f2fde38b14610313578063f698da2514610326578063fde6360a1461032e57600080fd5b8063d7bdd1ae146102e0578063edf8f878146102f357600080fd5b8063ca194c24116100b2578063ca194c24146102b1578063cb74082d146102ba578063d0ebdbe7146102cd57600080fd5b806396f180401461028b578063c34b44a01461029e57600080fd5b8063715018a6116101245780637ecebe00116101095780637ecebe001461023a57806385c104161461025a5780638da5cb5b1461026d57600080fd5b8063715018a61461020d57806376fb297f1461021757600080fd5b8063308b556911610155578063308b5569146101ac5780633840497c146101b5578063481c6a75146101c857600080fd5b806328425d51146101715780632ff3696914610197575b600080fd5b61018461017f366004611357565b610336565b6040519081526020015b60405180910390f35b61019f6103cb565b60405161018e91906113c3565b61018461012c81565b61019f6101c3366004611492565b6103e7565b6003546101e89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161018e565b610215610457565b005b61022a61022536600461155e565b6104e9565b604051901515815260200161018e565b6101846102483660046115b2565b60026020526000908152604090205481565b61022a6102683660046115cd565b610549565b60005473ffffffffffffffffffffffffffffffffffffffff166101e8565b61022a6102993660046115cd565b6107c4565b6102156102ac3660046115b2565b6107fb565b61018461016d81565b61022a6102c836600461155e565b61087e565b6102156102db3660046115b2565b6108be565b6101846102ee3660046116c9565b6109b9565b6101846103013660046115b2565b60016020526000908152604090205481565b6102156103213660046115b2565b610a3b565b610184610b68565b610184610b77565b6000805473ffffffffffffffffffffffffffffffffffffffff163314801590610377575060035473ffffffffffffffffffffffffffffffffffffffff163314155b156103ae576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b783610b9a565b6103c18483610bf3565b90505b9392505050565b6040518060800160405280605181526020016117e46051913981565b60608160000151826020015183604001518460600151604051602001610441949392919073ffffffffffffffffffffffffffffffffffffffff94851681529290931660208301526040820152606081019190915260800190565b6040516020818303038152906040529050919050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6104e76000610cc6565b565b60006104f684848461087e565b610502575060006103c4565b61053f61051260208601866115b2565b73ffffffffffffffffffffffffffffffffffffffff16600090815260026020526040902080546001019055565b5060019392505050565b600060608601354281101561058a576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012c6105974283611722565b11156105cf576040517f54090af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002816105e160208b018b6115b2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508760400135811461066857604080517f3ddd5131000000000000000000000000000000000000000000000000000000008152600481018390529089013560248201526044016104d4565b6000878760405160200161067d929190611739565b60405160208183030381529060405280519060200120905060006106a082610d3b565b905060006106e48289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610daa92505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081205491925081900361075e576040517fd7e8a2c200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016104d4565b804211156107b0576040517f5b0a554300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016104d4565b600196505050505050505b95945050505050565b60006107d38686868686610549565b6107df575060006107bb565b6107ef61051260208801886115b2565b50600195945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480159061083b575060035473ffffffffffffffffffffffffffffffffffffffff163314155b15610872576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61087b81610b9a565b50565b60006103c1846040518060800160405280605181526020016117e46051913980516020909101206108b76101c336899003890189611492565b8686610549565b60005473ffffffffffffffffffffffffffffffffffffffff16331461093f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d4565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f2c1c11af44aa5608f1dca38c00275c30ea091e02417d36e70e9a1538689c433d906020015b60405180910390a150565b6000805473ffffffffffffffffffffffffffffffffffffffff1633148015906109fa575060035473ffffffffffffffffffffffffffffffffffffffff163314155b15610a31576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103c48383610bf3565b60005473ffffffffffffffffffffffffffffffffffffffff163314610abc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d4565b73ffffffffffffffffffffffffffffffffffffffff8116610b5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104d4565b61087b81610cc6565b6000610b72610dce565b905090565b6040518060800160405280605181526020016117e4605191398051906020012081565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602090815260408083209290925590519182527f99a705a3c2c3339d0051f56b36a60fef91e30142c93353002617999f27aec4af91016109ae565b600061016d821115610c31576040517f54090af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c3c82601861175f565b610c4790603c61175f565b610c5290603c61175f565b610c5c904261179c565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260016020908152604091829020849055815192835282018390529192507f50999ebf9b59bf3157a58816611976f2d723378ad51457d7b0413209e0cdee59910160405180910390a192915050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610da4610d48610dce565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610db98585610f02565b91509150610dc681610f70565b509392505050565b60003073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015610e3457507f000000000000000000000000000000000000000000000000000000000000000046145b15610e5e57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604103610f385760208301516040840151606085015160001a610f2c878285856111c4565b94509450505050610f69565b8251604003610f615760208301516040840151610f568683836112dc565b935093505050610f69565b506000905060025b9250929050565b6000816004811115610f8457610f846117b4565b03610f8c5750565b6001816004811115610fa057610fa06117b4565b03611007576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104d4565b600281600481111561101b5761101b6117b4565b03611082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104d4565b6003816004811115611096576110966117b4565b03611123576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104d4565b6004816004811115611137576111376117b4565b0361087b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104d4565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156111fb57506000905060036112d3565b8460ff16601b1415801561121357508460ff16601c14155b1561122457506000905060046112d3565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611278573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166112cc576000600192509250506112d3565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161131260ff86901c601b61179c565b9050611320878288856111c4565b935093505050935093915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461135257600080fd5b919050565b60008060006060848603121561136c57600080fd5b6113758461132e565b92506113836020850161132e565b9150604084013590509250925092565b60005b838110156113ae578181015183820152602001611396565b838111156113bd576000848401525b50505050565b60208152600082518060208401526113e2816040850160208701611393565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561148a5761148a611414565b604052919050565b6000608082840312156114a457600080fd5b6040516080810181811067ffffffffffffffff821117156114c7576114c7611414565b6040526114d38361132e565b81526114e16020840161132e565b602082015260408301356040820152606083013560608201528091505092915050565b60006080828403121561151657600080fd5b50919050565b60008083601f84011261152e57600080fd5b50813567ffffffffffffffff81111561154657600080fd5b602083019150836020828501011115610f6957600080fd5b600080600060a0848603121561157357600080fd5b61157d8585611504565b9250608084013567ffffffffffffffff81111561159957600080fd5b6115a58682870161151c565b9497909650939450505050565b6000602082840312156115c457600080fd5b6103c48261132e565b600080600080600060e086880312156115e557600080fd5b6115ef8787611504565b94506080860135935060a086013567ffffffffffffffff8082111561161357600080fd5b818801915088601f83011261162757600080fd5b81358181111561163957611639611414565b61166a60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611443565b8181528a602083860101111561167f57600080fd5b81602085016020830137600060208383010152809650505060c08801359150808211156116ab57600080fd5b506116b88882890161151c565b969995985093965092949392505050565b600080604083850312156116dc57600080fd5b6116e58361132e565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611734576117346116f3565b500390565b82815260008251611751816020850160208701611393565b919091016020019392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611797576117976116f3565b500290565b600082198211156117af576117af6116f3565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfe4174746573746174696f6e28616464726573732062656e65666963696172792c6164647265737320636f6e746578742c75696e74323536206e6f6e63652c75696e743235362076616c6964556e74696c29a164736f6c634300080d000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerSigner(address,uint256)": {
        "params": {
          "signer": "the new signer to register",
          "validityDays": "how long the signer will be valid starting from the moment of registration"
        },
        "returns": {
          "validUntil": "the timestamp in seconds after which the signer expires"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setManager(address)": {
        "params": {
          "_manager": "the address that will be authorized to add and remove signers (use address 0 to disable)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verify((address,address,uint256,uint256),bytes)": {
        "params": {
          "attestation": "the attestation to verify",
          "signature": "the signature of the attestation"
        },
        "returns": {
          "_0": "true if the attestation is valid, reverts otherwise"
        }
      },
      "verify((address,address,uint256,uint256),bytes32,bytes,bytes)": {
        "details": "see https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct",
        "params": {
          "attestation": "the attestation to verify",
          "encodedData": "the EIP712-encoded struct data to be verified (32 bytes long members, hashed dynamic types)",
          "signature": "the signature of the hashed struct",
          "typeHash": "the EIP712 type hash for the struct data to be verified"
        },
        "returns": {
          "_0": "true if the signature is valid, reverts otherwise"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "nonces(address)": {
        "notice": "maps addresses to their nonces"
      },
      "registerAndRevoke(address,address,uint256)": {
        "notice": "Convenience function for the workflow where one expects a single active signer"
      },
      "registerSigner(address,uint256)": {
        "notice": "Registers an authorized signer"
      },
      "revokeSigner(address)": {
        "notice": "Remove an authorized signer"
      },
      "setManager(address)": {
        "notice": "Delegates the signer management to another address"
      },
      "verify((address,address,uint256,uint256),bytes)": {
        "notice": "Verifies the given attestationThis method does not increment the nonce so it provides no replay safety"
      },
      "verify((address,address,uint256,uint256),bytes32,bytes,bytes)": {
        "notice": "Verifies arbitrary typed dataThis method does not increment the nonce so it provides no replay safetyThe attestation SHOULD be part of the encodedData (i.e. a change in the attestation should change the signature)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 472,
        "contract": "src/ShowtimeVerifier.sol:ShowtimeVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6044,
        "contract": "src/ShowtimeVerifier.sol:ShowtimeVerifier",
        "label": "signerValidity",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6049,
        "contract": "src/ShowtimeVerifier.sol:ShowtimeVerifier",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6051,
        "contract": "src/ShowtimeVerifier.sol:ShowtimeVerifier",
        "label": "manager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}