{
  "address": "0x50C001A33Caa446c8b84C489F371F77754F41024",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_editionCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minterFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timeCop",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_animationUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_animationHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_editionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBPS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimWindowDurationSeconds",
          "type": "uint256"
        }
      ],
      "name": "createEdition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "editionCreator",
      "outputs": [
        {
          "internalType": "contract ISingleEditionMintableCreator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "editionId",
          "type": "uint256"
        }
      ],
      "name": "getEditionAtId",
      "outputs": [
        {
          "internalType": "contract IEditionSingleMintable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterFactory",
      "outputs": [
        {
          "internalType": "contract MetaEditionMinterFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeCop",
      "outputs": [
        {
          "internalType": "contract TimeCop",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa08646838daf8bbc19ab6daa5692cd23a78795deefc0578c7e93c0abccc84dff",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x515F7d84cEE53051b7ADF645fA2220f65BC25c68",
    "contractAddress": null,
    "transactionIndex": 16,
    "gasUsed": "579902",
    "logsBloom": "0x
    "blockHash": "0xb321dcf35a5e23982944ff220c20f6f0c779cda15cd86130ae352ec43c2d902e",
    "transactionHash": "0xa08646838daf8bbc19ab6daa5692cd23a78795deefc0578c7e93c0abccc84dff",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 26289194,
        "transactionHash": "0xa08646838daf8bbc19ab6daa5692cd23a78795deefc0578c7e93c0abccc84dff",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000515f7d84cee53051b7adf645fa2220f65bc25c68",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000252ef7202c30c200000000000000000000000000000000000000000000000006d447e05d25112d000000000000000000000000000000000000000000000115b7b6bf5fc872019b00000000000000000000000000000000000000000000000006af18e93cf8e06b000000000000000000000000000000000000000000000115b7dbee56e89e325d",
        "logIndex": 546,
        "blockHash": "0xb321dcf35a5e23982944ff220c20f6f0c779cda15cd86130ae352ec43c2d902e"
      }
    ],
    "blockNumber": 26289194,
    "cumulativeGasUsed": "7334400",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x50c001c88b59dc3b833E0F062EfC2271CE88Cb89",
    "0x773E5B82179E6CE1CdF8c5C0d736e797b3ceDDDC",
    "0x50c001c8989f0e3799A212A2d50FB61e140266c5",
    "0x50c001E4eB10801968F6640E1537D63a557e5d72"
  ],
  "numDeployments": 2,
  "solcInputHash": "1833dc003425e1951c41a2e7b99a3092",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_editionCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minterFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timeCop\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_animationUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_animationHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimWindowDurationSeconds\",\"type\":\"uint256\"}],\"name\":\"createEdition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editionCreator\",\"outputs\":[{\"internalType\":\"contract ISingleEditionMintableCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"getEditionAtId\",\"outputs\":[{\"internalType\":\"contract IEditionSingleMintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterFactory\",\"outputs\":[{\"internalType\":\"contract MetaEditionMinterFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeCop\",\"outputs\":[{\"internalType\":\"contract TimeCop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/editions/MetaSingleEditionMintableCreator.sol\":\"MetaSingleEditionMintableCreator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x45fe5b6e09537c84248325b6cb3595aed7752b07425dfe136351234f2d8130dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n  function mintEditions(address[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x04b73ddff10e4feb9297834b5550faecb1e63bfc8c4a513ecdf25796c49360db\",\"license\":\"GPL-3.0\"},\"src/editions/MetaEditionMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\nimport { BaseRelayRecipient } from \\\"../utils/BaseRelayRecipient.sol\\\";\\n\\nimport { IEditionMinter } from \\\"./interfaces/IEditionMinter.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ncontract MetaEditionMinter is BaseRelayRecipient, IEditionMinter, Initializable {\\n    event Destroyed(MetaEditionMinter minter, IEditionSingleMintable collection);\\n\\n    error NullAddress();\\n    error AlreadyMinted(IEditionSingleMintable collection, address operator);\\n    error TimeLimitReached(IEditionSingleMintable collection);\\n    error TimeLimitNotReached(IEditionSingleMintable collection);\\n\\n    /// @dev these would be immutable if they were not set in the initializer\\n    IEditionSingleMintable public collection;\\n    TimeCop public timeCop;\\n\\n    mapping(address => bool) public minted;\\n\\n    /// @dev deploy the initial implementation via constructor and lock the contract, preventing calls to initialize()\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _trustedForwarder,\\n        IEditionSingleMintable _collection,\\n        TimeCop _timeCop\\n    ) external initializer {\\n        if (address(_collection) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        if (address(_timeCop) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        // we accept the null address for the trusted forwarder (meta-tx disabled)\\n        trustedForwarder = _trustedForwarder;\\n        collection = _collection;\\n        timeCop = _timeCop;\\n    }\\n\\n    function mintEdition(address _to) external override {\\n        if (timeCop.timeLimitReached(address(collection))) {\\n            revert TimeLimitReached(collection);\\n        }\\n\\n        address operator = _msgSender();\\n        recordMint(operator);\\n        if (operator != _to) {\\n            recordMint(_to);\\n        }\\n\\n        collection.mintEdition(_to);\\n    }\\n\\n    function recordMint(address minter) internal {\\n        if (minted[minter]) {\\n            revert AlreadyMinted(collection, minter);\\n        }\\n\\n        minted[minter] = true;\\n    }\\n\\n    /// @notice deletes the record of who minted for that collection if we are past the claim window\\n    /// @notice no-op if there was no time limit set or it has not expired yet\\n    function purge() external {\\n        // collection is not set in the implementation contract\\n        if (address(collection) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        bool expired = timeCop.timeLimitReached(address(collection));\\n        if (!expired) {\\n            revert TimeLimitNotReached(collection);\\n        }\\n\\n        emit Destroyed(this, collection);\\n\\n        selfdestruct(payable(collection.owner()));\\n    }\\n}\\n\",\"keccak256\":\"0x8c450e652342c3ef47f689b9d6fece36060ca9c9a1d4826356d6f8130a768d26\",\"license\":\"MIT\"},\"src/editions/MetaEditionMinterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { ClonesUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\nimport { MetaEditionMinter } from \\\"./MetaEditionMinter.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ncontract MetaEditionMinterFactory {\\n    error NullAddress();\\n\\n    address public immutable trustedForwarder;\\n    MetaEditionMinter public immutable minterImpl;\\n    TimeCop public immutable timeCop;\\n\\n    constructor (address _trustedForwarder, address _timeCop) {\\n        if (_timeCop == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        /// @dev we accept the null address for the trusted forwarder (meta-tx disabled)\\n        trustedForwarder = _trustedForwarder;\\n        timeCop = TimeCop(_timeCop);\\n\\n        /// @dev this deploys and locks down the base implementation, which we will later deploy proxies to\\n        minterImpl = new MetaEditionMinter();\\n    }\\n\\n    /// returns an initialized minimal proxy to the base MetaEditionMinter implementation\\n    function createMinter(IEditionSingleMintable _edition) public returns (MetaEditionMinter newMinter) {\\n        // deploy the minter for this edition\\n        newMinter = MetaEditionMinter(\\n            ClonesUpgradeable.cloneDeterministic(\\n                address(minterImpl),\\n                bytes32(uint256(uint160(address(_edition))))\\n            )\\n        );\\n\\n        newMinter.initialize(trustedForwarder, _edition, timeCop);\\n    }\\n\\n    function getMinterForEdition(address edition) public view returns (address) {\\n        return ClonesUpgradeable.predictDeterministicAddress(\\n            address(minterImpl),\\n            bytes32(uint256(uint160(edition)))\\n        );\\n    }\\n}\",\"keccak256\":\"0x6c1123f0650f87160522b82d9aae08dd15f1afd80cf009b7ec1139d1d399a1d7\",\"license\":\"MIT\"},\"src/editions/MetaSingleEditionMintableCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\n\\nimport { BaseRelayRecipient } from \\\"src/utils/BaseRelayRecipient.sol\\\";\\nimport { MetaEditionMinter } from \\\"./MetaEditionMinter.sol\\\";\\nimport { MetaEditionMinterFactory } from \\\"./MetaEditionMinterFactory.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ninterface ISingleEditionMintableCreator {\\n    /// Creates a new edition contract as a factory with a deterministic address\\n    /// Important: None of these fields (except the Url fields with the same hash) can be changed after calling\\n    /// @param _name Name of the edition contract\\n    /// @param _symbol Symbol of the edition contract\\n    /// @param _description Metadata: Description of the edition entry\\n    /// @param _animationUrl Metadata: Animation url (optional) of the edition entry\\n    /// @param _animationHash Metadata: SHA-256 Hash of the animation (if no animation url, can be 0x0)\\n    /// @param _imageUrl Metadata: Image url (semi-required) of the edition entry\\n    /// @param _imageHash Metadata: SHA-256 hash of the Image of the edition entry (if not image, can be 0x0)\\n    /// @param _editionSize Total size of the edition (number of possible editions)\\n    /// @param _royaltyBPS BPS amount of royalty\\n    function createEdition(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS\\n    ) external returns (uint256);\\n\\n    /// Get edition given the created ID\\n    /// @param editionId id of edition to get contract for\\n    /// @return SingleEditionMintable Edition NFT contract\\n    function getEditionAtId(uint256 editionId) external view returns (IEditionSingleMintable);\\n}\\n\\ninterface _IEditionSingleMintable {\\n    function transferOwnership(address newOwner) external;\\n    function setApprovedMinter(address minter, bool allowed) external;\\n}\\n\\ncontract MetaSingleEditionMintableCreator is BaseRelayRecipient {\\n    error NullAddress();\\n\\n    ISingleEditionMintableCreator public immutable editionCreator;\\n    MetaEditionMinterFactory public immutable minterFactory;\\n    TimeCop public immutable timeCop;\\n\\n    constructor(\\n        address _trustedForwarder,\\n        address _editionCreator,\\n        address _minterFactory,\\n        address _timeCop\\n    ) {\\n        if (_editionCreator == address(0)\\n            || _minterFactory == address(0)\\n            || _timeCop == address(0))\\n        {\\n            revert NullAddress();\\n        }\\n        editionCreator = ISingleEditionMintableCreator(_editionCreator);\\n        minterFactory = MetaEditionMinterFactory(_minterFactory);\\n        timeCop = TimeCop(_timeCop);\\n\\n        trustedForwarder = _trustedForwarder;\\n    }\\n\\n    function createEdition(\\n        // ISingleEditionMintableCreator parameters\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS,\\n        // additional parameters\\n        uint256 _claimWindowDurationSeconds\\n    ) external returns (address, address) {\\n        // deploy the new contract\\n        uint256 newId = editionCreator.createEdition(\\n            _name,\\n            _symbol,\\n            _description,\\n            _animationUrl,\\n            _animationHash,\\n            _imageUrl,\\n            _imageHash,\\n            _editionSize,\\n            _royaltyBPS\\n        );\\n\\n        // deploy the edition\\n        IEditionSingleMintable edition = editionCreator.getEditionAtId(newId);\\n\\n        // deploy the minter for this edition\\n        MetaEditionMinter newMinter = minterFactory.createMinter(edition);\\n\\n        // configure the time limit\\n        timeCop.setTimeLimit(address(edition), _claimWindowDurationSeconds);\\n\\n        // configure the edition (while we still own it)\\n        _IEditionSingleMintable(address(edition)).setApprovedMinter(address(newMinter), true);\\n\\n        // and finally transfer ownership of the configured contract to the actual creator\\n        _IEditionSingleMintable(address(edition)).transferOwnership(_msgSender());\\n\\n        return (address(edition), address(newMinter));\\n    }\\n\\n    function getEditionAtId(uint256 editionId) external view returns (IEditionSingleMintable) {\\n        return editionCreator.getEditionAtId(editionId);\\n    }\\n}\\n\",\"keccak256\":\"0xb2de9380b3d21cea52084b288648d284c202677813890eb3b3cc557b3d992bb1\",\"license\":\"MIT\"},\"src/editions/TimeCop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TimeCop {\\n    event TimeLimitSet(address collection, uint256 deadline);\\n\\n    error InvalidTimeLimit(uint256 offsetSeconds);\\n    error NotCollectionOwner();\\n    error TimeLimitAlreadySet();\\n\\n    uint256 public immutable MAX_DURATION_SECONDS;\\n\\n    /// @notice the time limits expressed as a timestamp in seconds\\n    mapping(address => uint256) public timeLimits;\\n\\n    /// @param _maxDurationSeconds maximum time limit\\n    /// @dev _maxDurationSeconds can be set to 0 to have no maximum time limit\\n    constructor(uint256 _maxDurationSeconds) {\\n        MAX_DURATION_SECONDS = _maxDurationSeconds;\\n    }\\n\\n    /// @notice Sets the deadline for the given collection\\n    /// @notice Only the owner of the collection can set the deadline\\n    /// @param collection The address to set the deadline for\\n    /// @param offsetSeconds a duration in seconds that will be used to set the time limit\\n    function setTimeLimit(address collection, uint256 offsetSeconds) external {\\n        if (offsetSeconds == 0) {\\n            revert InvalidTimeLimit(offsetSeconds);\\n        }\\n\\n        if (MAX_DURATION_SECONDS > 0 && offsetSeconds > MAX_DURATION_SECONDS) {\\n            revert InvalidTimeLimit(offsetSeconds);\\n        }\\n\\n        if (timeLimitSet(collection)) {\\n            revert TimeLimitAlreadySet();\\n        }\\n\\n        if (msg.sender != Ownable(collection).owner()) {\\n            revert NotCollectionOwner();\\n        }\\n\\n        uint256 deadline = block.timestamp + offsetSeconds;\\n        timeLimits[collection] = deadline;\\n\\n        emit TimeLimitSet(collection, deadline);\\n    }\\n\\n    function timeLimitSet(address collection) public view returns (bool) {\\n        return timeLimits[collection] > 0;\\n    }\\n\\n    /// @return false if there is no time limit set for that collection\\n    function timeLimitReached(address collection) public view returns (bool) {\\n        return timeLimitSet(collection) && block.timestamp > timeLimits[collection];\\n    }\\n}\",\"keccak256\":\"0x7a245be43fac95db15a2f5b1badaa8de64feac5a9afb6ab8c06f535512f03743\",\"license\":\"MIT\"},\"src/editions/interfaces/IEditionMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IEditionMinter {\\n    function mintEdition(address _to) external;\\n}\\n\",\"keccak256\":\"0xbb6abf578a6fdaa3a53694b9b4539975395983ab485abac35143ba6b5fcd6840\",\"license\":\"MIT\"},\"src/utils/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity =0.8.7;\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    /*\\n     * require a function to be called through GSN only\\n     */\\n    modifier trustedForwarderOnly() {\\n        require(msg.sender == address(trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n        _;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal view virtual returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2443ea5711a4ef0831d9ace49edab0a567c46600577e21a853bcf9078079a905\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051610a94380380610a9483398101604081905261002f916100e0565b6001600160a01b038316158061004c57506001600160a01b038216155b8061005e57506001600160a01b038116155b1561007c5760405163e99d5ac560e01b815260040160405180910390fd5b606092831b6001600160601b031990811660805291831b821660a05290911b1660c052600080546001600160a01b0319166001600160a01b0392909216919091179055610134565b80516001600160a01b03811681146100db57600080fd5b919050565b600080600080608085870312156100f657600080fd5b6100ff856100c4565b935061010d602086016100c4565b925061011b604086016100c4565b9150610129606086016100c4565b905092959194509250565b60805160601c60a05160601c60c05160601c61090661018e6000396000818161017d01526103ba01526000818160f10152610315015260008181610156015281816101a601528181610276015261053101526109066000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637da0a8771161005b5780637da0a8771461012b578063ac52edfd1461013e578063d33ed8b814610151578063f565d63d1461017857600080fd5b8063572b6c05146100825780636606648d146100b957806366f7490f146100ec575b600080fd5b6100a461009036600461067a565b6000546001600160a01b0391821691161490565b60405190151581526020015b60405180910390f35b6100cc6100c73660046106bb565b61019f565b604080516001600160a01b039384168152929091166020830152016100b0565b6101137f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100b0565b600054610113906001600160a01b031681565b61011361014c3660046107bf565b610518565b6101137f000000000000000000000000000000000000000000000000000000000000000081565b6101137f000000000000000000000000000000000000000000000000000000000000000081565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310c3009e8e8e8e8e8e8e8e8e8e6040518a63ffffffff1660e01b81526004016102009998979695949392919061083e565b602060405180830381600087803b15801561021a57600080fd5b505af115801561022e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025291906107d8565b60405163ac52edfd60e01b8152600481018290529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ac52edfd9060240160206040518083038186803b1580156102b857600080fd5b505afa1580156102cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f0919061069e565b604051632e2affc160e21b81526001600160a01b0380831660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063b8abff0490602401602060405180830381600087803b15801561035957600080fd5b505af115801561036d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610391919061069e565b6040516309b5e7df60e21b81526001600160a01b038481166004830152602482018990529192507f0000000000000000000000000000000000000000000000000000000000000000909116906326d79f7c90604401600060405180830381600087803b15801561040057600080fd5b505af1158015610414573d6000803e3d6000fd5b50506040516329ec16dd60e01b81526001600160a01b03848116600483015260016024830152851692506329ec16dd9150604401600060405180830381600087803b15801561046257600080fd5b505af1158015610476573d6000803e3d6000fd5b50505050816001600160a01b031663f2fde38b6104916105b9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b50939650919450505050509a509a98505050505050505050565b60405163ac52edfd60e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac52edfd9060240160206040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b3919061069e565b92915050565b6000601836108015906105d657506000546001600160a01b031633145b156105e8575060131936013560601c90565b503390565b600082601f8301126105fe57600080fd5b813567ffffffffffffffff80821115610619576106196108cb565b604051601f8301601f19908116603f01168101908282118183101715610641576106416108cb565b8160405283815286602085880101111561065a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561068c57600080fd5b8135610697816108e1565b9392505050565b6000602082840312156106b057600080fd5b8151610697816108e1565b6000806000806000806000806000806101408b8d0312156106db57600080fd5b8a3567ffffffffffffffff808211156106f357600080fd5b6106ff8e838f016105ed565b9b5060208d013591508082111561071557600080fd5b6107218e838f016105ed565b9a5060408d013591508082111561073757600080fd5b6107438e838f016105ed565b995060608d013591508082111561075957600080fd5b6107658e838f016105ed565b985060808d0135975060a08d013591508082111561078257600080fd5b5061078f8d828e016105ed565b95505060c08b0135935060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b6000602082840312156107d157600080fd5b5035919050565b6000602082840312156107ea57600080fd5b5051919050565b6000815180845260005b81811015610817576020818501810151868301820152016107fb565b81811115610829576000602083870101525b50601f01601f19169290920160200192915050565b60006101208083526108528184018d6107f1565b90508281036020840152610866818c6107f1565b9050828103604084015261087a818b6107f1565b9050828103606084015261088e818a6107f1565b905087608084015282810360a08401526108a881886107f1565b60c0840196909652505060e0810192909252610100909101529695505050505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146108f657600080fd5b5056fea164736f6c6343000807000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637da0a8771161005b5780637da0a8771461012b578063ac52edfd1461013e578063d33ed8b814610151578063f565d63d1461017857600080fd5b8063572b6c05146100825780636606648d146100b957806366f7490f146100ec575b600080fd5b6100a461009036600461067a565b6000546001600160a01b0391821691161490565b60405190151581526020015b60405180910390f35b6100cc6100c73660046106bb565b61019f565b604080516001600160a01b039384168152929091166020830152016100b0565b6101137f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100b0565b600054610113906001600160a01b031681565b61011361014c3660046107bf565b610518565b6101137f000000000000000000000000000000000000000000000000000000000000000081565b6101137f000000000000000000000000000000000000000000000000000000000000000081565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310c3009e8e8e8e8e8e8e8e8e8e6040518a63ffffffff1660e01b81526004016102009998979695949392919061083e565b602060405180830381600087803b15801561021a57600080fd5b505af115801561022e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025291906107d8565b60405163ac52edfd60e01b8152600481018290529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ac52edfd9060240160206040518083038186803b1580156102b857600080fd5b505afa1580156102cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f0919061069e565b604051632e2affc160e21b81526001600160a01b0380831660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063b8abff0490602401602060405180830381600087803b15801561035957600080fd5b505af115801561036d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610391919061069e565b6040516309b5e7df60e21b81526001600160a01b038481166004830152602482018990529192507f0000000000000000000000000000000000000000000000000000000000000000909116906326d79f7c90604401600060405180830381600087803b15801561040057600080fd5b505af1158015610414573d6000803e3d6000fd5b50506040516329ec16dd60e01b81526001600160a01b03848116600483015260016024830152851692506329ec16dd9150604401600060405180830381600087803b15801561046257600080fd5b505af1158015610476573d6000803e3d6000fd5b50505050816001600160a01b031663f2fde38b6104916105b9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b50939650919450505050509a509a98505050505050505050565b60405163ac52edfd60e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac52edfd9060240160206040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b3919061069e565b92915050565b6000601836108015906105d657506000546001600160a01b031633145b156105e8575060131936013560601c90565b503390565b600082601f8301126105fe57600080fd5b813567ffffffffffffffff80821115610619576106196108cb565b604051601f8301601f19908116603f01168101908282118183101715610641576106416108cb565b8160405283815286602085880101111561065a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561068c57600080fd5b8135610697816108e1565b9392505050565b6000602082840312156106b057600080fd5b8151610697816108e1565b6000806000806000806000806000806101408b8d0312156106db57600080fd5b8a3567ffffffffffffffff808211156106f357600080fd5b6106ff8e838f016105ed565b9b5060208d013591508082111561071557600080fd5b6107218e838f016105ed565b9a5060408d013591508082111561073757600080fd5b6107438e838f016105ed565b995060608d013591508082111561075957600080fd5b6107658e838f016105ed565b985060808d0135975060a08d013591508082111561078257600080fd5b5061078f8d828e016105ed565b95505060c08b0135935060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b6000602082840312156107d157600080fd5b5035919050565b6000602082840312156107ea57600080fd5b5051919050565b6000815180845260005b81811015610817576020818501810151868301820152016107fb565b81811115610829576000602083870101525b50601f01601f19169290920160200192915050565b60006101208083526108528184018d6107f1565b90508281036020840152610866818c6107f1565b9050828103604084015261087a818b6107f1565b9050828103606084015261088e818a6107f1565b905087608084015282810360a08401526108a881886107f1565b60c0840196909652505060e0810192909252610100909101529695505050505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146108f657600080fd5b5056fea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7104,
        "contract": "src/editions/MetaSingleEditionMintableCreator.sol:MetaSingleEditionMintableCreator",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}