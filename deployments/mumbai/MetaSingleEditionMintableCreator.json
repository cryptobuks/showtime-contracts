{
  "address": "0x50c001c0aaa97B06De431432FDbF275e1F349694",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_editionCreator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_animationUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_animationHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_editionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBPS",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "createEdition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "editionId",
          "type": "uint256"
        }
      ],
      "name": "getEditionAtId",
      "outputs": [
        {
          "internalType": "contract ISingleEditionMintable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x85ab29ed182e5b0ca40b6577aa87ed72e341ced44e99ed99d80d0fa181e0b15f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x515F7d84cEE53051b7ADF645fA2220f65BC25c68",
    "contractAddress": null,
    "transactionIndex": 9,
    "gasUsed": "478257",
    "logsBloom": "0x
    "blockHash": "0xcbdfe812bfc1f26d1a609357213aa1bdf8d9090d85d2b25678324496b2f330aa",
    "transactionHash": "0x85ab29ed182e5b0ca40b6577aa87ed72e341ced44e99ed99d80d0fa181e0b15f",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 25951632,
        "transactionHash": "0x85ab29ed182e5b0ca40b6577aa87ed72e341ced44e99ed99d80d0fa181e0b15f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000515f7d84cee53051b7adf645fa2220f65bc25c68",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000021fb71b3a44e16000000000000000000000000000000000000000000000000048ac94e28bb751400000000000000000000000000000000000000000000111111673bad073c50100000000000000000000000000000000000000000000000000468cddc751726fe0000000000000000000000000000000000000000000011111189371ebae09e26",
        "logIndex": 19,
        "blockHash": "0xcbdfe812bfc1f26d1a609357213aa1bdf8d9090d85d2b25678324496b2f330aa"
      }
    ],
    "blockNumber": 25951632,
    "cumulativeGasUsed": "1477740",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x50c001c88b59dc3b833E0F062EfC2271CE88Cb89",
    "0x773E5B82179E6CE1CdF8c5C0d736e797b3ceDDDC"
  ],
  "numDeployments": 1,
  "solcInputHash": "ee375ee01832e46d149a4cceac0ecc23",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_editionCreator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_animationUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_animationHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"createEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"getEditionAtId\",\"outputs\":[{\"internalType\":\"contract ISingleEditionMintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createEdition(string,string,string,string,bytes32,string,bytes32,uint256,uint256,address)\":{\"params\":{\"minter\":\"the address of the minter contract to use for this edition, or 0 for an open mint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/periphery/MetaSingleEditionMintableCreator.sol\":\"MetaSingleEditionMintableCreator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x0117c84d8584216a032bbfc24a21077e672609fa4e788624aace97dd97ceec9b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\",\"keccak256\":\"0x1e88abdf82fcbbf98f97be17ea56c924376350637896bc37366ec9f89b7c2628\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/periphery/MetaSingleEditionMintableCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IERC2981 } from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\n\\nimport { BaseRelayRecipient } from \\\"../utils/BaseRelayRecipient.sol\\\";\\n\\ninterface ISingleEditionMintableCreator {\\n    /// Creates a new edition contract as a factory with a deterministic address\\n    /// Important: None of these fields (except the Url fields with the same hash) can be changed after calling\\n    /// @param _name Name of the edition contract\\n    /// @param _symbol Symbol of the edition contract\\n    /// @param _description Metadata: Description of the edition entry\\n    /// @param _animationUrl Metadata: Animation url (optional) of the edition entry\\n    /// @param _animationHash Metadata: SHA-256 Hash of the animation (if no animation url, can be 0x0)\\n    /// @param _imageUrl Metadata: Image url (semi-required) of the edition entry\\n    /// @param _imageHash Metadata: SHA-256 hash of the Image of the edition entry (if not image, can be 0x0)\\n    /// @param _editionSize Total size of the edition (number of possible editions)\\n    /// @param _royaltyBPS BPS amount of royalty\\n    function createEdition(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS\\n    ) external returns (uint256);\\n\\n    /// Get edition given the created ID\\n    /// @param editionId id of edition to get contract for\\n    /// @return SingleEditionMintable Edition NFT contract\\n    function getEditionAtId(uint256 editionId) external view returns (ISingleEditionMintable);\\n}\\n\\ninterface ISingleEditionMintable is IERC721Metadata, IERC2981 {\\n  function mintEdition(address to) external returns (uint256);\\n  function mintEditions(address[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n  function transferOwnership(address newOwner) external;\\n  function setApprovedMinter(address minter, bool allowed) external;\\n}\\n\\ncontract MetaSingleEditionMintableCreator is BaseRelayRecipient {\\n    ISingleEditionMintableCreator immutable editionCreator;\\n\\n    constructor(address _trustedForwarder, address _editionCreator) {\\n        trustedForwarder = _trustedForwarder;\\n        editionCreator = ISingleEditionMintableCreator(_editionCreator);\\n    }\\n\\n    /// @param minter the address of the minter contract to use for this edition, or 0 for an open mint\\n    function createEdition(\\n        // ISingleEditionMintableCreator parameters\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS,\\n\\n        // additional parameters\\n        address minter\\n    ) external returns (uint256) {\\n        // deploy the new contract\\n        uint newId = editionCreator.createEdition(_name, _symbol, _description, _animationUrl, _animationHash,\\n            _imageUrl, _imageHash, _editionSize, _royaltyBPS);\\n\\n        // configure it while we still own it\\n        ISingleEditionMintable edition = editionCreator.getEditionAtId(newId);\\n        edition.setApprovedMinter(minter, true);\\n\\n        // and finally transfer ownership of the configured contract to the actual creator\\n        edition.transferOwnership(_msgSender());\\n\\n        return newId;\\n    }\\n\\n    function getEditionAtId(uint256 editionId) external view returns (ISingleEditionMintable) {\\n        return editionCreator.getEditionAtId(editionId);\\n    }\\n}\",\"keccak256\":\"0xe49621d5fcc6ab88054363e10c2f06da2d892c03756c2c37d17af527994814a7\",\"license\":\"MIT\"},\"src/utils/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity =0.8.7;\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    /*\\n     * require a function to be called through GSN only\\n     */\\n    modifier trustedForwarderOnly() {\\n        require(msg.sender == address(trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n        _;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal view virtual returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2443ea5711a4ef0831d9ace49edab0a567c46600577e21a853bcf9078079a905\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161081938038061081983398101604081905261002f91610081565b600080546001600160a01b0319166001600160a01b03939093169290921790915560601b6001600160601b0319166080526100b4565b80516001600160a01b038116811461007c57600080fd5b919050565b6000806040838503121561009457600080fd5b61009d83610065565b91506100ab60208401610065565b90509250929050565b60805160601c61073a6100df6000396000818160ec015281816101bc015261034e015261073a6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063246d510f14610051578063572b6c05146100775780637da0a877146100a9578063ac52edfd146100d4575b600080fd5b61006461005f3660046104e8565b6100e7565b6040519081526020015b60405180910390f35b6100996100853660046104a7565b6000546001600160a01b0391821691161490565b604051901515815260200161006e565b6000546100bc906001600160a01b031681565b6040516001600160a01b03909116815260200161006e565b6100bc6100e23660046105f3565b610335565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310c3009e8d8d8d8d8d8d8d8d8d6040518a63ffffffff1660e01b815260040161014699989796959493929190610672565b602060405180830381600087803b15801561016057600080fd5b505af1158015610174573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610198919061060c565b60405163ac52edfd60e01b8152600481018290529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ac52edfd9060240160206040518083038186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023691906104cb565b6040516329ec16dd60e01b81526001600160a01b03868116600483015260016024830152919250908216906329ec16dd90604401600060405180830381600087803b15801561028457600080fd5b505af1158015610298573d6000803e3d6000fd5b50505050806001600160a01b031663f2fde38b6102b36103d6565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561030c57600080fd5b505af1158015610320573d6000803e3d6000fd5b50939f9e505050505050505050505050505050565b60405163ac52edfd60e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac52edfd9060240160206040518083038186803b15801561039857600080fd5b505afa1580156103ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d091906104cb565b92915050565b6000601836108015906103f357506000546001600160a01b031633145b15610405575060131936013560601c90565b503390565b803561041581610715565b919050565b600082601f83011261042b57600080fd5b813567ffffffffffffffff80821115610446576104466106ff565b604051601f8301601f19908116603f0116810190828211818310171561046e5761046e6106ff565b8160405283815286602085880101111561048757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156104b957600080fd5b81356104c481610715565b9392505050565b6000602082840312156104dd57600080fd5b81516104c481610715565b6000806000806000806000806000806101408b8d03121561050857600080fd5b8a3567ffffffffffffffff8082111561052057600080fd5b61052c8e838f0161041a565b9b5060208d013591508082111561054257600080fd5b61054e8e838f0161041a565b9a5060408d013591508082111561056457600080fd5b6105708e838f0161041a565b995060608d013591508082111561058657600080fd5b6105928e838f0161041a565b985060808d0135975060a08d01359150808211156105af57600080fd5b506105bc8d828e0161041a565b95505060c08b0135935060e08b013592506101008b013591506105e26101208c0161040a565b90509295989b9194979a5092959850565b60006020828403121561060557600080fd5b5035919050565b60006020828403121561061e57600080fd5b5051919050565b6000815180845260005b8181101561064b5760208185018101518683018201520161062f565b8181111561065d576000602083870101525b50601f01601f19169290920160200192915050565b60006101208083526106868184018d610625565b9050828103602084015261069a818c610625565b905082810360408401526106ae818b610625565b905082810360608401526106c2818a610625565b905087608084015282810360a08401526106dc8188610625565b60c0840196909652505060e0810192909252610100909101529695505050505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072a57600080fd5b5056fea164736f6c6343000807000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063246d510f14610051578063572b6c05146100775780637da0a877146100a9578063ac52edfd146100d4575b600080fd5b61006461005f3660046104e8565b6100e7565b6040519081526020015b60405180910390f35b6100996100853660046104a7565b6000546001600160a01b0391821691161490565b604051901515815260200161006e565b6000546100bc906001600160a01b031681565b6040516001600160a01b03909116815260200161006e565b6100bc6100e23660046105f3565b610335565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310c3009e8d8d8d8d8d8d8d8d8d6040518a63ffffffff1660e01b815260040161014699989796959493929190610672565b602060405180830381600087803b15801561016057600080fd5b505af1158015610174573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610198919061060c565b60405163ac52edfd60e01b8152600481018290529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ac52edfd9060240160206040518083038186803b1580156101fe57600080fd5b505afa158015610212573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023691906104cb565b6040516329ec16dd60e01b81526001600160a01b03868116600483015260016024830152919250908216906329ec16dd90604401600060405180830381600087803b15801561028457600080fd5b505af1158015610298573d6000803e3d6000fd5b50505050806001600160a01b031663f2fde38b6102b36103d6565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561030c57600080fd5b505af1158015610320573d6000803e3d6000fd5b50939f9e505050505050505050505050505050565b60405163ac52edfd60e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ac52edfd9060240160206040518083038186803b15801561039857600080fd5b505afa1580156103ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d091906104cb565b92915050565b6000601836108015906103f357506000546001600160a01b031633145b15610405575060131936013560601c90565b503390565b803561041581610715565b919050565b600082601f83011261042b57600080fd5b813567ffffffffffffffff80821115610446576104466106ff565b604051601f8301601f19908116603f0116810190828211818310171561046e5761046e6106ff565b8160405283815286602085880101111561048757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156104b957600080fd5b81356104c481610715565b9392505050565b6000602082840312156104dd57600080fd5b81516104c481610715565b6000806000806000806000806000806101408b8d03121561050857600080fd5b8a3567ffffffffffffffff8082111561052057600080fd5b61052c8e838f0161041a565b9b5060208d013591508082111561054257600080fd5b61054e8e838f0161041a565b9a5060408d013591508082111561056457600080fd5b6105708e838f0161041a565b995060608d013591508082111561058657600080fd5b6105928e838f0161041a565b985060808d0135975060a08d01359150808211156105af57600080fd5b506105bc8d828e0161041a565b95505060c08b0135935060e08b013592506101008b013591506105e26101208c0161040a565b90509295989b9194979a5092959850565b60006020828403121561060557600080fd5b5035919050565b60006020828403121561061e57600080fd5b5051919050565b6000815180845260005b8181101561064b5760208185018101518683018201520161062f565b8181111561065d576000602083870101525b50601f01601f19169290920160200192915050565b60006101208083526106868184018d610625565b9050828103602084015261069a818c610625565b905082810360408401526106ae818b610625565b905082810360608401526106c2818a610625565b905087608084015282810360a08401526106dc8188610625565b60c0840196909652505060e0810192909252610100909101529695505050505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072a57600080fd5b5056fea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createEdition(string,string,string,string,bytes32,string,bytes32,uint256,uint256,address)": {
        "params": {
          "minter": "the address of the minter contract to use for this edition, or 0 for an open mint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19912,
        "contract": "src/periphery/MetaSingleEditionMintableCreator.sol:MetaSingleEditionMintableCreator",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}