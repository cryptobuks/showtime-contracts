{
  "address": "0x50c001E4eB10801968F6640E1537D63a557e5d72",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDurationSeconds",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offsetSeconds",
          "type": "uint256"
        }
      ],
      "name": "InvalidTimeLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCollectionOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimeLimitAlreadySet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "TimeLimitSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_DURATION_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offsetSeconds",
          "type": "uint256"
        }
      ],
      "name": "setTimeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "timeLimitReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "timeLimitSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "timeLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a0a3b00ba413d70f0d6f4acace71f605343cae0a68afd1917d4619b7830103e",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x515F7d84cEE53051b7ADF645fA2220f65BC25c68",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "274272",
    "logsBloom": "0x
    "blockHash": "0x35a87fc072732a84a6fd967bc1e872f84ae0bd7034d1bbac407f4cdded53bdc9",
    "transactionHash": "0x4a0a3b00ba413d70f0d6f4acace71f605343cae0a68afd1917d4619b7830103e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 26289191,
        "transactionHash": "0x4a0a3b00ba413d70f0d6f4acace71f605343cae0a68afd1917d4619b7830103e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000515f7d84cee53051b7adf645fa2220f65bc25c68",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000129e0e134539a0000000000000000000000000000000000000000000000000071a098663eab4c8000000000000000000000000000000000000000000000115ac1f2e0d1ef9375f00000000000000000000000000000000000000000000000007076b7850a57b28000000000000000000000000000000000000000000000115ac31cc1b323e70ff",
        "logIndex": 2,
        "blockHash": "0x35a87fc072732a84a6fd967bc1e872f84ae0bd7034d1bbac407f4cdded53bdc9"
      }
    ],
    "blockNumber": 26289191,
    "cumulativeGasUsed": "635845",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2678400
  ],
  "numDeployments": 1,
  "solcInputHash": "1833dc003425e1951c41a2e7b99a3092",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDurationSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offsetSeconds\",\"type\":\"uint256\"}],\"name\":\"InvalidTimeLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCollectionOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimeLimitAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"TimeLimitSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DURATION_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offsetSeconds\",\"type\":\"uint256\"}],\"name\":\"setTimeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"timeLimitReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"timeLimitSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"_maxDurationSeconds can be set to 0 to have no maximum time limit\",\"params\":{\"_maxDurationSeconds\":\"maximum time limit\"}},\"setTimeLimit(address,uint256)\":{\"params\":{\"collection\":\"The address to set the deadline for\",\"offsetSeconds\":\"a duration in seconds that will be used to set the time limit\"}},\"timeLimitReached(address)\":{\"returns\":{\"_0\":\"false if there is no time limit set for that collection\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setTimeLimit(address,uint256)\":{\"notice\":\"Sets the deadline for the given collectionOnly the owner of the collection can set the deadline\"},\"timeLimits(address)\":{\"notice\":\"the time limits expressed as a timestamp in seconds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/editions/TimeCop.sol\":\"TimeCop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/editions/TimeCop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TimeCop {\\n    event TimeLimitSet(address collection, uint256 deadline);\\n\\n    error InvalidTimeLimit(uint256 offsetSeconds);\\n    error NotCollectionOwner();\\n    error TimeLimitAlreadySet();\\n\\n    uint256 public immutable MAX_DURATION_SECONDS;\\n\\n    /// @notice the time limits expressed as a timestamp in seconds\\n    mapping(address => uint256) public timeLimits;\\n\\n    /// @param _maxDurationSeconds maximum time limit\\n    /// @dev _maxDurationSeconds can be set to 0 to have no maximum time limit\\n    constructor(uint256 _maxDurationSeconds) {\\n        MAX_DURATION_SECONDS = _maxDurationSeconds;\\n    }\\n\\n    /// @notice Sets the deadline for the given collection\\n    /// @notice Only the owner of the collection can set the deadline\\n    /// @param collection The address to set the deadline for\\n    /// @param offsetSeconds a duration in seconds that will be used to set the time limit\\n    function setTimeLimit(address collection, uint256 offsetSeconds) external {\\n        if (offsetSeconds == 0) {\\n            revert InvalidTimeLimit(offsetSeconds);\\n        }\\n\\n        if (MAX_DURATION_SECONDS > 0 && offsetSeconds > MAX_DURATION_SECONDS) {\\n            revert InvalidTimeLimit(offsetSeconds);\\n        }\\n\\n        if (timeLimitSet(collection)) {\\n            revert TimeLimitAlreadySet();\\n        }\\n\\n        if (msg.sender != Ownable(collection).owner()) {\\n            revert NotCollectionOwner();\\n        }\\n\\n        uint256 deadline = block.timestamp + offsetSeconds;\\n        timeLimits[collection] = deadline;\\n\\n        emit TimeLimitSet(collection, deadline);\\n    }\\n\\n    function timeLimitSet(address collection) public view returns (bool) {\\n        return timeLimits[collection] > 0;\\n    }\\n\\n    /// @return false if there is no time limit set for that collection\\n    function timeLimitReached(address collection) public view returns (bool) {\\n        return timeLimitSet(collection) && block.timestamp > timeLimits[collection];\\n    }\\n}\",\"keccak256\":\"0x7a245be43fac95db15a2f5b1badaa8de64feac5a9afb6ab8c06f535512f03743\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161047238038061047283398101604081905261002f91610037565b608052610050565b60006020828403121561004957600080fd5b5051919050565b6080516103fa6100786000396000818160f401528181610153015261017c01526103fa6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806399b491731161005057806399b49173146100c1578063b11d2758146100ef578063cf06dde41461011657600080fd5b806326d79f7c1461006c57806389f25e6214610081575b600080fd5b61007f61007a366004610383565b610129565b005b6100ac61008f366004610342565b6001600160a01b0316600090815260208190526040902054151590565b60405190151581526020015b60405180910390f35b6100e16100cf366004610342565b60006020819052908152604090205481565b6040519081526020016100b8565b6100e17f000000000000000000000000000000000000000000000000000000000000000081565b6100ac610124366004610342565b6102fe565b8061014f5760405163d7f6f2e960e01b8152600481018290526024015b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000011801561019e57507f000000000000000000000000000000000000000000000000000000000000000081115b156101bf5760405163d7f6f2e960e01b815260048101829052602401610146565b6001600160a01b038216600090815260208190526040902054156101f657604051631c27a43960e21b815260040160405180910390fd5b816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561022f57600080fd5b505afa158015610243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102679190610366565b6001600160a01b0316336001600160a01b031614610298576040516327ecd79f60e11b815260040160405180910390fd5b60006102a482426103af565b6001600160a01b03841660008181526020818152604091829020849055815192835282018390529192507f776e7116fa43d9385f3fd667b2e34d792fd3eec4b5a0aa8d1758b877ab4d6cbe910160405180910390a1505050565b6001600160a01b0381166000908152602081905260408120541515801561033c57506001600160a01b03821660009081526020819052604090205442115b92915050565b60006020828403121561035457600080fd5b813561035f816103d5565b9392505050565b60006020828403121561037857600080fd5b815161035f816103d5565b6000806040838503121561039657600080fd5b82356103a1816103d5565b946020939093013593505050565b600082198211156103d057634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b03811681146103ea57600080fd5b5056fea164736f6c6343000807000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806399b491731161005057806399b49173146100c1578063b11d2758146100ef578063cf06dde41461011657600080fd5b806326d79f7c1461006c57806389f25e6214610081575b600080fd5b61007f61007a366004610383565b610129565b005b6100ac61008f366004610342565b6001600160a01b0316600090815260208190526040902054151590565b60405190151581526020015b60405180910390f35b6100e16100cf366004610342565b60006020819052908152604090205481565b6040519081526020016100b8565b6100e17f000000000000000000000000000000000000000000000000000000000000000081565b6100ac610124366004610342565b6102fe565b8061014f5760405163d7f6f2e960e01b8152600481018290526024015b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000011801561019e57507f000000000000000000000000000000000000000000000000000000000000000081115b156101bf5760405163d7f6f2e960e01b815260048101829052602401610146565b6001600160a01b038216600090815260208190526040902054156101f657604051631c27a43960e21b815260040160405180910390fd5b816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561022f57600080fd5b505afa158015610243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102679190610366565b6001600160a01b0316336001600160a01b031614610298576040516327ecd79f60e11b815260040160405180910390fd5b60006102a482426103af565b6001600160a01b03841660008181526020818152604091829020849055815192835282018390529192507f776e7116fa43d9385f3fd667b2e34d792fd3eec4b5a0aa8d1758b877ab4d6cbe910160405180910390a1505050565b6001600160a01b0381166000908152602081905260408120541515801561033c57506001600160a01b03821660009081526020819052604090205442115b92915050565b60006020828403121561035457600080fd5b813561035f816103d5565b9392505050565b60006020828403121561037857600080fd5b815161035f816103d5565b6000806040838503121561039657600080fd5b82356103a1816103d5565b946020939093013593505050565b600082198211156103d057634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b03811681146103ea57600080fd5b5056fea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "_maxDurationSeconds can be set to 0 to have no maximum time limit",
        "params": {
          "_maxDurationSeconds": "maximum time limit"
        }
      },
      "setTimeLimit(address,uint256)": {
        "params": {
          "collection": "The address to set the deadline for",
          "offsetSeconds": "a duration in seconds that will be used to set the time limit"
        }
      },
      "timeLimitReached(address)": {
        "returns": {
          "_0": "false if there is no time limit set for that collection"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setTimeLimit(address,uint256)": {
        "notice": "Sets the deadline for the given collectionOnly the owner of the collection can set the deadline"
      },
      "timeLimits(address)": {
        "notice": "the time limits expressed as a timestamp in seconds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6492,
        "contract": "src/editions/TimeCop.sol:TimeCop",
        "label": "timeLimits",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}