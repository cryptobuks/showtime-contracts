{
  "language": "Solidity",
  "sources": {
    "src/ERC2981Royalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\nabstract contract ERC2981Royalties is IERC2981 {\n    struct Royalty {\n        address recipient;\n        uint256 value; // as a % unit, from 0 - 10000 (2 extra 0s) for eg 25% is 2500\n    }\n\n    mapping(uint256 => Royalty) internal _royalties; // tokenId => royalty\n\n    function _setTokenRoyalty(\n        uint256 id,\n        address recipient,\n        uint256 value\n    ) internal {\n        require(value <= 100_00, \"ERC2981Royalties: value too high\");\n        _royalties[id] = Royalty(recipient, value);\n    }\n\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        Royalty memory royalty = _royalties[_tokenId];\n        return (royalty.recipient, (_salePrice * royalty.value) / 100_00);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/ShowtimeMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"./utils/AccessProtected.sol\";\nimport \"./utils/BaseRelayRecipient.sol\";\nimport \"./ERC2981Royalties.sol\";\n\ncontract ShowtimeMT is ERC1155Burnable, ERC2981Royalties, AccessProtected, BaseRelayRecipient {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n    string public baseURI = \"https://gateway.pinata.cloud/ipfs/\";\n    mapping(uint256 => string) private _hashes;\n\n    constructor() ERC1155(\"\") {}\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, IERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * Mint + Issue Token\n     *\n     * @param recipient - Token will be issued to recipient\n     * @param amount - amount of tokens to mint\n     * @param hash - IPFS hash\n     * @param data - additional data\n     * @param royaltyRecipient - royalty receiver address\n     * @param royaltyPercent - percentage of royalty\n     */\n    function issueToken(\n        address recipient,\n        uint256 amount,\n        string memory hash,\n        bytes memory data,\n        address royaltyRecipient,\n        uint256 royaltyPercent\n    ) public onlyMinter returns (uint256) {\n        _tokenIds.increment();\n        uint256 newTokenId = _tokenIds.current();\n        _hashes[newTokenId] = hash;\n        _mint(recipient, newTokenId, amount, data);\n        if (royaltyPercent > 0) {\n            _setTokenRoyalty(newTokenId, royaltyRecipient, royaltyPercent);\n        }\n        return newTokenId;\n    }\n\n    /**\n     * Mint + Issue Token Batch\n     *\n     * @param recipient - Token will be issued to recipient\n     * @param amounts - amounts of each token to mint\n     * @param hashes - IPFS hashes\n     * @param data - additional data\n     * @param royaltyRecipients - royalty receiver addresses\n     * @param royaltyPercents - percentages of royalty\n     */\n    function issueTokenBatch(\n        address recipient,\n        uint256[] memory amounts,\n        string[] memory hashes,\n        bytes memory data,\n        address[] memory royaltyRecipients,\n        uint256[] memory royaltyPercents\n    ) public onlyMinter returns (uint256[] memory) {\n        require(\n            amounts.length == hashes.length &&\n                royaltyRecipients.length == royaltyPercents.length &&\n                amounts.length == royaltyRecipients.length,\n            \"array length mismatch\"\n        );\n        uint256[] memory ids = new uint256[](amounts.length);\n        for (uint256 i = 0; i < amounts.length; i++) {\n            _tokenIds.increment();\n            uint256 newTokenId = _tokenIds.current();\n            _hashes[newTokenId] = hashes[i];\n            ids[i] = newTokenId;\n            if (royaltyPercents[i] > 0) {\n                _setTokenRoyalty(newTokenId, royaltyRecipients[i], royaltyPercents[i]);\n            }\n        }\n        _mintBatch(recipient, ids, amounts, data);\n        return ids;\n    }\n\n    /**\n     * Set Base URI\n     *\n     * @param _baseURI - Base URI\n     */\n    function setBaseURI(string calldata _baseURI) external onlyOwner {\n        baseURI = _baseURI;\n    }\n\n    /**\n     * Get Token URI\n     *\n     * @param tokenId - Token ID\n     */\n    function uri(uint256 tokenId) public view override returns (string memory) {\n        return string(abi.encodePacked(baseURI, _hashes[tokenId]));\n    }\n\n    /**\n     * Set Trusted Forwarder\n     *\n     * @param _trustedForwarder - Trusted Forwarder address\n     */\n    function setTrustedForwarder(address _trustedForwarder) external onlyAdmin {\n        trustedForwarder = _trustedForwarder;\n    }\n\n    /**\n     * returns the message sender\n     */\n    function _msgSender() internal view override(Context, BaseRelayRecipient) returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "src/utils/AccessProtected.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nabstract contract AccessProtected is Context, Ownable {\n    mapping(address => bool) private _admins; // user address => admin? mapping\n    mapping(address => bool) private _minters; // user address => minter? mapping\n    bool public publicMinting;\n\n    event UserAccessSet(address _user, string _access, bool _enabled);\n\n    /**\n     * @notice Set Admin Access\n     *\n     * @param admin - Address of Minter\n     * @param enabled - Enable/Disable Admin Access\n     */\n    function setAdmin(address admin, bool enabled) external onlyOwner {\n        require(admin != address(0), \"Invalid Admin Address\");\n        _admins[admin] = enabled;\n        emit UserAccessSet(admin, \"ADMIN\", enabled);\n    }\n\n    /**\n     * @notice Set Minter Access\n     *\n     * @param minter - Address of Minter\n     * @param enabled - Enable/Disable Admin Access\n     */\n    function setMinter(address minter, bool enabled) public onlyAdmin {\n        require(minter != address(0), \"Invalid Minter Address\");\n        _minters[minter] = enabled;\n        emit UserAccessSet(minter, \"MINTER\", enabled);\n    }\n\n    /**\n     * @notice Set Minter Access\n     *\n     * @param minters - Address of Minters\n     * @param enabled - Enable/Disable Admin Access\n     */\n    function setMinters(address[] calldata minters, bool enabled) external onlyAdmin {\n        for (uint256 i = 0; i < minters.length; i++) {\n            address minter = minters[i];\n            setMinter(minter, enabled);\n        }\n    }\n\n    /**\n     * @notice Enable/Disable public Minting\n     *\n     * @param enabled - Enable/Disable\n     */\n    function setPublicMinting(bool enabled) external onlyAdmin {\n        publicMinting = enabled;\n        emit UserAccessSet(address(0), \"MINTER\", enabled);\n    }\n\n    /**\n     * @notice Check Admin Access\n     *\n     * @param admin - Address of Admin\n     * @return whether minter has access\n     */\n    function isAdmin(address admin) public view returns (bool) {\n        return _admins[admin];\n    }\n\n    /**\n     * @notice Check Minter Access\n     *\n     * @param minter - Address of minter\n     * @return whether minter has access\n     */\n    function isMinter(address minter) public view returns (bool) {\n        return _minters[minter];\n    }\n\n    /**\n     * Throws if called by any account other than the Admin/Owner.\n     */\n    modifier onlyAdmin() {\n        require(_admins[_msgSender()] || _msgSender() == owner(), \"AccessProtected: caller is not admin\");\n        _;\n    }\n\n    /**\n     * Throws if called by any account other than the Minter/Admin/Owner.\n     */\n    modifier onlyMinter() {\n        require(\n            publicMinting || _minters[_msgSender()] || _admins[_msgSender()] || _msgSender() == owner(),\n            \"AccessProtected: caller is not minter\"\n        );\n        _;\n    }\n}\n"
    },
    "src/utils/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity =0.8.7;\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nabstract contract BaseRelayRecipient {\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address public trustedForwarder;\n\n    /*\n     * require a function to be called through GSN only\n     */\n    modifier trustedForwarderOnly() {\n        require(msg.sender == address(trustedForwarder), \"Function can only be called through the trusted Forwarder\");\n        _;\n    }\n\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal view virtual returns (address ret) {\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "src/test/ShowtimeV1Market.t.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"./Hevm.sol\";\nimport \"./TestToken.sol\";\nimport \"../../lib/ds-test/src/test.sol\";\nimport \"../ShowtimeMT.sol\";\nimport \"../ShowtimeV1Market.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\n\ncontract User is ERC1155Holder {}\n\ncontract ShowtimeV1MarketTest is DSTest, ERC1155Holder {\n    uint256 constant INITIAL_NFT_SUPPLY = 10;\n    address constant BURN_ADDRESS = address(0xdEaD);\n    address constant FORWARDER_ADDRESS = BURN_ADDRESS;\n\n    User internal bob;\n    User internal alice;\n    TestToken internal token;\n    ShowtimeMT internal showtimeNFT;\n    ShowtimeV1Market internal market;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    uint256 tokenId0PctRoyalty;\n    uint256 tokenId10PctRoyaltyToAlice;\n    uint256 tokenId100PctRoyaltyToAlice;\n    uint256 tokenId10PctRoyaltyToZeroAddress;\n\n    event ListingCreated(uint256 indexed listingId, address indexed seller, uint256 indexed tokenId);\n    event ListingDeleted(uint256 indexed listingId, address indexed seller);\n    event SaleCompleted(\n        uint256 indexed listingId,\n        address indexed seller,\n        address indexed buyer,\n        address receiver,\n        uint256 quantity\n    );\n    event RoyaltyPaid(address indexed receiver, IERC20 currency, uint256 amount);\n    event MaxRoyaltiesUpdated(address indexed account, uint256 maxRoyaltiesBasisPoints);\n    event RoyaltiesEnabledChanged(address indexed account, bool royaltiesEnabled);\n    event AcceptedCurrencyChanged(address indexed account, address currency, bool accepted);\n\n    function setUp() public {\n        alice = new User();\n        bob = new User();\n\n        // mint NFTs\n        showtimeNFT = new ShowtimeMT();\n        tokenId0PctRoyalty = showtimeNFT.issueToken(\n            address(alice),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(0),\n            0\n        );\n        tokenId10PctRoyaltyToAlice = showtimeNFT.issueToken(\n            address(this),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(alice),\n            10_00\n        ); // 10% royalty\n        tokenId10PctRoyaltyToZeroAddress = showtimeNFT.issueToken(\n            address(this),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(0),\n            10_00\n        ); // 10% royalty\n        tokenId100PctRoyaltyToAlice = showtimeNFT.issueToken(\n            address(this),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(alice),\n            100_00\n        ); // 100% royalty\n\n        // mint erc20s to bob\n        token = new TestToken();\n        hevm.prank(address(bob));\n        token.mint(2500);\n\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(token);\n\n        // approvals\n        market = new ShowtimeV1Market(address(showtimeNFT), FORWARDER_ADDRESS, tokens);\n        showtimeNFT.setApprovalForAll(address(market), true);\n        hevm.prank(address(alice));\n        showtimeNFT.setApprovalForAll(address(market), true);\n        hevm.prank(address(bob));\n        token.approve(address(market), 2500);\n    }\n\n    // it doesn't allow to deploy with incorrect constructor arguments\n    function testIncorrectConstructorArguments() public {\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(token);\n\n        try new ShowtimeV1Market(address(0x1), FORWARDER_ADDRESS, tokens) {\n            emit log(\"Call did not revert\");\n            fail();\n        } catch (bytes memory revertMsg) {\n            assertEq(bytes32(revertMsg), bytes32(abi.encodeWithSignature(\"NotContractAddress(address)\", address(0x1))));\n        }\n\n        try new ShowtimeV1Market(address(showtimeNFT), address(0), tokens) {\n            emit log(\"Call did not revert\");\n            fail();\n        } catch (bytes memory revertMsg) {\n            assertEq(bytes32(revertMsg), bytes32(abi.encodeWithSignature(\"NullAddress()\")));\n        }\n\n        tokens[0] = address(0);\n\n        try new ShowtimeV1Market(address(showtimeNFT), FORWARDER_ADDRESS, tokens) {\n            emit log(\"Call did not revert\");\n            fail();\n        } catch (bytes memory revertMsg) {\n            assertEq(bytes32(revertMsg), bytes32(abi.encodeWithSignature(\"NotContractAddress(address)\", address(0x1))));\n        }\n    }\n\n    // it deploys with correct constructor arguments\"\n    function testCorrectConstructorArguments() public {\n        assertEq(address(market.nft()), address(showtimeNFT));\n        assertTrue(market.acceptedCurrencies(address(token)));\n        assertTrue(market.royaltiesEnabled());\n    }\n\n    // it creates a new listing\n    function testCanCreateListing() public {\n        hevm.expectEmit(true, true, true, true);\n        emit ListingCreated(0, address(alice), 1);\n\n        // alice creates a sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // alice still owns the NFTs\n        assertEq(showtimeNFT.balanceOf(address(alice), 1), INITIAL_NFT_SUPPLY);\n\n        (uint256 tokenId, uint256 quantity, uint256 price, IERC20 currency, address seller) = market.listings(\n            listingId\n        );\n\n        assertEq(tokenId, 1);\n        assertEq(quantity, 5);\n        assertEq(price, 500);\n        assertEq(address(currency), address(token));\n        assertEq(seller, address(alice));\n    }\n\n    // it ensures that the seller owns the listed tokens\n    function testSellerOwnsTokens() public {\n        // alice does not own token 2\n        assertEq(showtimeNFT.balanceOf(address(alice), 2), 0);\n\n        hevm.expectRevert(abi.encodeWithSignature(\"SellerDoesNotOwnToken(uint256,uint256)\", 2, 5));\n        hevm.prank(address(alice));\n        market.createSale(2, 5, 500, address(token));\n    }\n\n    // it ensures that the listing is in an accepted currency\n    function testListingUsesAcceptedCurrenciesOnly() public {\n        hevm.expectRevert(abi.encodeWithSignature(\"CurrencyNotAccepted(address)\", address(showtimeNFT)));\n\n        hevm.prank(address(alice));\n        market.createSale(1, 5, 500, address(showtimeNFT));\n    }\n\n    // it ensures that the seller owns enough of the listed tokens\n    function testSellerOwnsListedTokens() public {\n        // alice owns INITIAL_NFT_SUPPLY of token 1\n        assertEq(showtimeNFT.balanceOf(address(alice), 1), INITIAL_NFT_SUPPLY);\n\n        hevm.expectRevert(abi.encodeWithSignature(\"SellerDoesNotOwnToken(uint256,uint256)\", 1, INITIAL_NFT_SUPPLY + 1));\n\n        hevm.prank(address(alice));\n\n        market.createSale(1, INITIAL_NFT_SUPPLY + 1, 500, address(token));\n    }\n\n    // it ensures that request from the buyer lines up with the listing\n    function testBuyerRequestMatchesListing() public {\n        // alice creates a sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 10, address(token));\n\n        hevm.startPrank(address(bob));\n\n        hevm.expectRevert(abi.encodeWithSignature(\"TokenIdMismatch(uint256)\", 1));\n        market.buy(listingId, 424242424242, 2, 10, address(token), address(bob));\n\n        hevm.expectRevert(abi.encodeWithSignature(\"PriceMismatch(uint256)\", 10));\n        market.buy(listingId, 1, 2, 424242424242, address(token), address(bob));\n\n        hevm.expectRevert(abi.encodeWithSignature(\"CurrencyMismatch(address)\", address(token)));\n        market.buy(listingId, 1, 2, 10, address(bob), address(bob));\n    }\n\n    // it creates a new listing with price 0\n    function testCreateFreeListing() public {\n        // alice creates a sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 0, address(token));\n\n        (uint256 tokenId, , , , address seller) = market.listings(listingId);\n\n        assertEq(listingId, 0);\n        assertEq(seller, address(alice));\n        assertEq(tokenId, 1);\n\n        uint256 bobsTokenBalanceBefore = token.balanceOf(address(bob));\n\n        hevm.prank(address(bob));\n        market.buy(listingId, 1, 2, 0, address(token), address(bob));\n\n        assertEq(showtimeNFT.balanceOf(address(bob), tokenId), 2);\n\n        uint256 bobsTokenBalanceAfter = token.balanceOf(address(bob));\n        assertEq(bobsTokenBalanceBefore, bobsTokenBalanceAfter);\n    }\n\n    // sellers can *not* buy from themselves\n    function testSellersCannotSelfBuy() public {\n        // alice creates a sale\n        hevm.startPrank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        (uint256 tokenId, , , , address seller) = market.listings(listingId);\n\n        // the listing exists and alice is the seller\n        assertEq(seller, address(alice));\n\n        // alice still owns the NFTs\n        assertEq(showtimeNFT.balanceOf(address(alice), tokenId), INITIAL_NFT_SUPPLY);\n\n        // alice can not initially complete the sale because she doesn't have the tokens to buy\n        hevm.expectRevert(abi.encodeWithSignature(\"CanNotSellToSelf()\"));\n        market.buy(listingId, 1, 5, 500, address(token), address(alice));\n    }\n\n    // it has enough tokens to buy\n    function testChecksBuyerCanPay() public {\n        // alice creates the sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob burns his tokens\n        hevm.startPrank(address(bob));\n        token.transfer(BURN_ADDRESS, token.balanceOf(address(bob)));\n\n        // bob has no tokens now\n        assertEq(token.balanceOf(address(bob)), 0);\n\n        // bob can no longer buy\n        hevm.expectRevert(\"ERC20: transfer amount exceeds balance\");\n        market.buy(listingId, 1, 5, 500, address(token), address(bob));\n    }\n\n    // it cannot cancel other seller's sale\n    function testCannotCancelSomeonesSale() public {\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob cannot cancel\n        hevm.prank(address(bob));\n\n        hevm.expectRevert(abi.encodeWithSignature(\"NotListingSeller(uint256)\", listingId));\n        market.cancelSale(listingId);\n    }\n\n    // it cannot cancel non existent sale\n    function testCannotCancelNonExistentSale() public {\n        hevm.expectRevert(abi.encodeWithSignature(\"ListingDoesNotExist(uint256)\", 42));\n\n        market.cancelSale(42);\n    }\n\n    // it allows seller to cancel their sale\n    function testSellerCanCancelSale() public {\n        // alice creates a sale\n        hevm.startPrank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // alice cancels her sale\n        hevm.expectEmit(true, true, true, true);\n        emit ListingDeleted(listingId, address(alice));\n        market.cancelSale(listingId);\n\n        (uint256 tokenId, uint256 quantity, uint256 price, IERC20 currency, address seller) = market.listings(\n            listingId\n        );\n\n        assertEq(seller, address(0));\n        assertEq(tokenId, 0);\n        assertEq(quantity, 0);\n        assertEq(price, 0);\n        assertEq(address(currency), address(0));\n    }\n\n    // it cannot buy a cancelled sale\n    function testCannotBuyCancelledSale() public {\n        hevm.startPrank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token)); // alice create\n        market.cancelSale(listingId); // alice cancel\n        hevm.stopPrank();\n\n        hevm.prank(address(bob));\n        hevm.expectRevert(abi.encodeWithSignature(\"ListingDoesNotExist(uint256)\", listingId));\n        market.buy(listingId, 1, 5, 500, address(token), address(bob));\n    }\n\n    // it completes a valid buy\n    function testCanBuy() public {\n        // alice puts up 5 NFTs for sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob buys them\n        hevm.prank(address(bob));\n        hevm.expectEmit(true, true, true, true);\n        emit SaleCompleted(listingId, address(alice), address(bob), address(bob), 5);\n        market.buy(listingId, 1, 5, 500, address(token), address(bob));\n\n        (, , , , address seller) = market.listings(listingId);\n        assertEq(seller, address(0));\n        assertEq(showtimeNFT.balanceOf(address(alice), 1), 5); // 10 - 5\n        assertEq(showtimeNFT.balanceOf(address(bob), 1), 5); // 0 + 5\n    }\n\n    // it can not buy for address 0\n    function testCannotBuyForBurnAddress() public {\n        // alice creates a sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        hevm.expectRevert(abi.encodeWithSignature(\"NullAddress()\"));\n        market.buy(listingId, 1, 5, 500, address(token), address(0));\n    }\n\n    // it allows buying for another user\n    function testCanBuyForSomeoneElse() public {\n        // alice creates a sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob buys the sale for another user\n        hevm.prank(address(bob));\n        hevm.expectEmit(true, true, true, true);\n        emit SaleCompleted(listingId, address(alice), address(bob), address(this), 5);\n        market.buy(listingId, 1, 5, 500, address(token), address(this));\n\n        (, , , , address seller) = market.listings(listingId);\n        assertEq(seller, address(0));\n\n        assertEq(showtimeNFT.balanceOf(address(alice), 1), 5); // 10 - 5\n        assertEq(showtimeNFT.balanceOf(address(this), 1), 5); // 0 + 5\n    }\n\n    // it buys specific quantity of tokenIds\n    function testBuySpecificQuantities() public {\n        // alice creates a sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob buys the sale: 2 tokens only out of 5\n        hevm.startPrank(address(bob));\n        hevm.expectEmit(true, true, true, true);\n        emit SaleCompleted(listingId, address(alice), address(bob), address(bob), 2);\n        market.buy(listingId, 1, 2, 500, address(token), address(bob));\n\n        // there should still be 3 left available\n        hevm.expectEmit(true, true, true, true);\n        emit SaleCompleted(listingId, address(alice), address(bob), address(bob), 3);\n        market.buy(listingId, 1, 3, 500, address(token), address(bob));\n    }\n\n    // it throws on attempting to buy 0\"\n    function testCannotBuy0Tokens() public {\n        // alice lists 5 NFTs for sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob tries to buy 0 NFTs\n        hevm.expectRevert(abi.encodeWithSignature(\"NullQuantity()\"));\n        market.buy(listingId, 1, 0, 500, address(token), address(bob));\n    }\n\n    // it throws on attempting to buy more than available quantity\n    function testCannotBuyMoreThanListed() public {\n        // alice lists 5 NFTs for sale\n        hevm.prank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // bob tries to buy 6 NFTs\n        hevm.prank(address(bob));\n        hevm.expectRevert(abi.encodeWithSignature(\"AvailableQuantityInsuficient(uint256)\", 5));\n        market.buy(listingId, 1, 6, 500, address(token), address(bob));\n    }\n\n    // it throws on attempting to buy listed quantity that is no longer available\n    function testCannotBuyMoreThanAvailable() public {\n        // alice creates a sale\n        hevm.startPrank(address(alice));\n        uint256 listingId = market.createSale(1, INITIAL_NFT_SUPPLY, 500, address(token));\n\n        // then she burns the NFTs except 1\n        showtimeNFT.burn(address(alice), 1, INITIAL_NFT_SUPPLY - 1);\n        hevm.stopPrank();\n\n        // bob tries to buy 2\n        hevm.prank(address(bob));\n        hevm.expectRevert(abi.encodeWithSignature(\"AvailableQuantityInsuficient(uint256)\", 1));\n\n        market.buy(listingId, 1, 2, 500, address(token), address(bob));\n\n        uint256 actuallyAvailable = market.availableForSale(listingId);\n        assertEq(actuallyAvailable, 1);\n\n        // the listing is unchanged\n        (, uint256 quantity, , , ) = market.listings(listingId);\n        assertEq(quantity, INITIAL_NFT_SUPPLY);\n    }\n\n    // it completes a partial sale when required <= available < listed\n    function testCanCompletePartialSale() public {\n        // alice lists 5 NFTs for sale\n        hevm.startPrank(address(alice));\n        uint256 listingId = market.createSale(1, 5, 500, address(token));\n\n        // then she burns 8 NFTs\n        showtimeNFT.burn(address(alice), 1, 8);\n\n        // there are still 2 available for sale\n        assertEq(market.availableForSale(listingId), 2);\n\n        hevm.stopPrank();\n\n        // bob can buy 1\n        hevm.startPrank(address(bob));\n        market.buy(listingId, 1, 1, 500, address(token), address(bob));\n\n        // there is still 1 available for sale\n        assertEq(market.availableForSale(listingId), 1);\n\n        // the listing has been updated to reflect the available quantity\n        (, uint256 quantity, , , ) = market.listings(listingId);\n        assertEq(quantity, 1);\n\n        // bob buys the last one\n        market.buy(listingId, 1, 1, 500, address(token), address(bob));\n\n        // the listing no longer exists\n        (, , , , address seller) = market.listings(listingId);\n        assertEq(seller, address(0));\n    }\n\n    // it completes a sale which has 10% royalties associated with it\n    function testCanCompleteSaleWithRoyalties() public {\n        // admin puts his tokenId on sale which has 10% royalty to alice\n        market.createSale(tokenId10PctRoyaltyToAlice, 5, 500, address(token));\n        assertEq(token.balanceOf(address(alice)), 0);\n\n        hevm.prank(address(bob));\n        hevm.expectEmit(true, true, true, true);\n        emit RoyaltyPaid(address(alice), token, 250);\n        market.buy(0, tokenId10PctRoyaltyToAlice, 5, 500, address(token), address(bob));\n\n        assertEq(token.balanceOf(address(alice)), 250); // received her 10%\n        assertEq(token.balanceOf(address(this)), 2250); // price - royalty\n    }\n\n    // it completes a sale which has 10% royalties to the zero address associated with it\n    function testCanCompleteSaleWithZeroAddressRoyalties() public {\n        // admin puts his tokenId on sale which has 10% royalty to the zero address\n        market.createSale(tokenId10PctRoyaltyToZeroAddress, 5, 500, address(token));\n        assertEq(token.balanceOf(address(alice)), 0);\n\n        // we ignore the royalty, everything goes to the seller\n        hevm.prank(address(bob));\n        market.buy(0, tokenId10PctRoyaltyToZeroAddress, 5, 500, address(token), address(bob));\n        assertEq(token.balanceOf(address(this)), 2500); // price\n    }\n\n    // it completes a sale which has 100% royalties associated with it, but royalties are capped at 50%\n    function testCanCompleteSaleWithCappedRoyalties() public {\n        // admin puts 5 of their tokenId on sale which has 100% royalty to alice\n        market.createSale(tokenId100PctRoyaltyToAlice, 5, 500, address(token));\n        assertEq(token.balanceOf(address(alice)), 0);\n\n        // bob buys 2 of them\n        hevm.prank(address(bob));\n        hevm.expectEmit(true, true, true, true);\n        emit RoyaltyPaid(address(alice), token, 500);\n        market.buy(0, tokenId100PctRoyaltyToAlice, 2, 500, address(token), address(bob));\n\n        assertEq(token.balanceOf(address(alice)), 500); // capped at 50%!\n        assertEq(token.balanceOf(address(this)), 500); // price - royalty\n    }\n\n    // it permits only owner to update max royalties\n    function testOnlyOwnerCanUpdateRoyaltyCap() public {\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n\n        hevm.prank(address(bob));\n        market.setMaxRoyalties(100);\n    }\n\n    // it does not permit to set maxRoyalties above 100%\n    function testCannotCapRoyaltiesOver100Percent() public {\n        hevm.expectRevert(abi.encodeWithSignature(\"InvalidMaxRoyalties()\"));\n\n        market.setMaxRoyalties(200_00);\n    }\n\n    // it completes a sale which has 100% royalties associated with it when we lift the royalties cap\n    function testCanCompleteAFullRoyaltySaleIfNoCap() public {\n        // admin puts 5 of their tokenId on sale which has 100% royalty to alice\n        market.createSale(tokenId100PctRoyaltyToAlice, 5, 500, address(token));\n\n        // then we set the max royalties to 100%\n        hevm.expectEmit(true, true, true, true);\n        emit MaxRoyaltiesUpdated(address(this), 100_00);\n        market.setMaxRoyalties(100_00);\n\n        uint256 aliceBalanceBefore = token.balanceOf(address(alice));\n        uint256 adminBalanceBefore = token.balanceOf(address(this));\n\n        // bob buys 2 of them\n        hevm.prank(address(bob));\n        hevm.expectEmit(true, true, true, true);\n        emit RoyaltyPaid(address(alice), token, 1000);\n        market.buy(0, tokenId100PctRoyaltyToAlice, 2, 500, address(token), address(bob));\n\n        assertEq(token.balanceOf(address(alice)), aliceBalanceBefore + 1000); // alice does get 100% of the sale\n        assertEq(token.balanceOf(address(this)), adminBalanceBefore); // and admin gets nothing\n    }\n\n    // it no royalties are paid when we set the royalties cap at 0%\n    function testCanDisableRoyaltiesBySettingCapTo0() public {\n        // admin puts 5 of their tokenId on sale which has 100% royalty to alice\n        market.createSale(tokenId100PctRoyaltyToAlice, 5, 500, address(token));\n\n        // then we set the max royalties to 0%\n        market.setMaxRoyalties(0);\n\n        uint256 aliceBalanceBefore = token.balanceOf(address(alice));\n        uint256 adminBalanceBefore = token.balanceOf(address(this));\n\n        // bob buys 2 of them\n        hevm.prank(address(bob));\n        market.buy(0, tokenId100PctRoyaltyToAlice, 2, 500, address(token), address(bob));\n\n        assertEq(token.balanceOf(address(alice)), aliceBalanceBefore); // alice gets no royalties\n        assertEq(token.balanceOf(address(this)), adminBalanceBefore + 1000); // the seller gets 100% of the proceeds\n    }\n\n    // it permits only owner to turn off royalty on the contract\n    function testOnlyOwnerCanDisableRoyalties() public {\n        hevm.prank(address(alice));\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        market.setRoyaltiesEnabled(false);\n        assertTrue(market.royaltiesEnabled());\n\n        hevm.expectEmit(true, true, true, true);\n        emit RoyaltiesEnabledChanged(address(this), false);\n        market.setRoyaltiesEnabled(false);\n\n        assertTrue(!market.royaltiesEnabled());\n    }\n\n    // it pays no royalty when royalty is turned off\n    function testNoRoyaltiesArePaidWhenDisabled() public {\n        market.setRoyaltiesEnabled(false);\n        market.createSale(2, 5, 500, address(token));\n        assertEq(token.balanceOf(address(alice)), 0);\n\n        hevm.prank(address(bob));\n        market.buy(0, 2, 5, 500, address(token), address(bob));\n\n        assertEq(token.balanceOf(address(alice)), 0); // received no royalty\n        assertEq(token.balanceOf(address(this)), 2500);\n    }\n\n    // it permits only owner to pause and unpause the contract\n    function testOnlyOwnerCanPauseAndUnpause() public {\n        assertTrue(!market.paused());\n\n        hevm.prank(address(alice));\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        market.pause();\n        assertTrue(!market.paused());\n\n        market.pause();\n        assertTrue(market.paused());\n\n        hevm.prank(address(alice));\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        market.unpause();\n        assertTrue(market.paused());\n\n        market.unpause();\n        assertTrue(!market.paused());\n    }\n\n    // it can not create a listing when paused\n    function testCannotCreateListingWhenPaused() public {\n        market.pause();\n\n        hevm.expectRevert(\"Pausable: paused\");\n        hevm.prank(address(alice));\n        market.createSale(1, 5, 500, address(token));\n    }\n\n    // it can not buy when paused\n    function testCannotBuyWhenPaused() public {\n        hevm.prank(address(alice));\n        market.createSale(1, 5, 500, address(token));\n\n        market.pause();\n\n        hevm.prank(address(bob));\n        hevm.expectRevert(\"Pausable: paused\");\n        market.buy(0, 1, 5, 500, address(token), address(bob));\n\n        market.unpause();\n\n        // succeeds after unpausing\n        hevm.prank(address(bob));\n        market.buy(0, 1, 5, 500, address(token), address(bob));\n    }\n\n    // it can still cancel a listing when paused\n    function testCanCancelWhenPaused() public {\n        hevm.prank(address(alice));\n        market.createSale(1, 5, 500, address(token));\n\n        market.pause();\n\n        hevm.prank(address(alice));\n        market.cancelSale(0);\n    }\n\n    // it permits only owner to add accepted currencies\n    function testOnlyOwnerCanAddCurrencies() public {\n        assertTrue(!market.acceptedCurrencies(address(showtimeNFT)));\n\n        hevm.prank(address(alice));\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        market.setAcceptedCurrency(address(showtimeNFT), true);\n\n        hevm.expectEmit(true, true, true, true);\n        emit AcceptedCurrencyChanged(address(this), address(showtimeNFT), true);\n        market.setAcceptedCurrency(address(showtimeNFT), true);\n\n        assertTrue(market.acceptedCurrencies(address(showtimeNFT)));\n    }\n\n    // it permits only owner to remove accepted currency\n    function testOnlyOwnerCanRemoveCurrencies() public {\n        market.setAcceptedCurrency(address(showtimeNFT), true);\n\n        hevm.prank(address(alice));\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        market.setAcceptedCurrency(address(showtimeNFT), false);\n\n        hevm.expectEmit(true, true, true, true);\n        emit AcceptedCurrencyChanged(address(this), address(showtimeNFT), false);\n        market.setAcceptedCurrency(address(showtimeNFT), false);\n\n        assertTrue(!market.acceptedCurrencies(address(showtimeNFT)));\n    }\n}\n"
    },
    "src/test/Hevm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\ninterface Hevm {\n    // Set block.timestamp (newTimestamp)\n    function warp(uint256) external;\n\n    // Set block.height (newHeight)\n    function roll(uint256) external;\n\n    // Set block.basefee (newBasefee)\n    function fee(uint256) external;\n\n    // Loads a storage slot from an address (who, slot)\n    function load(address, bytes32) external returns (bytes32);\n\n    // Stores a value to an address' storage slot, (who, slot, value)\n    function store(\n        address,\n        bytes32,\n        bytes32\n    ) external;\n\n    // Signs data, (privateKey, digest) => (r, v, s)\n    function sign(uint256, bytes32)\n        external\n        returns (\n            uint8,\n            bytes32,\n            bytes32\n        );\n\n    // Gets address for a given private key, (privateKey) => (address)\n    function addr(uint256) external returns (address);\n\n    // Performs a foreign function call via terminal, (stringInputs) => (result)\n    function ffi(string[] calldata) external returns (bytes memory);\n\n    // Sets the *next* call's msg.sender to be the input address\n    function prank(address) external;\n\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called\n    function startPrank(address) external;\n\n    // Resets subsequent calls' msg.sender to be `address(this)`\n    function stopPrank() external;\n\n    // Sets an address' balance, (who, newBalance)\n    function deal(address, uint256) external;\n\n    // Sets an address' code, (who, newCode)\n    function etch(address, bytes calldata) external;\n\n    // Expects an error on next call\n    function expectRevert(bytes calldata) external;\n\n    // Expects an event on next call\n    function expectEmit(\n        bool,\n        bool,\n        bool,\n        bool\n    ) external;\n\n    // Record all storage reads and writes\n    function record() external;\n\n    // Gets all accessed reads and write slot from a recording session, for a given address\n    function accesses(address) external returns (bytes32[] memory reads, bytes32[] memory writes);\n\n    function assume(bool condition) external;\n}\n"
    },
    "src/test/TestToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestToken is ERC20(\"Test Token\", \"TKN\") {\n    function mint(uint256 _amount) external {\n        _mint(msg.sender, _amount);\n    }\n}\n"
    },
    "lib/ds-test/src/test.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.4.23;\n\ncontract DSTest {\n    event log                    (string);\n    event logs                   (bytes);\n\n    event log_address            (address);\n    event log_bytes32            (bytes32);\n    event log_int                (int);\n    event log_uint               (uint);\n    event log_bytes              (bytes);\n    event log_string             (string);\n\n    event log_named_address      (string key, address val);\n    event log_named_bytes32      (string key, bytes32 val);\n    event log_named_decimal_int  (string key, int val, uint decimals);\n    event log_named_decimal_uint (string key, uint val, uint decimals);\n    event log_named_int          (string key, int val);\n    event log_named_uint         (string key, uint val);\n    event log_named_bytes        (string key, bytes val);\n    event log_named_string       (string key, string val);\n\n    bool public IS_TEST = true;\n    bool public failed;\n\n    address constant HEVM_ADDRESS =\n        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\n\n    modifier mayRevert() { _; }\n    modifier testopts(string memory) { _; }\n\n    function fail() internal {\n        failed = true;\n    }\n\n    modifier logs_gas() {\n        uint startGas = gasleft();\n        _;\n        uint endGas = gasleft();\n        emit log_named_uint(\"gas\", startGas - endGas);\n    }\n\n    function assertTrue(bool condition) internal {\n        if (!condition) {\n            emit log(\"Error: Assertion Failed\");\n            fail();\n        }\n    }\n\n    function assertTrue(bool condition, string memory err) internal {\n        if (!condition) {\n            emit log_named_string(\"Error\", err);\n            assertTrue(condition);\n        }\n    }\n\n    function assertEq(address a, address b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [address]\");\n            emit log_named_address(\"  Expected\", b);\n            emit log_named_address(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(address a, address b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEq(bytes32 a, bytes32 b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [bytes32]\");\n            emit log_named_bytes32(\"  Expected\", b);\n            emit log_named_bytes32(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(bytes32 a, bytes32 b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq32(bytes32 a, bytes32 b) internal {\n        assertEq(a, b);\n    }\n    function assertEq32(bytes32 a, bytes32 b, string memory err) internal {\n        assertEq(a, b, err);\n    }\n\n    function assertEq(int a, int b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [int]\");\n            emit log_named_int(\"  Expected\", b);\n            emit log_named_int(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(int a, int b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq(uint a, uint b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [uint]\");\n            emit log_named_uint(\"  Expected\", b);\n            emit log_named_uint(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(uint a, uint b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Expected\", b, decimals);\n            emit log_named_decimal_int(\"    Actual\", a, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Expected\", b, decimals);\n            emit log_named_decimal_uint(\"    Actual\", a, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGt(uint a, uint b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(uint a, uint b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGt(int a, int b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(int a, int b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGe(uint a, uint b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(uint a, uint b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGe(int a, int b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(int a, int b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLt(uint a, uint b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(uint a, uint b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLt(int a, int b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(int a, int b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLe(uint a, uint b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(uint a, uint b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLe(int a, int b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(int a, int b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLeDecimal(a, b, decimals);\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertEq(string memory a, string memory b) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log(\"Error: a == b not satisfied [string]\");\n            emit log_named_string(\"  Value a\", a);\n            emit log_named_string(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertEq(string memory a, string memory b, string memory err) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {\n        ok = true;\n        if (a.length == b.length) {\n            for (uint i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) {\n                    ok = false;\n                }\n            }\n        } else {\n            ok = false;\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b) internal {\n        if (!checkEq0(a, b)) {\n            emit log(\"Error: a == b not satisfied [bytes]\");\n            emit log_named_bytes(\"  Expected\", a);\n            emit log_named_bytes(\"    Actual\", b);\n            fail();\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b, string memory err) internal {\n        if (!checkEq0(a, b)) {\n            emit log_named_string(\"Error\", err);\n            assertEq0(a, b);\n        }\n    }\n}\n"
    },
    "src/ShowtimeV1Market.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport { Pausable } from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport { IERC1155 } from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport { IERC2981 } from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { Ownable, Context } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport { BaseRelayRecipient } from \"./utils/BaseRelayRecipient.sol\";\n\ninterface ShowtimeERC1155 is IERC1155, IERC2981 {}\n\n//////////////////////////////////////////////\n//                                          //\n//                    ▄▄                    //\n//                   ▄██▄                   //\n//                  ▄████▄                  //\n//                ▄████████▄                //\n//              ▄████████████▄              //\n//            ▄████████████████▄            //\n//        ▄████████████████████████▄        //\n//   ▄██████████████████████████████████▄   //\n//   ▀██████████████████████████████████▀   //\n//       ████████████████████████████       //\n//           ████████████████████           //\n//              ██████████████              //\n//                ██████████                //\n//                 ████████                 //\n//                  ██████                  //\n//                   ████                   //\n//                    ██                    //\n//                                          //\n//////////////////////////////////////////////\n\n/// @title Showtime V1 Market for the Showtime ERC1155 Token\n///\n/// This is a non-escrow marketplace that allows users to list Showtime NFTs for sale\n/// for a fixed price, using a configurable list of allowed ERC20 currencies.\n///\n/// @dev listings have no expiration date, but frontends may choose to hide old listings\n///\n/// Built with feedback from the community! ♥️ Big thanks to:\n///     aaronsebesta chejazi chiuzon garythung mariobyn_eth MarkBeylin sina_eth_\n///     StErMi theramblingboy timidan_x transmissions11 William94029369\ncontract ShowtimeV1Market is Ownable, Pausable, BaseRelayRecipient {\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    /// the address of the ShowtimeMT NFT (ERC1155) contract\n    ShowtimeERC1155 public immutable nft;\n\n    /// @dev listings only contain a tokenId because we are implicitly only listing tokens from the ShowtimeMT contract\n    struct Listing {\n        uint256 tokenId;\n        uint256 quantity;\n        uint256 price;\n        IERC20 currency;\n        address seller;\n    }\n\n    /// ============ Mutable storage ============\n\n    /// royalties payments can be turned on/off by the owner of the contract\n    bool public royaltiesEnabled = true;\n\n    /// the configurable cap on royalties, enforced during the sale (50% by default)\n    uint256 public maxRoyaltiesBasisPoints = 50_00;\n\n    /// the configurable list of accepted ERC20 contract addresses\n    mapping(address => bool) public acceptedCurrencies;\n\n    /// maps a listing id to the corresponding Listing\n    mapping(uint256 => Listing) public listings;\n\n    /// a simple counter to assign ids to new listings\n    uint256 listingCounter;\n\n    /// ============ Events ============\n\n    /// marketplace and listing related events\n    event ListingCreated(uint256 indexed listingId, address indexed seller, uint256 indexed tokenId);\n    event ListingDeleted(uint256 indexed listingId, address indexed seller);\n    event RoyaltyPaid(address indexed receiver, IERC20 currency, uint256 amount);\n    event SaleCompleted(\n        uint256 indexed listingId,\n        address indexed seller,\n        address indexed buyer,\n        address receiver,\n        uint256 quantity\n    );\n\n    /// admin events\n    event AcceptedCurrencyChanged(address indexed account, address currency, bool accepted);\n    event RoyaltiesEnabledChanged(address indexed account, bool royaltiesEnabled);\n    event MaxRoyaltiesUpdated(address indexed account, uint256 maxRoyaltiesBasisPoints);\n\n    /// ============ Custom Errors ============\n\n    error ListingDoesNotExist(uint256 listingId);\n    error NotListingSeller(uint256 listingId);\n    error NotContractAddress(address addr);\n    error CurrencyNotAccepted(address currency);\n    error SellerDoesNotOwnToken(uint256 tokenId, uint256 quantity);\n    error NullAddress();\n    error NullQuantity();\n    error TokenIdMismatch(uint256 listedTokenId);\n    error PriceMismatch(uint256 listedPrice);\n    error CurrencyMismatch(address listedCurrency);\n    error CanNotSellToSelf();\n    error AvailableQuantityInsuficient(uint256 availableQuantity);\n    error RoyaltiesTooHigh(uint256 royaltyAmount, uint256 totalPrice);\n    error InvalidMaxRoyalties();\n\n    /// ============ Modifiers ============\n\n    modifier onlySeller(uint256 _id) {\n        if (listings[_id].seller != _msgSender()) revert NotListingSeller(_id);\n        _;\n    }\n\n    modifier listingExists(uint256 _id) {\n        if (listings[_id].seller == address(0)) revert ListingDoesNotExist(_id);\n        _;\n    }\n\n    /// ============ Constructor ============\n\n    constructor(\n        address _nft,\n        address _trustedForwarder,\n        address[] memory _initialCurrencies\n    ) {\n        /// initialize the address of the NFT contract\n        if (!_nft.isContract()) revert NotContractAddress(_nft);\n        nft = ShowtimeERC1155(_nft);\n\n        for (uint256 i = 0; i < _initialCurrencies.length; i++) {\n            address currency = _initialCurrencies[i];\n            if (!currency.isContract()) revert NotContractAddress(currency);\n            acceptedCurrencies[currency] = true;\n        }\n\n        /// set the trustedForwarder only once, see BaseRelayRecipient\n        if (_trustedForwarder == address(0)) revert NullAddress();\n        trustedForwarder = _trustedForwarder;\n    }\n\n    /// ============ Marketplace functions ============\n\n    /// @notice `setApprovalForAll` before calling\n    /// @notice creates a new Listing\n    /// @param _quantity the number of tokens to be listed\n    /// @param _price the price per token\n    function createSale(\n        uint256 _tokenId,\n        uint256 _quantity,\n        uint256 _price,\n        address _currency\n    ) external whenNotPaused returns (uint256 listingId) {\n        address seller = _msgSender();\n\n        if (!acceptedCurrencies[_currency]) revert CurrencyNotAccepted(_currency);\n        if (_quantity == 0) revert NullQuantity();\n        if (nft.balanceOf(seller, _tokenId) < _quantity) revert SellerDoesNotOwnToken(_tokenId, _quantity);\n\n        Listing memory listing = Listing({\n            tokenId: _tokenId,\n            quantity: _quantity,\n            price: _price,\n            currency: IERC20(_currency),\n            seller: seller\n        });\n\n        listingId = listingCounter;\n        listings[listingId] = listing;\n\n        // no need to check for overflows here\n        unchecked {\n            listingCounter++;\n        }\n\n        emit ListingCreated(listingId, seller, _tokenId);\n    }\n\n    /// @notice cancel an active sale\n    function cancelSale(uint256 _listingId) external listingExists(_listingId) onlySeller(_listingId) {\n        delete listings[_listingId];\n\n        emit ListingDeleted(_listingId, _msgSender());\n    }\n\n    /// @notice the seller may own fewer NFTs than the listed quantity\n    function availableForSale(uint256 _listingId) public view listingExists(_listingId) returns (uint256) {\n        Listing memory listing = listings[_listingId];\n        return Math.min(nft.balanceOf(listing.seller, listing.tokenId), listing.quantity);\n    }\n\n    /// @notice Complete a sale\n    /// @param _quantity the number of tokens to purchase\n    /// @param _receiver the address that will receive the NFTs\n    /// @dev we let the transaction complete even if the currency is no longer accepted in order to avoid stuck listings\n    function buy(\n        uint256 _listingId,\n        uint256 _tokenId,\n        uint256 _quantity,\n        uint256 _price,\n        address _currency,\n        address _receiver\n    ) external listingExists(_listingId) whenNotPaused {\n        /// 1. Checks\n        if (_quantity == 0) revert NullQuantity();\n        if (_receiver == address(0)) revert NullAddress();\n\n        Listing memory listing = listings[_listingId];\n\n        // to prevent issues with block reorgs, we need to make sure that the expectations of the buyer (tokenId,\n        // price and currency) match with the listing\n        if (listing.tokenId != _tokenId) revert TokenIdMismatch(listing.tokenId);\n        if (listing.price != _price) revert PriceMismatch(listing.price);\n        if (address(listing.currency) != _currency) revert CurrencyMismatch(address(listing.currency));\n\n        // disable buying something from the seller for the seller\n        // note that the seller can still buy from themselves as a gift for someone else\n        // the difference with a transfer is that this will result in royalties being paid out\n        if (_receiver == listing.seller) revert CanNotSellToSelf();\n\n        uint256 availableQuantity = availableForSale(_listingId);\n        if (_quantity > availableQuantity) revert AvailableQuantityInsuficient(availableQuantity);\n\n        uint256 totalPrice = listing.price * _quantity;\n        (address royaltyReceiver, uint256 royaltyAmount) = getRoyalties(listing.tokenId, totalPrice);\n        if (royaltyAmount > totalPrice) revert RoyaltiesTooHigh(royaltyAmount, totalPrice);\n\n        /// 2. Effects\n        updateListing(_listingId, availableQuantity - _quantity);\n\n        emit SaleCompleted(_listingId, listing.seller, _msgSender(), _receiver, _quantity);\n\n        /// 3. Interactions\n        // transfer royalties\n        if (royaltyAmount > 0) {\n            emit RoyaltyPaid(royaltyReceiver, listing.currency, royaltyAmount);\n            listing.currency.safeTransferFrom(_msgSender(), royaltyReceiver, royaltyAmount);\n        }\n\n        // the royalty amount is deducted from the price paid by the buyer\n        listing.currency.safeTransferFrom(_msgSender(), listing.seller, totalPrice - royaltyAmount);\n\n        // transfer the NFTs from the seller to the buyer\n        nft.safeTransferFrom(listing.seller, _receiver, listing.tokenId, _quantity, \"\");\n    }\n\n    /// ============ Utility functions ============\n\n    /// @notice update the listing with the remaining quantity, or delete it if newQuantity is zero\n    function updateListing(uint256 listingId, uint256 newQuantity) private {\n        if (newQuantity == 0) {\n            address seller = listings[listingId].seller;\n            delete listings[listingId];\n            emit ListingDeleted(listingId, seller);\n        } else {\n            listings[listingId].quantity = newQuantity;\n        }\n    }\n\n    function getRoyalties(uint256 tokenId, uint256 price)\n        private\n        view\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        if (!royaltiesEnabled) {\n            return (address(0), 0);\n        }\n\n        (receiver, royaltyAmount) = nft.royaltyInfo(tokenId, price);\n\n        // we ignore royalties to address 0, otherwise the transfer would fail\n        // and it would result in NFTs that are impossible to sell\n        if (receiver == address(0) || royaltyAmount == 0) {\n            return (address(0), 0);\n        }\n\n        royaltyAmount = capRoyalties(price, royaltyAmount);\n    }\n\n    function capRoyalties(uint256 salePrice, uint256 royaltyAmount) private view returns (uint256) {\n        uint256 maxRoyaltiesAmount = (salePrice * maxRoyaltiesBasisPoints) / 100_00;\n        return Math.min(maxRoyaltiesAmount, royaltyAmount);\n    }\n\n    function _msgSender() internal view override(Context, BaseRelayRecipient) returns (address) {\n        return BaseRelayRecipient._msgSender();\n    }\n\n    /// ============ Admin functions ============\n\n    /// @notice switch royalty payments on/off\n    function setRoyaltiesEnabled(bool newValue) external onlyOwner {\n        royaltiesEnabled = newValue;\n\n        emit RoyaltiesEnabledChanged(_msgSender(), royaltiesEnabled);\n    }\n\n    /// @notice sets the maximum royalties that will be paid during sales, in basis points\n    /// ex: if a token requests 75% royalties but maxRoyaltiesBasisPoints is set to 60_00 (= 60%),\n    ///    then 60% will be paid out instead of the 75% requested\n    function setMaxRoyalties(uint256 newValue) external onlyOwner {\n        if (newValue > 100_00) revert InvalidMaxRoyalties();\n        maxRoyaltiesBasisPoints = newValue;\n\n        emit MaxRoyaltiesUpdated(_msgSender(), maxRoyaltiesBasisPoints);\n    }\n\n    /// @notice add a currency to the accepted currency list\n    function setAcceptedCurrency(address currency, bool accepted) external onlyOwner {\n        if (accepted && !currency.isContract()) revert NotContractAddress(currency);\n        acceptedCurrencies[currency] = accepted;\n\n        emit AcceptedCurrencyChanged(_msgSender(), currency, accepted);\n    }\n\n    /// @notice pause the contract\n    function pause() external whenNotPaused onlyOwner {\n        _pause();\n    }\n\n    /// @notice unpause the contract\n    function unpause() external whenPaused onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "src/test/ShowtimeMT.t.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.7;\n\nimport \"./Hevm.sol\";\nimport \"./TestToken.sol\";\nimport \"../../lib/ds-test/src/test.sol\";\nimport \"../ShowtimeMT.sol\";\nimport \"../ShowtimeV1Market.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\n\ncontract User is ERC1155Holder {}\n\ncontract ShowtimeMTAccessTest is DSTest, ERC1155Holder {\n    User internal anon;\n    User internal admin;\n    User internal minter;\n    address[] internal minters;\n    ShowtimeMT internal mt;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    event UserAccessSet(address _user, string _access, bool _enabled);\n\n    function setUp() public {\n        anon = new User();\n        admin = new User();\n        minter = new User();\n        minters = [\n            address(new User()),\n            address(new User()),\n            address(new User()),\n            address(new User()),\n            address(new User())\n        ];\n\n        mt = new ShowtimeMT();\n        mt.setAdmin(address(admin), true);\n        mt.setMinter(address(minter), true);\n    }\n\n    // it non-minter should not be able to mint\n    function testNotMintersCannotMint() public {\n        hevm.prank(address(anon));\n        hevm.expectRevert(\"AccessProtected: caller is not minter\");\n\n        mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0), 0);\n    }\n\n    // it owner should be able to set admin\n    function testOwnerCanSetAdmin() public {\n        assertTrue(!mt.isAdmin(address(anon)));\n\n        hevm.expectEmit(true, true, true, true);\n        emit UserAccessSet(address(anon), \"ADMIN\", true);\n\n        mt.setAdmin(address(anon), true);\n\n        assertTrue(mt.isAdmin(address(anon)));\n    }\n\n    // it admin should be able to set minter\n    function testAdminCanSetMinter() public {\n        assertTrue(!mt.isMinter(address(anon)));\n\n        hevm.prank(address(admin));\n        mt.setMinter(address(anon), true);\n        emit UserAccessSet(address(anon), \"MINTER\", true);\n\n        assertTrue(mt.isMinter(address(anon)));\n    }\n\n    // it admin should be able to set batch of minters\n    function testAdminCanSetMinterBatch() public {\n        for (uint256 i = 0; i < minters.length; i++) {\n            assertTrue(!mt.isMinter(minters[i]));\n        }\n\n        hevm.prank(address(admin));\n\n        for (uint256 i = 0; i < minters.length; i++) {\n            hevm.expectEmit(true, true, true, true);\n            emit UserAccessSet(minters[i], \"MINTER\", true);\n        }\n\n        mt.setMinters(minters, true);\n\n        for (uint256 i = 0; i < minters.length; i++) {\n            assertTrue(mt.isMinter(minters[i]));\n        }\n    }\n\n    // it admin should be able to revoke minter\n    function testAdminCanRevokeMinter() public {\n        assertTrue(mt.isMinter(address(minter)));\n\n        hevm.prank(address(admin));\n        hevm.expectEmit(true, true, true, true);\n        emit UserAccessSet(address(minter), \"MINTER\", false);\n\n        mt.setMinter(address(minter), false);\n\n        assertTrue(!mt.isMinter(address(minter)));\n    }\n\n    // it admin should be able to revoke batch of minters\n    function testAdminCanRevokeMinterBatch() public {\n        hevm.prank(address(admin));\n\n        for (uint256 i = 0; i < minters.length; i++) {\n            hevm.expectEmit(true, true, true, true);\n            emit UserAccessSet(minters[i], \"MINTER\", false);\n        }\n\n        mt.setMinters(minters, false);\n\n        for (uint256 i = 0; i < minters.length; i++) {\n            assertTrue(!mt.isMinter(minters[i]));\n        }\n    }\n\n    // it non-owner should not be able to set admin\n    function testNonOwnerCannotSetAdmin() public {\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n\n        hevm.prank(address(admin));\n        mt.setAdmin(address(admin), true);\n    }\n\n    // it owner should be able to revoke admin\n    function testOwnerCanRevokeAdmin() public {\n        hevm.expectEmit(true, true, true, true);\n        emit UserAccessSet(address(admin), \"ADMIN\", false);\n\n        mt.setAdmin(address(admin), false);\n\n        assertTrue(!mt.isAdmin(address(admin)));\n    }\n\n    // it admin should be able to enable/disable minting for all\n    function testAdminCanControlPublicMinting() public {\n        hevm.startPrank(address(admin));\n        hevm.expectEmit(true, true, true, true);\n        emit UserAccessSet(address(0), \"MINTER\", true);\n\n        mt.setPublicMinting(true);\n\n        assertTrue(mt.publicMinting());\n\n        hevm.expectEmit(true, true, true, true);\n        emit UserAccessSet(address(0), \"MINTER\", false);\n\n        mt.setPublicMinting(false);\n\n        assertTrue(!mt.publicMinting());\n    }\n}\n\ncontract ShowtimeMTMintingTest is DSTest, ERC1155Holder {\n    User internal admin;\n    ShowtimeMT internal mt;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    function setUp() public {\n        admin = new User();\n\n        mt = new ShowtimeMT();\n        mt.setAdmin(address(admin), true);\n    }\n\n    // it minter should be able to mint\n    function testMintersCanMint() public {\n        mt.issueToken(address(admin), 10, \"some-hash\", \"0\", address(0), 0);\n        assertEq(mt.balanceOf(address(admin), 1), 10);\n\n        // assert no royalty\n        (address receiver, uint256 royaltyAmount) = mt.royaltyInfo(1, 1 wei);\n        assertEq(receiver, address(0));\n        assertEq(royaltyAmount, 0);\n\n        assertEq(mt.uri(1), \"https://gateway.pinata.cloud/ipfs/some-hash\");\n    }\n\n    // it minter should be able to batch mint\n    function testMintersCanBatchMint() public {\n        uint256[] memory tokenAmounts = new uint256[](5);\n        string[] memory hashes = new string[](5);\n        address[] memory addresses = new address[](5);\n        uint256[] memory royalties = new uint256[](5);\n\n        for (uint256 i = 0; i < 5; i++) {\n            tokenAmounts[i] = i;\n            hashes[i] = string(abi.encodePacked(\"hash-\", i));\n            addresses[i] = address(0);\n            royalties[i] = 0;\n        }\n\n        uint256[] memory tokenIds = mt.issueTokenBatch(address(admin), tokenAmounts, hashes, \"0\", addresses, royalties);\n\n        for (uint256 i = 0; i < 5; i++) {\n            assertEq(mt.balanceOf(address(admin), tokenIds[i]), tokenAmounts[i]);\n\n            // assert no royalty\n            (address receiver, uint256 royaltyAmount) = mt.royaltyInfo(tokenIds[i], 1 wei);\n            assertEq(receiver, address(0));\n            assertEq(royaltyAmount, 0);\n\n            assertEq(mt.uri(tokenIds[i]), string(abi.encodePacked(\"https://gateway.pinata.cloud/ipfs/\", hashes[i])));\n        }\n    }\n\n    // it should not be able to mint if public minting is disabled\n    function testMintersCantMintIfMintingIsDisabled() public {\n        hevm.expectRevert(\"AccessProtected: caller is not minter\");\n        hevm.prank(address(0x1));\n\n        mt.issueToken(address(0x1), 10, \"some-hash\", \"0\", address(0), 0);\n    }\n}\n\ncontract ShowtimeMTBurningTest is DSTest, ERC1155Holder {\n    ShowtimeMT internal mt;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    function setUp() public {\n        mt = new ShowtimeMT();\n    }\n\n    // it holder should be able to burn\n    function testHolderCanBurn() public {\n        mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0), 0);\n        assertEq(mt.balanceOf(address(this), 1), 10);\n\n        mt.burn(address(this), 1, 10);\n        assertEq(mt.balanceOf(address(this), 1), 0);\n    }\n\n    // it holder should be able to batch burn\n    function testHolderCanBatchBurn() public {\n        uint256[] memory tokenAmounts = new uint256[](5);\n        string[] memory hashes = new string[](5);\n        address[] memory addresses = new address[](5);\n        uint256[] memory royalties = new uint256[](5);\n\n        for (uint256 i = 0; i < 5; i++) {\n            tokenAmounts[i] = i;\n            hashes[i] = string(abi.encodePacked(\"hash-\", i));\n            addresses[i] = address(0);\n            royalties[i] = 0;\n        }\n        uint256[] memory tokenIds = mt.issueTokenBatch(address(this), tokenAmounts, hashes, \"0\", addresses, royalties);\n\n        for (uint256 i = 0; i < 5; i++) {\n            assertEq(mt.balanceOf(address(this), tokenIds[i]), tokenAmounts[i]);\n        }\n\n        mt.burnBatch(address(this), tokenIds, tokenAmounts);\n\n        for (uint256 i = 0; i < 5; i++) {\n            assertEq(mt.balanceOf(address(this), tokenIds[i]), 0);\n        }\n    }\n\n    // it can burn arbitrary amount\n    function testArbitraryAmountsCanBeBurned() public {\n        mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0), 0);\n        assertEq(mt.balanceOf(address(this), 1), 10);\n\n        mt.burn(address(this), 1, 5);\n        assertEq(mt.balanceOf(address(this), 1), 5);\n    }\n\n    // it reverts of attempting to burn unowned tokens\n    function testCannotBurnSomeonesTokens() public {\n        mt.issueToken(address(0x1), 10, \"some-hash\", \"0\", address(0), 0);\n\n        hevm.expectRevert(\"ERC1155: caller is not owner nor approved\");\n        mt.burn(address(0x1), 1, 10);\n    }\n\n    // it reverts on attempting to batch burn unowned tokens\n    function testCannotBatchBurnSomeonesTokens() public {\n        uint256[] memory tokenAmounts = new uint256[](5);\n        string[] memory hashes = new string[](5);\n        address[] memory addresses = new address[](5);\n        uint256[] memory royalties = new uint256[](5);\n\n        for (uint256 i = 0; i < 5; i++) {\n            tokenAmounts[i] = i;\n            hashes[i] = string(abi.encodePacked(\"hash-\", i));\n            addresses[i] = address(0);\n            royalties[i] = 0;\n        }\n        uint256[] memory tokenIds = mt.issueTokenBatch(address(0x1), tokenAmounts, hashes, \"0\", addresses, royalties);\n\n        hevm.expectRevert(\"ERC1155: caller is not owner nor approved\");\n        mt.burnBatch(address(0x1), tokenIds, tokenAmounts);\n    }\n\n    // it reverts on attempting to burn more than balance\n    function testCannotBurnMoreThanOwned() public {\n        mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0), 0);\n\n        hevm.expectRevert(\"ERC1155: burn amount exceeds balance\");\n        mt.burn(address(this), 1, 11);\n    }\n}\n\ncontract ShowtimeMTURITest is DSTest, ERC1155Holder {\n    ShowtimeMT internal mt;\n    uint256 internal tokenId;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    function setUp() public {\n        mt = new ShowtimeMT();\n\n        tokenId = mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0), 0);\n    }\n\n    // it should be able to get baseURI\n    function testCanGetBaseURI() public {\n        assertEq(mt.baseURI(), \"https://gateway.pinata.cloud/ipfs/\");\n    }\n\n    // it owner should be able to set baseURI\n    function testOwnerCanSetBaseURI() public {\n        mt.setBaseURI(\"https://gateway.test.com/ipfs/\");\n\n        assertEq(mt.baseURI(), \"https://gateway.test.com/ipfs/\");\n    }\n\n    // it should be able to get token URI\n    function testCanGetTokenURI() public {\n        assertEq(mt.uri(tokenId), \"https://gateway.pinata.cloud/ipfs/some-hash\");\n    }\n}\n\ncontract ShowtimeMTTransferTest is DSTest, ERC1155Holder {\n    ShowtimeMT internal mt;\n    uint256 internal tokenId;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    function setUp() public {\n        mt = new ShowtimeMT();\n\n        tokenId = mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0), 0);\n    }\n\n    // it nft-owner should be able to transfer amount\n    function testCanTransfer() public {\n        uint256 fromBalance = mt.balanceOf(address(this), tokenId);\n        uint256 toBalance = mt.balanceOf(address(0x1), tokenId);\n\n        mt.safeTransferFrom(address(this), address(0x1), tokenId, 1, \"0\");\n\n        uint256 fromBalance_new = mt.balanceOf(address(this), tokenId);\n        uint256 toBalance_new = mt.balanceOf(address(0x1), tokenId);\n        assertEq(fromBalance_new, fromBalance - 1);\n        assertEq(toBalance_new, toBalance + 1);\n    }\n}\n\ncontract ShowtimeMTRoyaltyTest is DSTest, ERC1155Holder {\n    ShowtimeMT internal mt;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    function setUp() public {\n        mt = new ShowtimeMT();\n    }\n\n    // it mints token with royalty\n    function testMintsWithRoyalty() public {\n        uint256 tokenId = mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(0x1), 10_00);\n        (address receiver, uint256 royaltyAmount) = mt.royaltyInfo(tokenId, 100); // 100 is sale price\n\n        assertEq(receiver, address(0x1));\n        assertEq(royaltyAmount, 10);\n    }\n\n    // it mints in batch with royalty\n    function testBatchMintsWithRoyalty() public {\n        uint256[] memory tokenAmounts = new uint256[](5);\n        string[] memory hashes = new string[](5);\n        address[] memory addresses = new address[](5);\n        uint256[] memory royalties = new uint256[](5);\n\n        for (uint256 i = 0; i < 5; i++) {\n            tokenAmounts[i] = i;\n            hashes[i] = string(abi.encodePacked(\"hash-\", i));\n            addresses[i] = address(0x1);\n            royalties[i] = 500 * (i + 1);\n        }\n        uint256[] memory tokenIds = mt.issueTokenBatch(address(this), tokenAmounts, hashes, \"0\", addresses, royalties);\n        for (uint256 i = 0; i < 5; i++) {\n            (address receiver, uint256 royaltyAmount) = mt.royaltyInfo(tokenIds[i], 100);\n            assertEq(receiver, address(0x1));\n            assertEq(royaltyAmount, 5 * (i + 1));\n        }\n    }\n\n    // it throws on % greater than 100%\n    function testCannotHaveMoreThan100PercentRoyalty() public {\n        hevm.expectRevert(\"ERC2981Royalties: value too high\");\n        mt.issueToken(address(this), 10, \"some-hash\", \"0\", address(this), 101_00);\n    }\n}\n\ncontract ShowtimeMTERC165Test is DSTest, ERC1155Holder {\n    ShowtimeMT internal mt;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    function setUp() public {\n        mt = new ShowtimeMT();\n    }\n\n    // it supports interface IERC165\n    function testIERC165Support() public {\n        assertTrue(mt.supportsInterface(0x01ffc9a7));\n    }\n\n    // it supports interface IERC1155\n    function testIERC1155Support() public {\n        assertTrue(mt.supportsInterface(0xd9b67a26));\n    }\n\n    // it supports interface IERC2981\n    function testIERC2981Support() public {\n        assertTrue(mt.supportsInterface(0x2a55205a));\n    }\n\n    // it returns false for 0xffffffff\n    function testReturnsFalseForFFF() public {\n        assertTrue(!mt.supportsInterface(0xffffffff));\n    }\n}\n"
    },
    "src/test/ShowtimeBakeSaleTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./Hevm.sol\";\nimport \"./TestToken.sol\";\nimport \"../../lib/ds-test/src/test.sol\";\nimport \"../ShowtimeMT.sol\";\nimport \"../ShowtimeV1Market.sol\";\nimport \"../periphery/ShowtimeBakeSale.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\n\ncontract User is ERC1155Holder {}\n\ncontract ShowtimeBakeSaleTest is DSTest, ERC1155Holder {\n    uint256 constant INITIAL_NFT_SUPPLY = 1000;\n    address constant BURN_ADDRESS = address(0xdEaD);\n    address constant FORWARDER_ADDRESS = BURN_ADDRESS;\n\n    User internal bob = new User();\n    User internal alice = new User();\n    User internal charity = new User();\n    TestToken internal token;\n    ShowtimeMT internal showtimeNFT;\n    ShowtimeV1Market internal market;\n    Hevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n    address[] justCharityPayees = [address(charity)];\n    uint256[] just100Shares = [100];\n\n    ShowtimeBakeSale charitySeller;\n\n    uint256 tokenId0PctRoyalty;\n    uint256 tokenId10PctRoyaltyToAlice;\n    uint256 tokenId100PctRoyaltyToAlice;\n    uint256 tokenId10PctRoyaltyToZeroAddress;\n\n    event ListingCreated(uint256 indexed listingId, address indexed seller, uint256 indexed tokenId);\n    event ListingDeleted(uint256 indexed listingId, address indexed seller);\n    event SaleCompleted(\n        uint256 indexed listingId,\n        address indexed seller,\n        address indexed buyer,\n        address receiver,\n        uint256 quantity\n    );\n    event RoyaltyPaid(address indexed receiver, IERC20 currency, uint256 amount);\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    function setUp() public {\n        // mint NFTs\n        showtimeNFT = new ShowtimeMT();\n        tokenId0PctRoyalty = showtimeNFT.issueToken(\n            address(alice),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(0),\n            0\n        ); // 0% royalties\n        tokenId10PctRoyaltyToAlice = showtimeNFT.issueToken(\n            address(alice),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(alice),\n            10_00\n        ); // 10% royalties\n        tokenId100PctRoyaltyToAlice = showtimeNFT.issueToken(\n            address(alice),\n            INITIAL_NFT_SUPPLY,\n            \"some-hash\",\n            \"0\",\n            address(alice),\n            100_00\n        ); // 100% royalties\n\n        // mint erc20s to bob\n        token = new TestToken();\n        hevm.prank(address(bob));\n        token.mint(0xffffffff);\n\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(token);\n\n        // approvals\n        market = new ShowtimeV1Market(address(showtimeNFT), FORWARDER_ADDRESS, tokens);\n        hevm.prank(address(bob));\n        token.approve(address(market), type(uint256).max);\n\n        // deploy the normal splitter with 100% to charity\n        charitySeller = new ShowtimeBakeSale(address(showtimeNFT), address(market), justCharityPayees, just100Shares);\n    }\n\n    function testDeploySalesContractWithNoPayees() public {\n        hevm.expectRevert(\"PaymentSplitter: no payees\");\n\n        address[] memory payees = new address[](0);\n        uint256[] memory shares = new uint256[](0);\n\n        new ShowtimeBakeSale(address(showtimeNFT), address(market), payees, shares);\n    }\n\n    function testDeploySalesContractWithBadShares() public {\n        hevm.expectRevert(\"PaymentSplitter: shares are 0\");\n\n        address[] memory payees = new address[](1);\n        payees[0] = address(bob);\n\n        uint256[] memory shares = new uint256[](1);\n        shares[0] = 0;\n\n        new ShowtimeBakeSale(address(showtimeNFT), address(market), payees, shares);\n    }\n\n    function testDeploySalesContractWithPayeesSharesMismatch() public {\n        hevm.expectRevert(\"PaymentSplitter: payees and shares length mismatch\");\n\n        address[] memory payees = new address[](2);\n        payees[0] = address(alice);\n        payees[1] = address(bob);\n\n        uint256[] memory shares = new uint256[](1);\n        shares[0] = 100;\n\n        new ShowtimeBakeSale(address(showtimeNFT), address(market), payees, shares);\n    }\n\n    function testDeploySalesContractWithDuplicatePayees() public {\n        hevm.expectRevert(\"PaymentSplitter: account already has shares\");\n\n        address[] memory payees = new address[](2);\n        payees[0] = address(bob);\n        payees[1] = address(bob);\n\n        uint256[] memory shares = new uint256[](2);\n        shares[0] = 50;\n        shares[1] = 50;\n\n        new ShowtimeBakeSale(address(showtimeNFT), address(market), payees, shares);\n    }\n\n    function testOnlyOwnerCanCreateSales() public {\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n\n        hevm.prank(address(alice));\n        charitySeller.createSale(2, 2, 2, address(token));\n    }\n\n    function testOnlyOwnerCanCancelSales() public {\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n\n        hevm.prank(address(alice));\n        charitySeller.cancelSale(0);\n    }\n\n    function testOnlyOwnerCanWithdraw() public {\n        hevm.expectRevert(\"Ownable: caller is not the owner\");\n        hevm.prank(address(alice));\n        charitySeller.withdraw(42, address(alice));\n    }\n\n    function testHappyPathEndToEnd(uint16 price, uint8 quantity) public {\n        uint256 tokenId = tokenId10PctRoyaltyToAlice;\n\n        // when alice transfers her NFTs to the charitySeller\n        hevm.prank(address(alice));\n        showtimeNFT.safeTransferFrom(address(alice), address(charitySeller), tokenId, INITIAL_NFT_SUPPLY, \"\");\n\n        // then we see the balance of the charitySeller reflected\n        assertEq(INITIAL_NFT_SUPPLY, showtimeNFT.balanceOf(address(charitySeller), tokenId));\n\n        // when the charitySeller puts the NFT up for sale\n        uint256 listingId = charitySeller.createSale(tokenId, INITIAL_NFT_SUPPLY, price, address(token));\n\n        // then we see the expected supply available for purchase\n        assertEq(market.availableForSale(listingId), INITIAL_NFT_SUPPLY);\n\n        if (quantity == 0) {\n            // we can't purchase 0, it will throw `NullQuantity()`\n            return;\n        }\n\n        // when bob purchases an NFT\n        hevm.expectEmit(true, true, true, true);\n        emit SaleCompleted(listingId, address(charitySeller), address(bob), address(bob), quantity);\n\n        hevm.prank(address(bob));\n        market.buy(listingId, tokenId, quantity, price, address(token), address(bob));\n\n        // then we see the balances reflected\n        uint256 salePrice = uint256(quantity) * uint256(price);\n        uint256 royalties = salePrice / 10;\n        uint256 saleProceeds = salePrice - royalties;\n        uint remainingSupply = INITIAL_NFT_SUPPLY - quantity;\n        assertEq(quantity, showtimeNFT.balanceOf(address(bob), tokenId));\n        assertEq(remainingSupply, showtimeNFT.balanceOf(address(charitySeller), tokenId));\n        assertEq(saleProceeds, token.balanceOf(address(charitySeller)));\n        assertEq(royalties, token.balanceOf(address(alice)));\n\n        if (price == 0) {\n            // nothing to release, it will throw `account is not due payment`\n            return;\n        }\n\n        // when someone calls release (could be anyone, so let's randomly pick bob)\n        hevm.prank(address(bob));\n        charitySeller.release(token, address(charity));\n\n        // then we see the balance of the sales contract going to the charity\n        assertEq(0, token.balanceOf(address(charitySeller)));\n        assertEq(saleProceeds, token.balanceOf(address(charity)));\n\n        // when the deployer cancels the sale, then the listing really is deleted\n        hevm.expectEmit(true, true, true, true);\n        emit ListingDeleted(listingId, address(charitySeller));\n        charitySeller.cancelSale(listingId);\n\n        // when the deployer burns the remaining supply\n        hevm.expectEmit(true, true, true, true);\n        emit TransferSingle(\n            address(charitySeller),\n            address(charitySeller),\n            address(alice),\n            tokenId,\n            remainingSupply\n        );\n        charitySeller.withdraw(tokenId, address(alice));\n\n        // then the transfer really happened\n        assertEq(0, showtimeNFT.balanceOf(address(charitySeller), tokenId));\n        assertEq(remainingSupply, showtimeNFT.balanceOf(address(alice), tokenId));\n    }\n}\n"
    },
    "src/periphery/ShowtimeBakeSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { PaymentSplitter } from \"@openzeppelin/contracts/finance/PaymentSplitter.sol\";\nimport { IERC1155 } from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\nimport { ShowtimeMTReceiver } from \"./ShowtimeMTReceiver.sol\";\n\ninterface IShowtimeV1Market {\n    function createSale(\n        uint256 _tokenId,\n        uint256 _quantity,\n        uint256 _price,\n        address _currency\n    ) external returns (uint256 listingId);\n\n    function cancelSale(uint256 _listingId) external;\n}\n\n/// This contract acts as a delegate for listings on the showtime.io marketplace.\n/// It allows trustless sales for 3rd parties such as charities.\n///\n/// Usage:\n/// 1. deploy a copy of this contract with the appropriate payees and shares. The payees are immutable and auditable by anyone.\n/// 2. anybody can mint a Showtime NFT with the royalties recipient set to the address of this contract\n/// 3. the minter transfers (some or all of the editions of) the Showtime NFT to this contract\n/// 4. the deployer of the contract calls `createSale`\n/// 5. (optional) the deployer calls `renounceOwnership()`, proving that the listing and the remaining supply will be permanently left untouched\n/// 6. proceeds from primary sales and secondary sales will accrue in this contract\n/// 7. anybody can call `release(IERC20 token, address account)` to disperse the funds to the recipients\ncontract ShowtimeBakeSale is PaymentSplitter, ShowtimeMTReceiver, Ownable {\n    IERC1155 public immutable showtimeMT;\n    IShowtimeV1Market public immutable showtimeMarket;\n\n    constructor(\n        address _showtimeMT,\n        address _showtimeMarket,\n        address[] memory payees,\n        uint256[] memory shares_\n    ) PaymentSplitter(payees, shares_) ShowtimeMTReceiver(address(_showtimeMT)) {\n        showtimeMT = IERC1155(_showtimeMT);\n        showtimeMarket = IShowtimeV1Market(_showtimeMarket);\n\n        IERC1155(_showtimeMT).setApprovalForAll(address(_showtimeMarket), true);\n    }\n\n    function createSale(\n        uint256 _tokenId,\n        uint256 _quantity,\n        uint256 _price,\n        address _currency\n    ) external onlyOwner returns (uint256 listingId) {\n        listingId = showtimeMarket.createSale(_tokenId, _quantity, _price, _currency);\n    }\n\n    function cancelSale(uint256 listingId) external onlyOwner {\n        showtimeMarket.cancelSale(listingId);\n    }\n\n    function withdraw(uint256 _tokenId, address to) external onlyOwner {\n        uint howMany = showtimeMT.balanceOf(address(this), _tokenId);\n        showtimeMT.safeTransferFrom(address(this), to, _tokenId, howMany, \"\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/finance/PaymentSplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\ncontract PaymentSplitter is Context {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20 token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(IERC20 token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = address(this).balance + totalReleased();\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _released[account] += payment;\n        _totalReleased += payment;\n\n        Address.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20 token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _erc20Released[token][account] += payment;\n        _erc20TotalReleased[token] += payment;\n\n        SafeERC20.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n}\n"
    },
    "src/periphery/ShowtimeMTReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport { ERC1155Receiver } from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\";\n\ncontract ShowtimeMTReceiver is ERC1155Receiver {\n    address private immutable showtimeMT;\n\n    error UnexpectedERC1155Transfer(address _nftContract, uint256 id);\n    error UnexpectedERC1155BatchTransfer(address _nftContract, uint256[] ids);\n\n    constructor(address _showtimeMT) {\n        showtimeMT = _showtimeMT;\n    }\n\n    /// Accept transfers from ShowtimeMT\n    function onERC1155Received(\n        address, /* operator */\n        address, /* from */\n        uint256 id,\n        uint256, /* value */\n        bytes calldata /* data */\n    ) external view override returns (bytes4) {\n        if (msg.sender != showtimeMT) {\n            revert UnexpectedERC1155Transfer(msg.sender, id);\n        }\n        return this.onERC1155Received.selector;\n    }\n\n    /// Accept batch transfers from ShowtimeMT\n    function onERC1155BatchReceived(\n        address, /* operator */\n        address, /* from */\n        uint256[] calldata ids,\n        uint256[] calldata, /* values */\n        bytes calldata /* data */\n    ) external view override returns (bytes4) {\n        if (msg.sender != showtimeMT) {\n            revert UnexpectedERC1155BatchTransfer(msg.sender, ids);\n        }\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}