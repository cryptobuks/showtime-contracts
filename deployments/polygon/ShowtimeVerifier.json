{
  "address": "0x50C0017836517dc49C9EBC7615d8B322A0f91F67",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "BadNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DeadlineTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownSigner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "ManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        }
      ],
      "name": "SignerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SignerRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_ATTESTATION_VALIDITY_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SIGNER_VALIDITY_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "context",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "encode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerToRegister",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signerToRevoke",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "validityDays",
          "type": "uint256"
        }
      ],
      "name": "registerAndRevoke",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "validityDays",
          "type": "uint256"
        }
      ],
      "name": "registerSigner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestType",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "revokeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signerValidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "context",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedAttestation",
          "name": "signedAttestation",
          "type": "tuple"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "context",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "typeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "encodedData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "context",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedAttestation",
          "name": "signedAttestation",
          "type": "tuple"
        }
      ],
      "name": "verifyAndBurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "context",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "typeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "encodedData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyAndBurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4c8b2181b5c9d6ea5a6678e0f84343c966c15b4012ad4f171df008b7230b3ee",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x515F7d84cEE53051b7ADF645fA2220f65BC25c68",
    "contractAddress": null,
    "transactionIndex": 15,
    "gasUsed": "1442787",
    "logsBloom": "0x
    "blockHash": "0x3d7bbd4a198a9103e72144f123c927b76ce88776350119145c532b25ce7f82df",
    "transactionHash": "0xf4c8b2181b5c9d6ea5a6678e0f84343c966c15b4012ad4f171df008b7230b3ee",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 32321692,
        "transactionHash": "0xf4c8b2181b5c9d6ea5a6678e0f84343c966c15b4012ad4f171df008b7230b3ee",
        "address": "0x50C0017836517dc49C9EBC7615d8B322A0f91F67",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 147,
        "blockHash": "0x3d7bbd4a198a9103e72144f123c927b76ce88776350119145c532b25ce7f82df"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 32321692,
        "transactionHash": "0xf4c8b2181b5c9d6ea5a6678e0f84343c966c15b4012ad4f171df008b7230b3ee",
        "address": "0x50C0017836517dc49C9EBC7615d8B322A0f91F67",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c",
          "0x000000000000000000000000515f7d84cee53051b7adf645fa2220f65bc25c68"
        ],
        "data": "0x",
        "logIndex": 148,
        "blockHash": "0x3d7bbd4a198a9103e72144f123c927b76ce88776350119145c532b25ce7f82df"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 32321692,
        "transactionHash": "0xf4c8b2181b5c9d6ea5a6678e0f84343c966c15b4012ad4f171df008b7230b3ee",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000515f7d84cee53051b7adf645fa2220f65bc25c68",
          "0x000000000000000000000000e87d858ca83ffc1e8372b57b2d4f8aaaf8156f19"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a17686501019ae0000000000000000000000000000000000000000000000001bc16d674ec800000000000000000000000000000000000000000000000005587f0b173388f8caad0000000000000000000000000000000000000000000000001b1ff6e0feb7e6520000000000000000000000000000000000000000000005587fac8db9d908e45b",
        "logIndex": 149,
        "blockHash": "0x3d7bbd4a198a9103e72144f123c927b76ce88776350119145c532b25ce7f82df"
      }
    ],
    "blockNumber": 32321692,
    "cumulativeGasUsed": "11494930",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x515F7d84cEE53051b7ADF645fA2220f65BC25c68"
  ],
  "numDeployments": 1,
  "solcInputHash": "84c8e1217695cca8ba1bbd09ead777e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"BadNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownSigner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ATTESTATION_VALIDITY_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SIGNER_VALIDITY_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerToRegister\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToRevoke\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validityDays\",\"type\":\"uint256\"}],\"name\":\"registerAndRevoke\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validityDays\",\"type\":\"uint256\"}],\"name\":\"registerSigner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestType\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"revokeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerValidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedAttestation\",\"name\":\"signedAttestation\",\"type\":\"tuple\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"typeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encodedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedAttestation\",\"name\":\"signedAttestation\",\"type\":\"tuple\"}],\"name\":\"verifyAndBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"typeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encodedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyAndBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerSigner(address,uint256)\":{\"params\":{\"signer\":\"the new signer to register\",\"validityDays\":\"how long the signer will be valid starting from the moment of registration\"},\"returns\":{\"validUntil\":\"the timestamp in seconds after which the signer expires\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setManager(address)\":{\"params\":{\"_manager\":\"the address that will be authorized to add and remove signers (use address 0 to disable)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verify(((address,address,uint256,uint256),bytes))\":{\"params\":{\"signedAttestation\":\"the attestation to verify along with a corresponding signature\"},\"returns\":{\"_0\":\"true if the attestation is valid, reverts otherwise\"}},\"verify((address,address,uint256,uint256),bytes32,bytes,bytes)\":{\"details\":\"see https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct\",\"params\":{\"attestation\":\"the attestation to verify\",\"encodedData\":\"the EIP712-encoded struct data to be verified (32 bytes long members, hashed dynamic types)\",\"signature\":\"the signature of the hashed struct\",\"typeHash\":\"the EIP712 type hash for the struct data to be verified\"},\"returns\":{\"_0\":\"true if the signature is valid, reverts otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"nonces(address)\":{\"notice\":\"maps addresses to their nonces\"},\"registerAndRevoke(address,address,uint256)\":{\"notice\":\"Convenience function for the workflow where one expects a single active signer\"},\"registerSigner(address,uint256)\":{\"notice\":\"Registers an authorized signer\"},\"revokeSigner(address)\":{\"notice\":\"Remove an authorized signer\"},\"setManager(address)\":{\"notice\":\"Delegates the signer management to another address\"},\"verify(((address,address,uint256,uint256),bytes))\":{\"notice\":\"Verifies the given attestationThis method does not increment the nonce so it provides no replay safety\"},\"verify((address,address,uint256,uint256),bytes32,bytes,bytes)\":{\"notice\":\"Verifies arbitrary typed dataThis method does not increment the nonce so it provides no replay safetyThe attestation SHOULD be part of the encodedData (i.e. a change in the attestation should change the signature)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ShowtimeVerifier.sol\":\"ShowtimeVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"src/ShowtimeVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { EIP712, ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\nimport { IShowtimeVerifier, Attestation, SignedAttestation } from \\\"./interfaces/IShowtimeVerifier.sol\\\";\\n\\ncontract ShowtimeVerifier is Ownable, EIP712, IShowtimeVerifier {\\n    /*//////////////////////////////////////////////////////////////\\n                                CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n    bytes public constant requestType =\\n        \\\"Attestation(address beneficiary,address context,uint256 nonce,uint256 validUntil)\\\";\\n\\n    bytes32 public constant REQUEST_TYPE_HASH = keccak256(requestType);\\n\\n    uint256 public constant MAX_ATTESTATION_VALIDITY_SECONDS = 5 * 60;\\n\\n    uint256 public constant MAX_SIGNER_VALIDITY_DAYS = 365;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MUTABLE STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public signerValidity;\\n\\n    /// maps addresses to their nonces\\n    mapping(address => uint256) public nonces;\\n\\n    address public manager;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MISE EN BOUCHE\\n    //////////////////////////////////////////////////////////////*/\\n    constructor(address _owner) EIP712(\\\"showtime.xyz\\\", \\\"v1\\\") Ownable() {\\n        transferOwnership(_owner);\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != owner() && msg.sender != manager) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    function domainSeparator() public view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            VERIFICATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function encode(Attestation memory attestation) public pure returns (bytes memory) {\\n        return abi.encode(attestation.beneficiary, attestation.context, attestation.nonce, attestation.validUntil);\\n    }\\n\\n    /// @notice Verifies the given attestation\\n    /// @notice This method does not increment the nonce so it provides no replay safety\\n    /// @param signedAttestation the attestation to verify along with a corresponding signature\\n    /// @return true if the attestation is valid, reverts otherwise\\n    function verify(SignedAttestation calldata signedAttestation) public view override returns (bool) {\\n        // what we want is EIP712 encoding, not ABI encoding\\n        return\\n            verify(\\n                signedAttestation.attestation,\\n                REQUEST_TYPE_HASH,\\n                encode(signedAttestation.attestation),\\n                signedAttestation.signature\\n            );\\n    }\\n\\n    /// @notice Verifies arbitrary typed data\\n    /// @notice This method does not increment the nonce so it provides no replay safety\\n    /// @dev see https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct\\n    /// @notice The attestation SHOULD be part of the encodedData (i.e. a change in the attestation should change the signature)\\n    /// @param attestation the attestation to verify\\n    /// @param typeHash the EIP712 type hash for the struct data to be verified\\n    /// @param encodedData the EIP712-encoded struct data to be verified (32 bytes long members, hashed dynamic types)\\n    /// @param signature the signature of the hashed struct\\n    /// @return true if the signature is valid, reverts otherwise\\n    function verify(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) public view override returns (bool) {\\n        /// TIMESTAMP VERIFICATION\\n        uint256 validUntil = attestation.validUntil;\\n        if (block.timestamp > validUntil) {\\n            revert Expired();\\n        }\\n\\n        if ((validUntil - block.timestamp) > MAX_ATTESTATION_VALIDITY_SECONDS) {\\n            revert DeadlineTooLong();\\n        }\\n\\n        /// NONCE VERIFICATION\\n        uint256 expectedNonce = nonces[attestation.beneficiary];\\n        if (expectedNonce != attestation.nonce) {\\n            revert BadNonce(expectedNonce, attestation.nonce);\\n        }\\n\\n        /// SIGNER VERIFICATION\\n        bytes32 structHash = keccak256(abi.encodePacked(typeHash, encodedData));\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n        address signer = ECDSA.recover(digest, signature);\\n        uint256 signerExpirationTimestamp = signerValidity[signer];\\n        if (signerExpirationTimestamp == 0) {\\n            revert UnknownSigner();\\n        }\\n\\n        if (block.timestamp > signerExpirationTimestamp) {\\n            revert SignerExpired(signer);\\n        }\\n\\n        return true;\\n    }\\n\\n    function incrementNonce(address beneficiary) private {\\n        unchecked {\\n            ++nonces[beneficiary];\\n        }\\n    }\\n\\n    function verifyAndBurn(SignedAttestation calldata signedAttestation) external override returns (bool) {\\n        if (!verify(signedAttestation)) {\\n            return false;\\n        }\\n\\n        incrementNonce(signedAttestation.attestation.beneficiary);\\n        return true;\\n    }\\n\\n    function verifyAndBurn(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external override returns (bool) {\\n        if (!verify(attestation, typeHash, encodedData, signature)) {\\n            return false;\\n        }\\n\\n        incrementNonce(attestation.beneficiary);\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        SIGNER MANAGEMENT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// Delegates the signer management to another address\\n    /// @param _manager the address that will be authorized to add and remove signers (use address 0 to disable)\\n    function setManager(address _manager) external override onlyOwner {\\n        manager = _manager;\\n\\n        emit ManagerUpdated(manager);\\n    }\\n\\n    function _registerSigner(address signer, uint256 validityDays) private returns (uint256 validUntil) {\\n        if (validityDays > MAX_SIGNER_VALIDITY_DAYS) {\\n            revert DeadlineTooLong();\\n        }\\n\\n        validUntil = block.timestamp + validityDays * 24 * 60 * 60;\\n        signerValidity[signer] = validUntil;\\n\\n        emit SignerAdded(signer, validUntil);\\n    }\\n\\n    /// Registers an authorized signer\\n    /// @param signer the new signer to register\\n    /// @param validityDays how long the signer will be valid starting from the moment of registration\\n    /// @return validUntil the timestamp in seconds after which the signer expires\\n    function registerSigner(address signer, uint256 validityDays)\\n        external\\n        override\\n        onlyAdmin\\n        returns (uint256 validUntil)\\n    {\\n        validUntil = _registerSigner(signer, validityDays);\\n    }\\n\\n    function _revokeSigner(address signer) private {\\n        signerValidity[signer] = 0;\\n        emit SignerRevoked(signer);\\n    }\\n\\n    /// Remove an authorized signer\\n    function revokeSigner(address signer) external override onlyAdmin {\\n        _revokeSigner(signer);\\n    }\\n\\n    /// @notice Convenience function for the workflow where one expects a single active signer\\n    function registerAndRevoke(\\n        address signerToRegister,\\n        address signerToRevoke,\\n        uint256 validityDays\\n    ) external override onlyAdmin returns (uint256 validUntil) {\\n        _revokeSigner(signerToRevoke);\\n        return _registerSigner(signerToRegister, validityDays);\\n    }\\n}\\n\",\"keccak256\":\"0x5db4990d61ba107df1de77b6be549f83d945af4eddc20435d0dff65d0b1b21ac\",\"license\":\"MIT\"},\"src/interfaces/IShowtimeVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nstruct Attestation {\\n    address beneficiary;\\n    address context;\\n    uint256 nonce;\\n    uint256 validUntil;\\n}\\n\\nstruct SignedAttestation {\\n    Attestation attestation;\\n    bytes signature;\\n}\\n\\ninterface IShowtimeVerifier {\\n    error BadNonce(uint256 expected, uint256 actual);\\n    error DeadlineTooLong();\\n    error Expired();\\n    error NullAddress();\\n    error SignerExpired(address signer);\\n    error Unauthorized();\\n    error UnknownSigner();\\n\\n    event SignerAdded(address signer, uint256 validUntil);\\n    event SignerRevoked(address signer);\\n    event ManagerUpdated(address newManager);\\n\\n    function verify(SignedAttestation calldata signedAttestation) external view returns (bool);\\n\\n    function verifyAndBurn(SignedAttestation calldata signedAttestation) external returns (bool);\\n\\n    function verify(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external view returns (bool);\\n\\n    function verifyAndBurn(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external returns (bool);\\n\\n    function setManager(address _manager) external;\\n\\n    function registerSigner(address signer, uint256 validityDays) external returns (uint256 validUntil);\\n\\n    function revokeSigner(address signer) external;\\n\\n    function registerAndRevoke(\\n        address signerToRegister,\\n        address signerToRevoke,\\n        uint256 validityDays\\n    ) external returns (uint256 validUntil);\\n}\\n\",\"keccak256\":\"0x695d273638ee417210ccd91f0d47a9e280573887d068086f19038b8483950af8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101408060405234620000945760208162001b958038038091620000248285620000e7565b8339810103126200009457516001600160a01b038116810362000094576200004c9062000135565b60405161188e908162000307823960805181610ddc015260a05181610e97015260c05181610dad015260e05181610e2b01526101005181610e5101526101205181610e080152f35b600080fd5b604081019081106001600160401b03821117620000b557604052565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b03821117620000b557604052565b601f909101601f19168101906001600160401b03821190821017620000b557604052565b604051906200011a8262000099565b600c8252565b604051906200012f8262000099565b60028252565b620001f890620001446200010b565b60208101906b39b437bbba34b6b2973c3cbd60a11b82526200016562000120565b91602083019161763160f01b83526200017e33620002ba565b519020915190208160e05280610100524660a05260405160208101917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f93848452604083015260608201524660808201523060a082015260a08152620001e481620000cb565b5190206080523060c05261012052620001fa565b565b6000546001600160a01b03908116330362000276578116156200022257620001f890620002ba565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600080546001600160a01b039283166001600160a01b03198216811783556040519093909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe60806040526004361015610013575b600080fd5b60003560e01c806328425d51146101a35780632ff369691461019a578063308b5569146101915780633840497c1461018857806341366b381461017f578063481c6a7514610176578063715018a61461016d5780637ecebe0014610164578063820593001461015b57806385c10416146101525780638da5cb5b1461014957806396f1804014610140578063c34b44a014610137578063ca194c241461012e578063d0ebdbe714610125578063d7bdd1ae1461011c578063edf8f87814610113578063f2fde38b1461010a578063f698da25146101015763fde6360a146100f957600080fd5b61000e610c7a565b5061000e610c40565b5061000e610b4c565b5061000e610ae2565b5061000e610a57565b5061000e61099f565b5061000e610963565b5061000e6108e4565b5061000e6108c7565b5061000e610874565b5061000e610857565b5061000e61072c565b5061000e6106c2565b5061000e61061a565b5061000e6105c7565b5061000e6105a4565b5061000e6104de565b5061000e6104a2565b5061000e61045b565b5061000e6101ca565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610206816101ac565b602435610212816101ac565b73ffffffffffffffffffffffffffffffffffffffff80600054163314159081610292575b50610268576102649161024b6102549261182f565b6044359061171f565b6040519081529081906020820190565b0390f35b60046040517f82b42900000000000000000000000000000000000000000000000000000000008152fd5b90506003541633141538610236565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176102ed57604052565b6102f56102a1565b604052565b60c0810190811067ffffffffffffffff8211176102ed57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176102ed57604052565b60405190610364826102d1565b605182527f6e743235362076616c6964556e74696c290000000000000000000000000000006060837f4174746573746174696f6e28616464726573732062656e65666963696172792c60208201527f6164647265737320636f6e746578742c75696e74323536206e6f6e63652c756960408201520152565b918091926000905b8282106103fc5750116103f5575050565b6000910152565b915080602091830151818601520182916103e4565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040936020845261045481518092816020880152602088880191016103dc565b0116010190565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610264610496610357565b60405191829182610411565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405161012c8152f35b503461000e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610264610496604051610520816102d1565b60043561052c816101ac565b815260243561053a816101ac565b602082015260443560408201526064356060820152610ebd565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9060208282011261000e576004359167ffffffffffffffff831161000e578260a09203011261000e5760040190565b503461000e5760206105bd6105b836610554565b610f31565b6040519015158152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60035416604051908152f35b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106bf5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691610691338414610cc2565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff600435610713816101ac565b1660005260026020526020604060002054604051908152f35b503461000e5760206105bd61074036610554565b6116bf565b92919267ffffffffffffffff82116107ab575b6040519161078e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610316565b82948184528183011161000e578281602093846000960137010152565b6107b36102a1565b610758565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820160e0811261000e5760801361000e576004916084359167ffffffffffffffff9060a43582811161000e578360238201121561000e5783816024610823938901359101610745565b9260c4359083821161000e578060238301121561000e578187013593841161000e576024848301011161000e576024019190565b503461000e5760206105bd61086b366107b8565b93929092611060565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e5760206105bd6108db366107b8565b93929092611712565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610920816101ac565b73ffffffffffffffffffffffffffffffffffffffff80600054163314159081610954575b50610268576109529061182f565b005b90506003541633141538610944565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405161016d8152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f2c1c11af44aa5608f1dca38c00275c30ea091e02417d36e70e9a1538689c433d60206004356109fe816101ac565b73ffffffffffffffffffffffffffffffffffffffff90610a2382600054163314610cc2565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006003541617600355604051908152a1005b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610a93816101ac565b73ffffffffffffffffffffffffffffffffffffffff80600054163314159081610ad3575b5061026857610acb6020916024359061171f565b604051908152f35b90506003541633141538610ab7565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff600435610b33816101ac565b1660005260016020526020604060002054604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610b88816101ac565b73ffffffffffffffffffffffffffffffffffffffff610bac81600054163314610cc2565b811615610bbc5761095290610d27565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020610acb610d96565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020610cb4610357565b818151910120604051908152f35b15610cc957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016301480610e94575b15610dfe577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f000000000000000000000000000000000000000000000000000000000000000082527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152610e8e816102fa565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614610dd5565b73ffffffffffffffffffffffffffffffffffffffff9081815116916020820151169060606040820151910151916040519360208501526040840152606083015260808201526080815260a0810181811067ffffffffffffffff821117610f24575b60405290565b610f2c6102a1565b610f1e565b610f39610357565b60208151910120813603906080821261000e57610f94604051610f5b816102d1565b8435610f66816101ac565b81526020850135610f76816101ac565b60208201526040850135604082015260608501356060820152610ebd565b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe16080850135910181121561000e5783019182359267ffffffffffffffff841161000e5760200191833603831361000e57610fef94611060565b90565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81811061102d570390565b611035610ff2565b0390565b35610fef816101ac565b60209291815261105b825180938580850191016103dc565b010190565b919091606081013580421161123f5761107d61012c914290611022565b116112155760406110b661109083611039565b73ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b54910135908181036111da5750509161111c611124926110e861111461112a9796604051928391602083019586611043565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610316565b519020611673565b923691610745565b90611269565b6111548173ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b5480156111b05742116111675750600190565b6040517f5b0a554300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602490fd5b60046040517f5e4b9f75000000000000000000000000000000000000000000000000000000008152fd5b6040517f3ddd513100000000000000000000000000000000000000000000000000000000815260048101919091526024810191909152604490fd5b60046040517f54090af9000000000000000000000000000000000000000000000000000000008152fd5b60046040517f203d82d8000000000000000000000000000000000000000000000000000000008152fd5b610fef91611276916114d6565b9190916112b7565b6005111561128857565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6112c08161127e565b806112c85750565b6112d18161127e565b60018103611338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b6113418161127e565b600281036113a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b6113b18161127e565b6003810361143e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b8061144a60049261127e565b1461145157565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b8151604181036115035750906114ff916020820151906060604084015193015160001a906115b0565b9091565b6040036115815781604060206114ff9401519101519160ff601b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85831c957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe48711611574575b16940116906115b0565b61157c610ff2565b61156a565b5050600090600290565b81198111611597570190565b61159f610ff2565b0190565b506040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116116675760ff16601b8114158061165c575b611650579160809493916020936040519384528484015260408301526060820152600093849182805260015afa15611643575b815173ffffffffffffffffffffffffffffffffffffffff81161561163d579190565b50600190565b61164b6115a3565b61161b565b50505050600090600490565b50601c8114156115e8565b50505050600090600390565b61167b610d96565b906040519060208201927f190100000000000000000000000000000000000000000000000000000000000084526022830152604282015260428152610e8e816102d1565b6116c881610f31565b1561170c5761170790356116db816101ac565b73ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002060018154019055565b600190565b50600090565b93916116c8939185611060565b919061016d8111611215576117b0620151807f50999ebf9b59bf3157a58816611976f2d723378ad51457d7b0413209e0cdee59927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81810460181182151516611822575b60188202808204603c1190151516611815575b6105a082028015159104603c1116611808575b024261158b565b83816117dd819673ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b556040805173ffffffffffffffffffffffffffffffffffffffff9290921682526020820192909252a1565b611810610ff2565b6117a9565b61181d610ff2565b611796565b61182a610ff2565b611783565b602073ffffffffffffffffffffffffffffffffffffffff7f99a705a3c2c3339d0051f56b36a60fef91e30142c93353002617999f27aec4af9216806000526001825260006040812055604051908152a156fea164736f6c634300080d000a",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806328425d51146101a35780632ff369691461019a578063308b5569146101915780633840497c1461018857806341366b381461017f578063481c6a7514610176578063715018a61461016d5780637ecebe0014610164578063820593001461015b57806385c10416146101525780638da5cb5b1461014957806396f1804014610140578063c34b44a014610137578063ca194c241461012e578063d0ebdbe714610125578063d7bdd1ae1461011c578063edf8f87814610113578063f2fde38b1461010a578063f698da25146101015763fde6360a146100f957600080fd5b61000e610c7a565b5061000e610c40565b5061000e610b4c565b5061000e610ae2565b5061000e610a57565b5061000e61099f565b5061000e610963565b5061000e6108e4565b5061000e6108c7565b5061000e610874565b5061000e610857565b5061000e61072c565b5061000e6106c2565b5061000e61061a565b5061000e6105c7565b5061000e6105a4565b5061000e6104de565b5061000e6104a2565b5061000e61045b565b5061000e6101ca565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610206816101ac565b602435610212816101ac565b73ffffffffffffffffffffffffffffffffffffffff80600054163314159081610292575b50610268576102649161024b6102549261182f565b6044359061171f565b6040519081529081906020820190565b0390f35b60046040517f82b42900000000000000000000000000000000000000000000000000000000008152fd5b90506003541633141538610236565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176102ed57604052565b6102f56102a1565b604052565b60c0810190811067ffffffffffffffff8211176102ed57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176102ed57604052565b60405190610364826102d1565b605182527f6e743235362076616c6964556e74696c290000000000000000000000000000006060837f4174746573746174696f6e28616464726573732062656e65666963696172792c60208201527f6164647265737320636f6e746578742c75696e74323536206e6f6e63652c756960408201520152565b918091926000905b8282106103fc5750116103f5575050565b6000910152565b915080602091830151818601520182916103e4565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040936020845261045481518092816020880152602088880191016103dc565b0116010190565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610264610496610357565b60405191829182610411565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405161012c8152f35b503461000e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610264610496604051610520816102d1565b60043561052c816101ac565b815260243561053a816101ac565b602082015260443560408201526064356060820152610ebd565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9060208282011261000e576004359167ffffffffffffffff831161000e578260a09203011261000e5760040190565b503461000e5760206105bd6105b836610554565b610f31565b6040519015158152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60035416604051908152f35b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106bf5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691610691338414610cc2565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff600435610713816101ac565b1660005260026020526020604060002054604051908152f35b503461000e5760206105bd61074036610554565b6116bf565b92919267ffffffffffffffff82116107ab575b6040519161078e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610316565b82948184528183011161000e578281602093846000960137010152565b6107b36102a1565b610758565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820160e0811261000e5760801361000e576004916084359167ffffffffffffffff9060a43582811161000e578360238201121561000e5783816024610823938901359101610745565b9260c4359083821161000e578060238301121561000e578187013593841161000e576024848301011161000e576024019190565b503461000e5760206105bd61086b366107b8565b93929092611060565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e5760206105bd6108db366107b8565b93929092611712565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610920816101ac565b73ffffffffffffffffffffffffffffffffffffffff80600054163314159081610954575b50610268576109529061182f565b005b90506003541633141538610944565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405161016d8152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f2c1c11af44aa5608f1dca38c00275c30ea091e02417d36e70e9a1538689c433d60206004356109fe816101ac565b73ffffffffffffffffffffffffffffffffffffffff90610a2382600054163314610cc2565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006003541617600355604051908152a1005b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610a93816101ac565b73ffffffffffffffffffffffffffffffffffffffff80600054163314159081610ad3575b5061026857610acb6020916024359061171f565b604051908152f35b90506003541633141538610ab7565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff600435610b33816101ac565b1660005260016020526020604060002054604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610b88816101ac565b73ffffffffffffffffffffffffffffffffffffffff610bac81600054163314610cc2565b811615610bbc5761095290610d27565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020610acb610d96565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020610cb4610357565b818151910120604051908152f35b15610cc957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016301480610e94575b15610dfe577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f000000000000000000000000000000000000000000000000000000000000000082527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152610e8e816102fa565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614610dd5565b73ffffffffffffffffffffffffffffffffffffffff9081815116916020820151169060606040820151910151916040519360208501526040840152606083015260808201526080815260a0810181811067ffffffffffffffff821117610f24575b60405290565b610f2c6102a1565b610f1e565b610f39610357565b60208151910120813603906080821261000e57610f94604051610f5b816102d1565b8435610f66816101ac565b81526020850135610f76816101ac565b60208201526040850135604082015260608501356060820152610ebd565b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe16080850135910181121561000e5783019182359267ffffffffffffffff841161000e5760200191833603831361000e57610fef94611060565b90565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81811061102d570390565b611035610ff2565b0390565b35610fef816101ac565b60209291815261105b825180938580850191016103dc565b010190565b919091606081013580421161123f5761107d61012c914290611022565b116112155760406110b661109083611039565b73ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b54910135908181036111da5750509161111c611124926110e861111461112a9796604051928391602083019586611043565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610316565b519020611673565b923691610745565b90611269565b6111548173ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b5480156111b05742116111675750600190565b6040517f5b0a554300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602490fd5b60046040517f5e4b9f75000000000000000000000000000000000000000000000000000000008152fd5b6040517f3ddd513100000000000000000000000000000000000000000000000000000000815260048101919091526024810191909152604490fd5b60046040517f54090af9000000000000000000000000000000000000000000000000000000008152fd5b60046040517f203d82d8000000000000000000000000000000000000000000000000000000008152fd5b610fef91611276916114d6565b9190916112b7565b6005111561128857565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6112c08161127e565b806112c85750565b6112d18161127e565b60018103611338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b6113418161127e565b600281036113a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b6113b18161127e565b6003810361143e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b8061144a60049261127e565b1461145157565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b8151604181036115035750906114ff916020820151906060604084015193015160001a906115b0565b9091565b6040036115815781604060206114ff9401519101519160ff601b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85831c957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe48711611574575b16940116906115b0565b61157c610ff2565b61156a565b5050600090600290565b81198111611597570190565b61159f610ff2565b0190565b506040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116116675760ff16601b8114158061165c575b611650579160809493916020936040519384528484015260408301526060820152600093849182805260015afa15611643575b815173ffffffffffffffffffffffffffffffffffffffff81161561163d579190565b50600190565b61164b6115a3565b61161b565b50505050600090600490565b50601c8114156115e8565b50505050600090600390565b61167b610d96565b906040519060208201927f190100000000000000000000000000000000000000000000000000000000000084526022830152604282015260428152610e8e816102d1565b6116c881610f31565b1561170c5761170790356116db816101ac565b73ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002060018154019055565b600190565b50600090565b93916116c8939185611060565b919061016d8111611215576117b0620151807f50999ebf9b59bf3157a58816611976f2d723378ad51457d7b0413209e0cdee59927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81810460181182151516611822575b60188202808204603c1190151516611815575b6105a082028015159104603c1116611808575b024261158b565b83816117dd819673ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b556040805173ffffffffffffffffffffffffffffffffffffffff9290921682526020820192909252a1565b611810610ff2565b6117a9565b61181d610ff2565b611796565b61182a610ff2565b611783565b602073ffffffffffffffffffffffffffffffffffffffff7f99a705a3c2c3339d0051f56b36a60fef91e30142c93353002617999f27aec4af9216806000526001825260006040812055604051908152a156fea164736f6c634300080d000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerSigner(address,uint256)": {
        "params": {
          "signer": "the new signer to register",
          "validityDays": "how long the signer will be valid starting from the moment of registration"
        },
        "returns": {
          "validUntil": "the timestamp in seconds after which the signer expires"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setManager(address)": {
        "params": {
          "_manager": "the address that will be authorized to add and remove signers (use address 0 to disable)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verify(((address,address,uint256,uint256),bytes))": {
        "params": {
          "signedAttestation": "the attestation to verify along with a corresponding signature"
        },
        "returns": {
          "_0": "true if the attestation is valid, reverts otherwise"
        }
      },
      "verify((address,address,uint256,uint256),bytes32,bytes,bytes)": {
        "details": "see https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct",
        "params": {
          "attestation": "the attestation to verify",
          "encodedData": "the EIP712-encoded struct data to be verified (32 bytes long members, hashed dynamic types)",
          "signature": "the signature of the hashed struct",
          "typeHash": "the EIP712 type hash for the struct data to be verified"
        },
        "returns": {
          "_0": "true if the signature is valid, reverts otherwise"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "nonces(address)": {
        "notice": "maps addresses to their nonces"
      },
      "registerAndRevoke(address,address,uint256)": {
        "notice": "Convenience function for the workflow where one expects a single active signer"
      },
      "registerSigner(address,uint256)": {
        "notice": "Registers an authorized signer"
      },
      "revokeSigner(address)": {
        "notice": "Remove an authorized signer"
      },
      "setManager(address)": {
        "notice": "Delegates the signer management to another address"
      },
      "verify(((address,address,uint256,uint256),bytes))": {
        "notice": "Verifies the given attestationThis method does not increment the nonce so it provides no replay safety"
      },
      "verify((address,address,uint256,uint256),bytes32,bytes,bytes)": {
        "notice": "Verifies arbitrary typed dataThis method does not increment the nonce so it provides no replay safetyThe attestation SHOULD be part of the encodedData (i.e. a change in the attestation should change the signature)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 472,
        "contract": "src/ShowtimeVerifier.sol:ShowtimeVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6045,
        "contract": "src/ShowtimeVerifier.sol:ShowtimeVerifier",
        "label": "signerValidity",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6050,
        "contract": "src/ShowtimeVerifier.sol:ShowtimeVerifier",
        "label": "nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6052,
        "contract": "src/ShowtimeVerifier.sol:ShowtimeVerifier",
        "label": "manager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}