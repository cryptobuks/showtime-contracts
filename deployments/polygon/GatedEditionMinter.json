{
  "address": "0x00d2249ef000002B2Fdec16900058800E900000c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IShowtimeVerifier",
          "name": "_showtimeVerifier",
          "type": "address"
        },
        {
          "internalType": "contract TimeCop",
          "name": "_timeCop",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NullAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEditionSingleMintable",
          "name": "collection",
          "type": "address"
        }
      ],
      "name": "TimeLimitReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerificationFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "context",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedAttestation",
          "name": "signedAttestation",
          "type": "tuple"
        }
      ],
      "name": "mintEdition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "beneficiary",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "context",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntil",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Attestation",
              "name": "attestation",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct SignedAttestation[]",
          "name": "signedAttestations",
          "type": "tuple[]"
        }
      ],
      "name": "mintEditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showtimeVerifier",
      "outputs": [
        {
          "internalType": "contract IShowtimeVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeCop",
      "outputs": [
        {
          "internalType": "contract TimeCop",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xec86a6fed4946266d2da6368d811859ef15745fb5cc3ea2056e984bbb5a8c56c",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x515F7d84cEE53051b7ADF645fA2220f65BC25c68",
    "contractAddress": null,
    "transactionIndex": 109,
    "gasUsed": "443344",
    "logsBloom": "0x
    "blockHash": "0x354925a98e87ba6cf10d2a736cdd021d6831022b9b357d4208de6f98a8f6913e",
    "transactionHash": "0xec86a6fed4946266d2da6368d811859ef15745fb5cc3ea2056e984bbb5a8c56c",
    "logs": [
      {
        "transactionIndex": 109,
        "blockNumber": 32321720,
        "transactionHash": "0xec86a6fed4946266d2da6368d811859ef15745fb5cc3ea2056e984bbb5a8c56c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000515f7d84cee53051b7adf645fa2220f65bc25c68",
          "0x000000000000000000000000e87d858ca83ffc1e8372b57b2d4f8aaaf8156f19"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003700687b1fffe00000000000000000000000000000000000000000000000001b162307ec04a456000000000000000000000000000000000000000000000559cf1c22ad837116bb0000000000000000000000000000000000000000000000001adf229f70e4a476000000000000000000000000000000000000000000000559cf532315fe91169b",
        "logIndex": 396,
        "blockHash": "0x354925a98e87ba6cf10d2a736cdd021d6831022b9b357d4208de6f98a8f6913e"
      }
    ],
    "blockNumber": 32321720,
    "cumulativeGasUsed": "17064680",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x50C0017836517dc49C9EBC7615d8B322A0f91F67",
    "0x50c001E4eB10801968F6640E1537D63a557e5d72"
  ],
  "numDeployments": 1,
  "solcInputHash": "84c8e1217695cca8ba1bbd09ead777e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IShowtimeVerifier\",\"name\":\"_showtimeVerifier\",\"type\":\"address\"},{\"internalType\":\"contract TimeCop\",\"name\":\"_timeCop\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IEditionSingleMintable\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"TimeLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerificationFailed\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedAttestation\",\"name\":\"signedAttestation\",\"type\":\"tuple\"}],\"name\":\"mintEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"context\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedAttestation[]\",\"name\":\"signedAttestations\",\"type\":\"tuple[]\"}],\"name\":\"mintEditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showtimeVerifier\",\"outputs\":[{\"internalType\":\"contract IShowtimeVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeCop\",\"outputs\":[{\"internalType\":\"contract TimeCop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mintEdition(((address,address,uint256,uint256),bytes))\":{\"details\":\"the edition to mint will be determined by the attestation's contextthe recipient of the minted edition will be determined by the attestation's beneficiary\",\"params\":{\"signedAttestation\":\"the attestation to verify along with a corresponding signature\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintEditions(((address,address,uint256,uint256),bytes)[])\":{\"notice\":\"a batch version of mintEditionany failed call to mintEdition will revert the entire batch\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/editions/GatedEditionMinter.sol\":\"GatedEditionMinter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n  function mintEditions(address[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x04b73ddff10e4feb9297834b5550faecb1e63bfc8c4a513ecdf25796c49360db\",\"license\":\"GPL-3.0\"},\"src/editions/GatedEditionMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IEditionSingleMintable } from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\nimport { IShowtimeVerifier, SignedAttestation } from \\\"src/interfaces/IShowtimeVerifier.sol\\\";\\nimport { IGatedEditionMinter } from \\\"./interfaces/IGatedEditionMinter.sol\\\";\\nimport { TimeCop } from \\\"./TimeCop.sol\\\";\\n\\ncontract GatedEditionMinter is IGatedEditionMinter {\\n    error NullAddress();\\n    error TimeLimitReached(IEditionSingleMintable collection);\\n    error VerificationFailed();\\n\\n    IShowtimeVerifier public immutable override showtimeVerifier;\\n    TimeCop public immutable timeCop;\\n\\n    constructor(IShowtimeVerifier _showtimeVerifier, TimeCop _timeCop) {\\n        if (address(_showtimeVerifier) == address(0) || address(_timeCop) == address(0)) {\\n            revert NullAddress();\\n        }\\n\\n        showtimeVerifier = _showtimeVerifier;\\n        timeCop = _timeCop;\\n    }\\n\\n    /// @param signedAttestation the attestation to verify along with a corresponding signature\\n    /// @dev the edition to mint will be determined by the attestation's context\\n    /// @dev the recipient of the minted edition will be determined by the attestation's beneficiary\\n    function mintEdition(SignedAttestation calldata signedAttestation) public override {\\n        IEditionSingleMintable collection = IEditionSingleMintable(signedAttestation.attestation.context);\\n\\n        if (timeCop.timeLimitReached(address(collection))) {\\n            revert TimeLimitReached(collection);\\n        }\\n\\n        if (!showtimeVerifier.verifyAndBurn(signedAttestation)) {\\n            revert VerificationFailed();\\n        }\\n\\n        collection.mintEdition(signedAttestation.attestation.beneficiary);\\n    }\\n\\n    /// @notice a batch version of mintEdition\\n    /// @notice any failed call to mintEdition will revert the entire batch\\n    function mintEditions(SignedAttestation[] calldata signedAttestations) external override {\\n        uint256 length = signedAttestations.length;\\n        for (uint256 i = 0; i < length; ) {\\n            mintEdition(signedAttestations[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa866fbcc09eb8cfcf9d2968d860fc052c896eb54fea289aa83c751859faa955b\",\"license\":\"MIT\"},\"src/editions/TimeCop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TimeCop {\\n    event TimeLimitSet(address collection, uint256 deadline);\\n\\n    error InvalidTimeLimit(uint256 offsetSeconds);\\n    error NotCollectionOwner();\\n    error TimeLimitAlreadySet();\\n\\n    uint256 public immutable MAX_DURATION_SECONDS;\\n\\n    /// @notice the time limits expressed as a timestamp in seconds\\n    mapping(address => uint256) public timeLimits;\\n\\n    /// @param _maxDurationSeconds maximum time limit\\n    /// @dev _maxDurationSeconds can be set to 0 to have no maximum time limit\\n    constructor(uint256 _maxDurationSeconds) {\\n        MAX_DURATION_SECONDS = _maxDurationSeconds;\\n    }\\n\\n    /// @notice Sets the deadline for the given collection\\n    /// @notice Only the owner of the collection can set the deadline\\n    /// @param collection The address to set the deadline for\\n    /// @param offsetSeconds a duration in seconds that will be used to set the time limit\\n    function setTimeLimit(address collection, uint256 offsetSeconds) external {\\n        if (offsetSeconds == 0) {\\n            revert InvalidTimeLimit(offsetSeconds);\\n        }\\n\\n        if (MAX_DURATION_SECONDS > 0 && offsetSeconds > MAX_DURATION_SECONDS) {\\n            revert InvalidTimeLimit(offsetSeconds);\\n        }\\n\\n        if (timeLimitSet(collection)) {\\n            revert TimeLimitAlreadySet();\\n        }\\n\\n        if (msg.sender != Ownable(collection).owner()) {\\n            revert NotCollectionOwner();\\n        }\\n\\n        uint256 deadline = block.timestamp + offsetSeconds;\\n        timeLimits[collection] = deadline;\\n\\n        emit TimeLimitSet(collection, deadline);\\n    }\\n\\n    function timeLimitSet(address collection) public view returns (bool) {\\n        return timeLimits[collection] > 0;\\n    }\\n\\n    /// @return false if there is no time limit set for that collection\\n    function timeLimitReached(address collection) public view returns (bool) {\\n        return timeLimitSet(collection) && block.timestamp > timeLimits[collection];\\n    }\\n}\",\"keccak256\":\"0x7a245be43fac95db15a2f5b1badaa8de64feac5a9afb6ab8c06f535512f03743\",\"license\":\"MIT\"},\"src/editions/interfaces/IGatedEditionMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IShowtimeVerifier, SignedAttestation } from \\\"src/interfaces/IShowtimeVerifier.sol\\\";\\n\\ninterface IGatedEditionMinter {\\n    function mintEdition(SignedAttestation calldata signedAttestation) external;\\n\\n    function mintEditions(SignedAttestation[] calldata signedAttestation) external;\\n\\n    function showtimeVerifier() external view returns (IShowtimeVerifier);\\n}\\n\",\"keccak256\":\"0xf9f42e73832c5bcb53d1b501e92a65caef8dd8e48ab14022cb5d838003d94500\",\"license\":\"MIT\"},\"src/interfaces/IShowtimeVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nstruct Attestation {\\n    address beneficiary;\\n    address context;\\n    uint256 nonce;\\n    uint256 validUntil;\\n}\\n\\nstruct SignedAttestation {\\n    Attestation attestation;\\n    bytes signature;\\n}\\n\\ninterface IShowtimeVerifier {\\n    error BadNonce(uint256 expected, uint256 actual);\\n    error DeadlineTooLong();\\n    error Expired();\\n    error NullAddress();\\n    error SignerExpired(address signer);\\n    error Unauthorized();\\n    error UnknownSigner();\\n\\n    event SignerAdded(address signer, uint256 validUntil);\\n    event SignerRevoked(address signer);\\n    event ManagerUpdated(address newManager);\\n\\n    function verify(SignedAttestation calldata signedAttestation) external view returns (bool);\\n\\n    function verifyAndBurn(SignedAttestation calldata signedAttestation) external returns (bool);\\n\\n    function verify(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external view returns (bool);\\n\\n    function verifyAndBurn(\\n        Attestation calldata attestation,\\n        bytes32 typeHash,\\n        bytes memory encodedData,\\n        bytes calldata signature\\n    ) external returns (bool);\\n\\n    function setManager(address _manager) external;\\n\\n    function registerSigner(address signer, uint256 validityDays) external returns (uint256 validUntil);\\n\\n    function revokeSigner(address signer) external;\\n\\n    function registerAndRevoke(\\n        address signerToRegister,\\n        address signerToRevoke,\\n        uint256 validityDays\\n    ) external returns (uint256 validUntil);\\n}\\n\",\"keccak256\":\"0x695d273638ee417210ccd91f0d47a9e280573887d068086f19038b8483950af8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c03461008f57601f6107fe38819003918201601f19168301916001600160401b0383118484101761009457808492604094855283398101031261008f5780602061006092519161004f836100aa565b01519061005b826100aa565b6100bb565b60405161070490816100fa823960805181818161011d01526104df015260a05181818161020401526104680152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381160361008f57565b6001600160a01b03818116159081156100ee575b506100dc5760805260a052565b60405163e99d5ac560e01b8152600490fd5b9050821615386100cf56fe60806040526004361015610013575b600080fd5b6000803560e01c90816332345cad14610066575080635360e5d41461005d578063910f3b5d146100545763f565d63d1461004c57600080fd5b61000e6101b8565b5061000e610141565b5061000e6100d1565b346100ce577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6020813601126100c6576004359067ffffffffffffffff82116100ca5760a09082360301126100c6576100c1906004016103ef565b604051f35b5080fd5b8280fd5b80fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043567ffffffffffffffff80821161000e573660238301121561000e57816004013590811161000e573660248260051b8401011161000e5760246101b69201610699565b005b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b3561025081610228565b90565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761029457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9081602091031261000e5751801515810361000e5790565b506040513d6000823e3d90fd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b9060208252803561033781610228565b73ffffffffffffffffffffffffffffffffffffffff8091166020840152602082013561036281610228565b166040830152604081013560608301526060810135608083015260808101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561000e5781019081359067ffffffffffffffff821161000e578136031261000e57602060c08460a0806102509701520192016102e8565b9081602091031261000e575190565b602090610419610400838301610246565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517fcf06dde400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830181905292909185816024817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561068c575b60009161066f575b5061062657508360405180927f82059300000000000000000000000000000000000000000000000000000000008252816000816104db8960048301610327565b03927f0000000000000000000000000000000000000000000000000000000000000000165af1908115610619575b6000916105ec575b50156105c2576105798391610527600094610246565b6040519485809481937fa66ff0af0000000000000000000000000000000000000000000000000000000083526004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03925af180156105b5575b61058c575050565b816105ab92903d106105ae575b6105a38183610253565b8101906103e0565b50565b503d610599565b6105bd6102db565b610584565b60046040517f439cc0cd000000000000000000000000000000000000000000000000000000008152fd5b61060c9150843d8611610612575b6106048183610253565b8101906102c3565b38610511565b503d6105fa565b6106216102db565b610509565b6040517fd302dcb800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602490fd5b6106869150863d8811610612576106048183610253565b3861049b565b6106946102db565b610493565b90600091825b8281106106ac5750505050565b8060051b8201357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61833603018112156106f357906106ed60019284016103ef565b0161069f565b8480fdfea164736f6c634300080d000a",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c90816332345cad14610066575080635360e5d41461005d578063910f3b5d146100545763f565d63d1461004c57600080fd5b61000e6101b8565b5061000e610141565b5061000e6100d1565b346100ce577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6020813601126100c6576004359067ffffffffffffffff82116100ca5760a09082360301126100c6576100c1906004016103ef565b604051f35b5080fd5b8280fd5b80fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043567ffffffffffffffff80821161000e573660238301121561000e57816004013590811161000e573660248260051b8401011161000e5760246101b69201610699565b005b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b3561025081610228565b90565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761029457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9081602091031261000e5751801515810361000e5790565b506040513d6000823e3d90fd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b9060208252803561033781610228565b73ffffffffffffffffffffffffffffffffffffffff8091166020840152602082013561036281610228565b166040830152604081013560608301526060810135608083015260808101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561000e5781019081359067ffffffffffffffff821161000e578136031261000e57602060c08460a0806102509701520192016102e8565b9081602091031261000e575190565b602090610419610400838301610246565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517fcf06dde400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830181905292909185816024817f000000000000000000000000000000000000000000000000000000000000000087165afa90811561068c575b60009161066f575b5061062657508360405180927f82059300000000000000000000000000000000000000000000000000000000008252816000816104db8960048301610327565b03927f0000000000000000000000000000000000000000000000000000000000000000165af1908115610619575b6000916105ec575b50156105c2576105798391610527600094610246565b6040519485809481937fa66ff0af0000000000000000000000000000000000000000000000000000000083526004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b03925af180156105b5575b61058c575050565b816105ab92903d106105ae575b6105a38183610253565b8101906103e0565b50565b503d610599565b6105bd6102db565b610584565b60046040517f439cc0cd000000000000000000000000000000000000000000000000000000008152fd5b61060c9150843d8611610612575b6106048183610253565b8101906102c3565b38610511565b503d6105fa565b6106216102db565b610509565b6040517fd302dcb800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602490fd5b6106869150863d8811610612576106048183610253565b3861049b565b6106946102db565b610493565b90600091825b8281106106ac5750505050565b8060051b8201357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61833603018112156106f357906106ed60019284016103ef565b0161069f565b8480fdfea164736f6c634300080d000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "mintEdition(((address,address,uint256,uint256),bytes))": {
        "details": "the edition to mint will be determined by the attestation's contextthe recipient of the minted edition will be determined by the attestation's beneficiary",
        "params": {
          "signedAttestation": "the attestation to verify along with a corresponding signature"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintEditions(((address,address,uint256,uint256),bytes)[])": {
        "notice": "a batch version of mintEditionany failed call to mintEdition will revert the entire batch"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}